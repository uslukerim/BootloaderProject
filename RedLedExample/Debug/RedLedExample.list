
RedLedExample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  0800c000  0800c000  0000c000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c0c  0800c188  0800c188  0000c188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800ed94  0800ed94  0000ed94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800edb4  0800edb4  0001000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800edb4  0800edb4  0000edb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800edbc  0800edbc  0001000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800edbc  0800edbc  0000edbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800edc0  0800edc0  0000edc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800edc4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f8  2000000c  0800edd0  0001000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  0800edd0  00010404  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e91  00000000  00000000  0001003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001948  00000000  00000000  00018ecd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000718  00000000  00000000  0001a818  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000640  00000000  00000000  0001af30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020afb  00000000  00000000  0001b570  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007125  00000000  00000000  0003c06b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c1f06  00000000  00000000  00043190  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00105096  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b58  00000000  00000000  00105114  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800c188 <__do_global_dtors_aux>:
 800c188:	b510      	push	{r4, lr}
 800c18a:	4c05      	ldr	r4, [pc, #20]	; (800c1a0 <__do_global_dtors_aux+0x18>)
 800c18c:	7823      	ldrb	r3, [r4, #0]
 800c18e:	b933      	cbnz	r3, 800c19e <__do_global_dtors_aux+0x16>
 800c190:	4b04      	ldr	r3, [pc, #16]	; (800c1a4 <__do_global_dtors_aux+0x1c>)
 800c192:	b113      	cbz	r3, 800c19a <__do_global_dtors_aux+0x12>
 800c194:	4804      	ldr	r0, [pc, #16]	; (800c1a8 <__do_global_dtors_aux+0x20>)
 800c196:	f3af 8000 	nop.w
 800c19a:	2301      	movs	r3, #1
 800c19c:	7023      	strb	r3, [r4, #0]
 800c19e:	bd10      	pop	{r4, pc}
 800c1a0:	2000000c 	.word	0x2000000c
 800c1a4:	00000000 	.word	0x00000000
 800c1a8:	0800ed7c 	.word	0x0800ed7c

0800c1ac <frame_dummy>:
 800c1ac:	b508      	push	{r3, lr}
 800c1ae:	4b03      	ldr	r3, [pc, #12]	; (800c1bc <frame_dummy+0x10>)
 800c1b0:	b11b      	cbz	r3, 800c1ba <frame_dummy+0xe>
 800c1b2:	4903      	ldr	r1, [pc, #12]	; (800c1c0 <frame_dummy+0x14>)
 800c1b4:	4803      	ldr	r0, [pc, #12]	; (800c1c4 <frame_dummy+0x18>)
 800c1b6:	f3af 8000 	nop.w
 800c1ba:	bd08      	pop	{r3, pc}
 800c1bc:	00000000 	.word	0x00000000
 800c1c0:	20000010 	.word	0x20000010
 800c1c4:	0800ed7c 	.word	0x0800ed7c

0800c1c8 <__aeabi_uldivmod>:
 800c1c8:	b953      	cbnz	r3, 800c1e0 <__aeabi_uldivmod+0x18>
 800c1ca:	b94a      	cbnz	r2, 800c1e0 <__aeabi_uldivmod+0x18>
 800c1cc:	2900      	cmp	r1, #0
 800c1ce:	bf08      	it	eq
 800c1d0:	2800      	cmpeq	r0, #0
 800c1d2:	bf1c      	itt	ne
 800c1d4:	f04f 31ff 	movne.w	r1, #4294967295
 800c1d8:	f04f 30ff 	movne.w	r0, #4294967295
 800c1dc:	f000 b972 	b.w	800c4c4 <__aeabi_idiv0>
 800c1e0:	f1ad 0c08 	sub.w	ip, sp, #8
 800c1e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800c1e8:	f000 f806 	bl	800c1f8 <__udivmoddi4>
 800c1ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c1f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c1f4:	b004      	add	sp, #16
 800c1f6:	4770      	bx	lr

0800c1f8 <__udivmoddi4>:
 800c1f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1fc:	9e08      	ldr	r6, [sp, #32]
 800c1fe:	4604      	mov	r4, r0
 800c200:	4688      	mov	r8, r1
 800c202:	2b00      	cmp	r3, #0
 800c204:	d14b      	bne.n	800c29e <__udivmoddi4+0xa6>
 800c206:	428a      	cmp	r2, r1
 800c208:	4615      	mov	r5, r2
 800c20a:	d967      	bls.n	800c2dc <__udivmoddi4+0xe4>
 800c20c:	fab2 f282 	clz	r2, r2
 800c210:	b14a      	cbz	r2, 800c226 <__udivmoddi4+0x2e>
 800c212:	f1c2 0720 	rsb	r7, r2, #32
 800c216:	fa01 f302 	lsl.w	r3, r1, r2
 800c21a:	fa20 f707 	lsr.w	r7, r0, r7
 800c21e:	4095      	lsls	r5, r2
 800c220:	ea47 0803 	orr.w	r8, r7, r3
 800c224:	4094      	lsls	r4, r2
 800c226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800c22a:	0c23      	lsrs	r3, r4, #16
 800c22c:	fbb8 f7fe 	udiv	r7, r8, lr
 800c230:	fa1f fc85 	uxth.w	ip, r5
 800c234:	fb0e 8817 	mls	r8, lr, r7, r8
 800c238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800c23c:	fb07 f10c 	mul.w	r1, r7, ip
 800c240:	4299      	cmp	r1, r3
 800c242:	d909      	bls.n	800c258 <__udivmoddi4+0x60>
 800c244:	18eb      	adds	r3, r5, r3
 800c246:	f107 30ff 	add.w	r0, r7, #4294967295
 800c24a:	f080 811b 	bcs.w	800c484 <__udivmoddi4+0x28c>
 800c24e:	4299      	cmp	r1, r3
 800c250:	f240 8118 	bls.w	800c484 <__udivmoddi4+0x28c>
 800c254:	3f02      	subs	r7, #2
 800c256:	442b      	add	r3, r5
 800c258:	1a5b      	subs	r3, r3, r1
 800c25a:	b2a4      	uxth	r4, r4
 800c25c:	fbb3 f0fe 	udiv	r0, r3, lr
 800c260:	fb0e 3310 	mls	r3, lr, r0, r3
 800c264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800c268:	fb00 fc0c 	mul.w	ip, r0, ip
 800c26c:	45a4      	cmp	ip, r4
 800c26e:	d909      	bls.n	800c284 <__udivmoddi4+0x8c>
 800c270:	192c      	adds	r4, r5, r4
 800c272:	f100 33ff 	add.w	r3, r0, #4294967295
 800c276:	f080 8107 	bcs.w	800c488 <__udivmoddi4+0x290>
 800c27a:	45a4      	cmp	ip, r4
 800c27c:	f240 8104 	bls.w	800c488 <__udivmoddi4+0x290>
 800c280:	3802      	subs	r0, #2
 800c282:	442c      	add	r4, r5
 800c284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800c288:	eba4 040c 	sub.w	r4, r4, ip
 800c28c:	2700      	movs	r7, #0
 800c28e:	b11e      	cbz	r6, 800c298 <__udivmoddi4+0xa0>
 800c290:	40d4      	lsrs	r4, r2
 800c292:	2300      	movs	r3, #0
 800c294:	e9c6 4300 	strd	r4, r3, [r6]
 800c298:	4639      	mov	r1, r7
 800c29a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c29e:	428b      	cmp	r3, r1
 800c2a0:	d909      	bls.n	800c2b6 <__udivmoddi4+0xbe>
 800c2a2:	2e00      	cmp	r6, #0
 800c2a4:	f000 80eb 	beq.w	800c47e <__udivmoddi4+0x286>
 800c2a8:	2700      	movs	r7, #0
 800c2aa:	e9c6 0100 	strd	r0, r1, [r6]
 800c2ae:	4638      	mov	r0, r7
 800c2b0:	4639      	mov	r1, r7
 800c2b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2b6:	fab3 f783 	clz	r7, r3
 800c2ba:	2f00      	cmp	r7, #0
 800c2bc:	d147      	bne.n	800c34e <__udivmoddi4+0x156>
 800c2be:	428b      	cmp	r3, r1
 800c2c0:	d302      	bcc.n	800c2c8 <__udivmoddi4+0xd0>
 800c2c2:	4282      	cmp	r2, r0
 800c2c4:	f200 80fa 	bhi.w	800c4bc <__udivmoddi4+0x2c4>
 800c2c8:	1a84      	subs	r4, r0, r2
 800c2ca:	eb61 0303 	sbc.w	r3, r1, r3
 800c2ce:	2001      	movs	r0, #1
 800c2d0:	4698      	mov	r8, r3
 800c2d2:	2e00      	cmp	r6, #0
 800c2d4:	d0e0      	beq.n	800c298 <__udivmoddi4+0xa0>
 800c2d6:	e9c6 4800 	strd	r4, r8, [r6]
 800c2da:	e7dd      	b.n	800c298 <__udivmoddi4+0xa0>
 800c2dc:	b902      	cbnz	r2, 800c2e0 <__udivmoddi4+0xe8>
 800c2de:	deff      	udf	#255	; 0xff
 800c2e0:	fab2 f282 	clz	r2, r2
 800c2e4:	2a00      	cmp	r2, #0
 800c2e6:	f040 808f 	bne.w	800c408 <__udivmoddi4+0x210>
 800c2ea:	1b49      	subs	r1, r1, r5
 800c2ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800c2f0:	fa1f f885 	uxth.w	r8, r5
 800c2f4:	2701      	movs	r7, #1
 800c2f6:	fbb1 fcfe 	udiv	ip, r1, lr
 800c2fa:	0c23      	lsrs	r3, r4, #16
 800c2fc:	fb0e 111c 	mls	r1, lr, ip, r1
 800c300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c304:	fb08 f10c 	mul.w	r1, r8, ip
 800c308:	4299      	cmp	r1, r3
 800c30a:	d907      	bls.n	800c31c <__udivmoddi4+0x124>
 800c30c:	18eb      	adds	r3, r5, r3
 800c30e:	f10c 30ff 	add.w	r0, ip, #4294967295
 800c312:	d202      	bcs.n	800c31a <__udivmoddi4+0x122>
 800c314:	4299      	cmp	r1, r3
 800c316:	f200 80cd 	bhi.w	800c4b4 <__udivmoddi4+0x2bc>
 800c31a:	4684      	mov	ip, r0
 800c31c:	1a59      	subs	r1, r3, r1
 800c31e:	b2a3      	uxth	r3, r4
 800c320:	fbb1 f0fe 	udiv	r0, r1, lr
 800c324:	fb0e 1410 	mls	r4, lr, r0, r1
 800c328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800c32c:	fb08 f800 	mul.w	r8, r8, r0
 800c330:	45a0      	cmp	r8, r4
 800c332:	d907      	bls.n	800c344 <__udivmoddi4+0x14c>
 800c334:	192c      	adds	r4, r5, r4
 800c336:	f100 33ff 	add.w	r3, r0, #4294967295
 800c33a:	d202      	bcs.n	800c342 <__udivmoddi4+0x14a>
 800c33c:	45a0      	cmp	r8, r4
 800c33e:	f200 80b6 	bhi.w	800c4ae <__udivmoddi4+0x2b6>
 800c342:	4618      	mov	r0, r3
 800c344:	eba4 0408 	sub.w	r4, r4, r8
 800c348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800c34c:	e79f      	b.n	800c28e <__udivmoddi4+0x96>
 800c34e:	f1c7 0c20 	rsb	ip, r7, #32
 800c352:	40bb      	lsls	r3, r7
 800c354:	fa22 fe0c 	lsr.w	lr, r2, ip
 800c358:	ea4e 0e03 	orr.w	lr, lr, r3
 800c35c:	fa01 f407 	lsl.w	r4, r1, r7
 800c360:	fa20 f50c 	lsr.w	r5, r0, ip
 800c364:	fa21 f30c 	lsr.w	r3, r1, ip
 800c368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800c36c:	4325      	orrs	r5, r4
 800c36e:	fbb3 f9f8 	udiv	r9, r3, r8
 800c372:	0c2c      	lsrs	r4, r5, #16
 800c374:	fb08 3319 	mls	r3, r8, r9, r3
 800c378:	fa1f fa8e 	uxth.w	sl, lr
 800c37c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800c380:	fb09 f40a 	mul.w	r4, r9, sl
 800c384:	429c      	cmp	r4, r3
 800c386:	fa02 f207 	lsl.w	r2, r2, r7
 800c38a:	fa00 f107 	lsl.w	r1, r0, r7
 800c38e:	d90b      	bls.n	800c3a8 <__udivmoddi4+0x1b0>
 800c390:	eb1e 0303 	adds.w	r3, lr, r3
 800c394:	f109 30ff 	add.w	r0, r9, #4294967295
 800c398:	f080 8087 	bcs.w	800c4aa <__udivmoddi4+0x2b2>
 800c39c:	429c      	cmp	r4, r3
 800c39e:	f240 8084 	bls.w	800c4aa <__udivmoddi4+0x2b2>
 800c3a2:	f1a9 0902 	sub.w	r9, r9, #2
 800c3a6:	4473      	add	r3, lr
 800c3a8:	1b1b      	subs	r3, r3, r4
 800c3aa:	b2ad      	uxth	r5, r5
 800c3ac:	fbb3 f0f8 	udiv	r0, r3, r8
 800c3b0:	fb08 3310 	mls	r3, r8, r0, r3
 800c3b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800c3b8:	fb00 fa0a 	mul.w	sl, r0, sl
 800c3bc:	45a2      	cmp	sl, r4
 800c3be:	d908      	bls.n	800c3d2 <__udivmoddi4+0x1da>
 800c3c0:	eb1e 0404 	adds.w	r4, lr, r4
 800c3c4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c3c8:	d26b      	bcs.n	800c4a2 <__udivmoddi4+0x2aa>
 800c3ca:	45a2      	cmp	sl, r4
 800c3cc:	d969      	bls.n	800c4a2 <__udivmoddi4+0x2aa>
 800c3ce:	3802      	subs	r0, #2
 800c3d0:	4474      	add	r4, lr
 800c3d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800c3d6:	fba0 8902 	umull	r8, r9, r0, r2
 800c3da:	eba4 040a 	sub.w	r4, r4, sl
 800c3de:	454c      	cmp	r4, r9
 800c3e0:	46c2      	mov	sl, r8
 800c3e2:	464b      	mov	r3, r9
 800c3e4:	d354      	bcc.n	800c490 <__udivmoddi4+0x298>
 800c3e6:	d051      	beq.n	800c48c <__udivmoddi4+0x294>
 800c3e8:	2e00      	cmp	r6, #0
 800c3ea:	d069      	beq.n	800c4c0 <__udivmoddi4+0x2c8>
 800c3ec:	ebb1 050a 	subs.w	r5, r1, sl
 800c3f0:	eb64 0403 	sbc.w	r4, r4, r3
 800c3f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 800c3f8:	40fd      	lsrs	r5, r7
 800c3fa:	40fc      	lsrs	r4, r7
 800c3fc:	ea4c 0505 	orr.w	r5, ip, r5
 800c400:	e9c6 5400 	strd	r5, r4, [r6]
 800c404:	2700      	movs	r7, #0
 800c406:	e747      	b.n	800c298 <__udivmoddi4+0xa0>
 800c408:	f1c2 0320 	rsb	r3, r2, #32
 800c40c:	fa20 f703 	lsr.w	r7, r0, r3
 800c410:	4095      	lsls	r5, r2
 800c412:	fa01 f002 	lsl.w	r0, r1, r2
 800c416:	fa21 f303 	lsr.w	r3, r1, r3
 800c41a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800c41e:	4338      	orrs	r0, r7
 800c420:	0c01      	lsrs	r1, r0, #16
 800c422:	fbb3 f7fe 	udiv	r7, r3, lr
 800c426:	fa1f f885 	uxth.w	r8, r5
 800c42a:	fb0e 3317 	mls	r3, lr, r7, r3
 800c42e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c432:	fb07 f308 	mul.w	r3, r7, r8
 800c436:	428b      	cmp	r3, r1
 800c438:	fa04 f402 	lsl.w	r4, r4, r2
 800c43c:	d907      	bls.n	800c44e <__udivmoddi4+0x256>
 800c43e:	1869      	adds	r1, r5, r1
 800c440:	f107 3cff 	add.w	ip, r7, #4294967295
 800c444:	d22f      	bcs.n	800c4a6 <__udivmoddi4+0x2ae>
 800c446:	428b      	cmp	r3, r1
 800c448:	d92d      	bls.n	800c4a6 <__udivmoddi4+0x2ae>
 800c44a:	3f02      	subs	r7, #2
 800c44c:	4429      	add	r1, r5
 800c44e:	1acb      	subs	r3, r1, r3
 800c450:	b281      	uxth	r1, r0
 800c452:	fbb3 f0fe 	udiv	r0, r3, lr
 800c456:	fb0e 3310 	mls	r3, lr, r0, r3
 800c45a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c45e:	fb00 f308 	mul.w	r3, r0, r8
 800c462:	428b      	cmp	r3, r1
 800c464:	d907      	bls.n	800c476 <__udivmoddi4+0x27e>
 800c466:	1869      	adds	r1, r5, r1
 800c468:	f100 3cff 	add.w	ip, r0, #4294967295
 800c46c:	d217      	bcs.n	800c49e <__udivmoddi4+0x2a6>
 800c46e:	428b      	cmp	r3, r1
 800c470:	d915      	bls.n	800c49e <__udivmoddi4+0x2a6>
 800c472:	3802      	subs	r0, #2
 800c474:	4429      	add	r1, r5
 800c476:	1ac9      	subs	r1, r1, r3
 800c478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800c47c:	e73b      	b.n	800c2f6 <__udivmoddi4+0xfe>
 800c47e:	4637      	mov	r7, r6
 800c480:	4630      	mov	r0, r6
 800c482:	e709      	b.n	800c298 <__udivmoddi4+0xa0>
 800c484:	4607      	mov	r7, r0
 800c486:	e6e7      	b.n	800c258 <__udivmoddi4+0x60>
 800c488:	4618      	mov	r0, r3
 800c48a:	e6fb      	b.n	800c284 <__udivmoddi4+0x8c>
 800c48c:	4541      	cmp	r1, r8
 800c48e:	d2ab      	bcs.n	800c3e8 <__udivmoddi4+0x1f0>
 800c490:	ebb8 0a02 	subs.w	sl, r8, r2
 800c494:	eb69 020e 	sbc.w	r2, r9, lr
 800c498:	3801      	subs	r0, #1
 800c49a:	4613      	mov	r3, r2
 800c49c:	e7a4      	b.n	800c3e8 <__udivmoddi4+0x1f0>
 800c49e:	4660      	mov	r0, ip
 800c4a0:	e7e9      	b.n	800c476 <__udivmoddi4+0x27e>
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	e795      	b.n	800c3d2 <__udivmoddi4+0x1da>
 800c4a6:	4667      	mov	r7, ip
 800c4a8:	e7d1      	b.n	800c44e <__udivmoddi4+0x256>
 800c4aa:	4681      	mov	r9, r0
 800c4ac:	e77c      	b.n	800c3a8 <__udivmoddi4+0x1b0>
 800c4ae:	3802      	subs	r0, #2
 800c4b0:	442c      	add	r4, r5
 800c4b2:	e747      	b.n	800c344 <__udivmoddi4+0x14c>
 800c4b4:	f1ac 0c02 	sub.w	ip, ip, #2
 800c4b8:	442b      	add	r3, r5
 800c4ba:	e72f      	b.n	800c31c <__udivmoddi4+0x124>
 800c4bc:	4638      	mov	r0, r7
 800c4be:	e708      	b.n	800c2d2 <__udivmoddi4+0xda>
 800c4c0:	4637      	mov	r7, r6
 800c4c2:	e6e9      	b.n	800c298 <__udivmoddi4+0xa0>

0800c4c4 <__aeabi_idiv0>:
 800c4c4:	4770      	bx	lr
 800c4c6:	bf00      	nop

0800c4c8 <JumpTo>:
	}else{
		addr=APPADDRESS+AppADDR*4;
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,addr, Program_Data);
	}
}
void JumpTo(uint32_t AppADDR){
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b086      	sub	sp, #24
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
	HAL_DeInit();
 800c4d0:	f000 fbf0 	bl	800ccb4 <HAL_DeInit>
	pFunction Jump_To_Application = *( (pFunction*) (AppADDR + 4) );
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	3304      	adds	r3, #4
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	617b      	str	r3, [r7, #20]
 800c4dc:	2300      	movs	r3, #0
 800c4de:	60fb      	str	r3, [r7, #12]
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	f383 8814 	msr	CONTROL, r3
	__set_CONTROL(0);
	SysTick->CTRL = 0; //disable SysTick
 800c4e6:	4b09      	ldr	r3, [pc, #36]	; (800c50c <JumpTo+0x44>)
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	601a      	str	r2, [r3, #0]
	SCB->VTOR = AppADDR;
 800c4ec:	4a08      	ldr	r2, [pc, #32]	; (800c510 <JumpTo+0x48>)
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	6093      	str	r3, [r2, #8]
	__set_MSP( *( (uint32_t*) AppADDR ) );
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800c4f8:	693b      	ldr	r3, [r7, #16]
 800c4fa:	f383 8808 	msr	MSP, r3
	Jump_To_Application();
 800c4fe:	697b      	ldr	r3, [r7, #20]
 800c500:	4798      	blx	r3
}
 800c502:	bf00      	nop
 800c504:	3718      	adds	r7, #24
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}
 800c50a:	bf00      	nop
 800c50c:	e000e010 	.word	0xe000e010
 800c510:	e000ed00 	.word	0xe000ed00

0800c514 <HAL_UART_RxCpltCallback>:

#include "circularMemory.h"

/*********************************************************************************************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)//UART üzerinden verilerin alımında kullanılır
{
 800c514:	b590      	push	{r4, r7, lr}
 800c516:	b083      	sub	sp, #12
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]

    TState=HAL_UART_Receive_DMA(&huart4, UART1_rxBuffer, 15);
 800c51c:	220f      	movs	r2, #15
 800c51e:	491c      	ldr	r1, [pc, #112]	; (800c590 <HAL_UART_RxCpltCallback+0x7c>)
 800c520:	481c      	ldr	r0, [pc, #112]	; (800c594 <HAL_UART_RxCpltCallback+0x80>)
 800c522:	f001 ff23 	bl	800e36c <HAL_UART_Receive_DMA>
 800c526:	4603      	mov	r3, r0
 800c528:	461a      	mov	r2, r3
 800c52a:	4b1b      	ldr	r3, [pc, #108]	; (800c598 <HAL_UART_RxCpltCallback+0x84>)
 800c52c:	701a      	strb	r2, [r3, #0]
	memcpy(&parser,&UART1_rxBuffer,sizeof(parser));
 800c52e:	4b1b      	ldr	r3, [pc, #108]	; (800c59c <HAL_UART_RxCpltCallback+0x88>)
 800c530:	4a17      	ldr	r2, [pc, #92]	; (800c590 <HAL_UART_RxCpltCallback+0x7c>)
 800c532:	6814      	ldr	r4, [r2, #0]
 800c534:	6850      	ldr	r0, [r2, #4]
 800c536:	6891      	ldr	r1, [r2, #8]
 800c538:	601c      	str	r4, [r3, #0]
 800c53a:	6058      	str	r0, [r3, #4]
 800c53c:	6099      	str	r1, [r3, #8]
 800c53e:	8991      	ldrh	r1, [r2, #12]
 800c540:	7b92      	ldrb	r2, [r2, #14]
 800c542:	8199      	strh	r1, [r3, #12]
 800c544:	739a      	strb	r2, [r3, #14]
    if(UART1_rxBuffer[0]==START_Condition && UART1_rxBuffer[14]==STOP_Condition){
 800c546:	4b12      	ldr	r3, [pc, #72]	; (800c590 <HAL_UART_RxCpltCallback+0x7c>)
 800c548:	781b      	ldrb	r3, [r3, #0]
 800c54a:	2ba3      	cmp	r3, #163	; 0xa3
 800c54c:	d114      	bne.n	800c578 <HAL_UART_RxCpltCallback+0x64>
 800c54e:	4b10      	ldr	r3, [pc, #64]	; (800c590 <HAL_UART_RxCpltCallback+0x7c>)
 800c550:	7b9b      	ldrb	r3, [r3, #14]
 800c552:	2b25      	cmp	r3, #37	; 0x25
 800c554:	d110      	bne.n	800c578 <HAL_UART_RxCpltCallback+0x64>
    	memcpy(&Mypacket,&UART1_rxBuffer,sizeof(parser));
 800c556:	4b12      	ldr	r3, [pc, #72]	; (800c5a0 <HAL_UART_RxCpltCallback+0x8c>)
 800c558:	4a0d      	ldr	r2, [pc, #52]	; (800c590 <HAL_UART_RxCpltCallback+0x7c>)
 800c55a:	6814      	ldr	r4, [r2, #0]
 800c55c:	6850      	ldr	r0, [r2, #4]
 800c55e:	6891      	ldr	r1, [r2, #8]
 800c560:	601c      	str	r4, [r3, #0]
 800c562:	6058      	str	r0, [r3, #4]
 800c564:	6099      	str	r1, [r3, #8]
 800c566:	8991      	ldrh	r1, [r2, #12]
 800c568:	7b92      	ldrb	r2, [r2, #14]
 800c56a:	8199      	strh	r1, [r3, #12]
 800c56c:	739a      	strb	r2, [r3, #14]
    	CBufWrite(&CBuf,&Mypacket);
 800c56e:	490c      	ldr	r1, [pc, #48]	; (800c5a0 <HAL_UART_RxCpltCallback+0x8c>)
 800c570:	480c      	ldr	r0, [pc, #48]	; (800c5a4 <HAL_UART_RxCpltCallback+0x90>)
 800c572:	f000 f8a9 	bl	800c6c8 <CBufWrite>
 800c576:	e006      	b.n	800c586 <HAL_UART_RxCpltCallback+0x72>
    }else
    {
    	CBuf.WrongPacketCount++;
 800c578:	4b0a      	ldr	r3, [pc, #40]	; (800c5a4 <HAL_UART_RxCpltCallback+0x90>)
 800c57a:	88db      	ldrh	r3, [r3, #6]
 800c57c:	b29b      	uxth	r3, r3
 800c57e:	3301      	adds	r3, #1
 800c580:	b29a      	uxth	r2, r3
 800c582:	4b08      	ldr	r3, [pc, #32]	; (800c5a4 <HAL_UART_RxCpltCallback+0x90>)
 800c584:	80da      	strh	r2, [r3, #6]
    }


}
 800c586:	bf00      	nop
 800c588:	370c      	adds	r7, #12
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd90      	pop	{r4, r7, pc}
 800c58e:	bf00      	nop
 800c590:	200000a8 	.word	0x200000a8
 800c594:	200003b0 	.word	0x200003b0
 800c598:	200000a7 	.word	0x200000a7
 800c59c:	20000098 	.word	0x20000098
 800c5a0:	200003f0 	.word	0x200003f0
 800c5a4:	200000b8 	.word	0x200000b8

0800c5a8 <UARTParserInit>:
/**********************************************************************************************************************/
parser_status UARTParserInit(){
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b082      	sub	sp, #8
 800c5ac:	af00      	add	r7, sp, #0
	parser_status state;
	CBufINIT(&CBuf);
 800c5ae:	480a      	ldr	r0, [pc, #40]	; (800c5d8 <UARTParserInit+0x30>)
 800c5b0:	f000 f83e 	bl	800c630 <CBufINIT>
    if(HAL_UART_Receive_DMA (&huart4, UART1_rxBuffer, 15)==HAL_OK){
 800c5b4:	220f      	movs	r2, #15
 800c5b6:	4909      	ldr	r1, [pc, #36]	; (800c5dc <UARTParserInit+0x34>)
 800c5b8:	4809      	ldr	r0, [pc, #36]	; (800c5e0 <UARTParserInit+0x38>)
 800c5ba:	f001 fed7 	bl	800e36c <HAL_UART_Receive_DMA>
 800c5be:	4603      	mov	r3, r0
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d102      	bne.n	800c5ca <UARTParserInit+0x22>
    	state=INITSUCCESS;
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	71fb      	strb	r3, [r7, #7]
 800c5c8:	e001      	b.n	800c5ce <UARTParserInit+0x26>
    }else{
    	state=INITERROR;
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	71fb      	strb	r3, [r7, #7]
    }
    return state;
 800c5ce:	79fb      	ldrb	r3, [r7, #7]

}
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	3708      	adds	r7, #8
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}
 800c5d8:	200000b8 	.word	0x200000b8
 800c5dc:	200000a8 	.word	0x200000a8
 800c5e0:	200003b0 	.word	0x200003b0

0800c5e4 <Commands_Processing>:
	return state;
}



parser_status Commands_Processing(){//Gelen verilerin işlenmesi. Bu fonksiyon farklı kombinasyonlara göre özelleştirilebilir
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b082      	sub	sp, #8
 800c5e8:	af00      	add	r7, sp, #0

	parser_status state = waiting_data;
 800c5ea:	230a      	movs	r3, #10
 800c5ec:	71fb      	strb	r3, [r7, #7]
		while(!CBufRead(&CBuf,&parser)){
 800c5ee:	e00f      	b.n	800c610 <Commands_Processing+0x2c>
			state=process_complated;
 800c5f0:	2307      	movs	r3, #7
 800c5f2:	71fb      	strb	r3, [r7, #7]
			switch(parser.commandNO)
 800c5f4:	4b0c      	ldr	r3, [pc, #48]	; (800c628 <Commands_Processing+0x44>)
 800c5f6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c5fa:	b29b      	uxth	r3, r3
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d104      	bne.n	800c60a <Commands_Processing+0x26>
			{
			case BootCommand:
				JumpTo(BootSystemFlashAddr);
 800c600:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800c604:	f7ff ff60 	bl	800c4c8 <JumpTo>
				break;
 800c608:	e002      	b.n	800c610 <Commands_Processing+0x2c>
				/*
				 *
				 *
				 */
			default:
				state=CMDDoesNotMatch;
 800c60a:	2302      	movs	r3, #2
 800c60c:	71fb      	strb	r3, [r7, #7]
				break;
 800c60e:	bf00      	nop
		while(!CBufRead(&CBuf,&parser)){
 800c610:	4905      	ldr	r1, [pc, #20]	; (800c628 <Commands_Processing+0x44>)
 800c612:	4806      	ldr	r0, [pc, #24]	; (800c62c <Commands_Processing+0x48>)
 800c614:	f000 f818 	bl	800c648 <CBufRead>
 800c618:	4603      	mov	r3, r0
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d0e8      	beq.n	800c5f0 <Commands_Processing+0xc>
			}
		}
		return state;
 800c61e:	79fb      	ldrb	r3, [r7, #7]
}
 800c620:	4618      	mov	r0, r3
 800c622:	3708      	adds	r7, #8
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}
 800c628:	20000098 	.word	0x20000098
 800c62c:	200000b8 	.word	0x200000b8

0800c630 <CBufINIT>:
 *      Author: kerim
 */

#include "circularMemory.h"

void CBufINIT(MypacketCBufTypedef*MyCBuf){
 800c630:	b480      	push	{r7}
 800c632:	b083      	sub	sp, #12
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]

memset(&MyCBuf,0,sizeof(MyCBuf));
 800c638:	2300      	movs	r3, #0
 800c63a:	607b      	str	r3, [r7, #4]

}
 800c63c:	bf00      	nop
 800c63e:	370c      	adds	r7, #12
 800c640:	46bd      	mov	sp, r7
 800c642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c646:	4770      	bx	lr

0800c648 <CBufRead>:
/***************************************************************************************************************/
int CBufRead(MypacketCBufTypedef*MyCBuf,MypacketTypedef*MyPacket){
 800c648:	b580      	push	{r7, lr}
 800c64a:	b082      	sub	sp, #8
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	6039      	str	r1, [r7, #0]

	if(MyCBuf->buffer[MyCBuf->tail].SOF!=0){
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	889b      	ldrh	r3, [r3, #4]
 800c656:	b29b      	uxth	r3, r3
 800c658:	4619      	mov	r1, r3
 800c65a:	687a      	ldr	r2, [r7, #4]
 800c65c:	460b      	mov	r3, r1
 800c65e:	011b      	lsls	r3, r3, #4
 800c660:	1a5b      	subs	r3, r3, r1
 800c662:	4413      	add	r3, r2
 800c664:	330a      	adds	r3, #10
 800c666:	781b      	ldrb	r3, [r3, #0]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d028      	beq.n	800c6be <CBufRead+0x76>
		memcpy(&MyPacket,&MyCBuf->buffer[MyCBuf->tail],sizeof(MyPacket));
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	889b      	ldrh	r3, [r3, #4]
 800c670:	b29b      	uxth	r3, r3
 800c672:	461a      	mov	r2, r3
 800c674:	4613      	mov	r3, r2
 800c676:	011b      	lsls	r3, r3, #4
 800c678:	1a9b      	subs	r3, r3, r2
 800c67a:	3308      	adds	r3, #8
 800c67c:	687a      	ldr	r2, [r7, #4]
 800c67e:	4413      	add	r3, r2
 800c680:	3302      	adds	r3, #2
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	603b      	str	r3, [r7, #0]
		memset(&MyCBuf->buffer[MyCBuf->tail],0,sizeof(MyCBuf->buffer[MyCBuf->tail]));
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	889b      	ldrh	r3, [r3, #4]
 800c68a:	b29b      	uxth	r3, r3
 800c68c:	461a      	mov	r2, r3
 800c68e:	4613      	mov	r3, r2
 800c690:	011b      	lsls	r3, r3, #4
 800c692:	1a9b      	subs	r3, r3, r2
 800c694:	3308      	adds	r3, #8
 800c696:	687a      	ldr	r2, [r7, #4]
 800c698:	4413      	add	r3, r2
 800c69a:	3302      	adds	r3, #2
 800c69c:	220f      	movs	r2, #15
 800c69e:	2100      	movs	r1, #0
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f002 fb62 	bl	800ed6a <memset>
		MyCBuf->tail++;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	889b      	ldrh	r3, [r3, #4]
 800c6aa:	b29b      	uxth	r3, r3
 800c6ac:	3301      	adds	r3, #1
 800c6ae:	b29a      	uxth	r2, r3
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	809a      	strh	r2, [r3, #4]
		CircularIndexCTRL(MyCBuf);
 800c6b4:	6878      	ldr	r0, [r7, #4]
 800c6b6:	f000 f877 	bl	800c7a8 <CircularIndexCTRL>
		return 0;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	e000      	b.n	800c6c0 <CBufRead+0x78>
	}else{
		return 1;
 800c6be:	2301      	movs	r3, #1

	}

}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3708      	adds	r7, #8
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}

0800c6c8 <CBufWrite>:
/***************************************************************************************************************/

int CBufWrite(MypacketCBufTypedef*MyCBuf,MypacketTypedef*MyPacket){
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b084      	sub	sp, #16
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
 800c6d0:	6039      	str	r1, [r7, #0]

	int state=0;
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	60fb      	str	r3, [r7, #12]
	if(MyCBuf->buffer[MyCBuf->head].SOF==0){
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	885b      	ldrh	r3, [r3, #2]
 800c6da:	b29b      	uxth	r3, r3
 800c6dc:	4619      	mov	r1, r3
 800c6de:	687a      	ldr	r2, [r7, #4]
 800c6e0:	460b      	mov	r3, r1
 800c6e2:	011b      	lsls	r3, r3, #4
 800c6e4:	1a5b      	subs	r3, r3, r1
 800c6e6:	4413      	add	r3, r2
 800c6e8:	330a      	adds	r3, #10
 800c6ea:	781b      	ldrb	r3, [r3, #0]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d129      	bne.n	800c744 <CBufWrite+0x7c>
		memcpy(&MyCBuf->buffer[MyCBuf->head],MyPacket ,sizeof(MyCBuf->buffer[MyCBuf->head]));
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	885b      	ldrh	r3, [r3, #2]
 800c6f4:	b29b      	uxth	r3, r3
 800c6f6:	461a      	mov	r2, r3
 800c6f8:	4613      	mov	r3, r2
 800c6fa:	011b      	lsls	r3, r3, #4
 800c6fc:	1a9b      	subs	r3, r3, r2
 800c6fe:	3308      	adds	r3, #8
 800c700:	687a      	ldr	r2, [r7, #4]
 800c702:	4413      	add	r3, r2
 800c704:	3302      	adds	r3, #2
 800c706:	220f      	movs	r2, #15
 800c708:	6839      	ldr	r1, [r7, #0]
 800c70a:	4618      	mov	r0, r3
 800c70c:	f002 fb22 	bl	800ed54 <memcpy>
		MyCBuf->head++;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	885b      	ldrh	r3, [r3, #2]
 800c714:	b29b      	uxth	r3, r3
 800c716:	3301      	adds	r3, #1
 800c718:	b29a      	uxth	r2, r3
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	805a      	strh	r2, [r3, #2]
		CircularIndexCTRL(MyCBuf);
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f000 f842 	bl	800c7a8 <CircularIndexCTRL>
		if(MyCBuf->head==MyCBuf->tail){
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	885b      	ldrh	r3, [r3, #2]
 800c728:	b29a      	uxth	r2, r3
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	889b      	ldrh	r3, [r3, #4]
 800c72e:	b29b      	uxth	r3, r3
 800c730:	429a      	cmp	r2, r3
 800c732:	d131      	bne.n	800c798 <CBufWrite+0xd0>
			MyCBuf->tail++;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	889b      	ldrh	r3, [r3, #4]
 800c738:	b29b      	uxth	r3, r3
 800c73a:	3301      	adds	r3, #1
 800c73c:	b29a      	uxth	r2, r3
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	809a      	strh	r2, [r3, #4]
 800c742:	e029      	b.n	800c798 <CBufWrite+0xd0>
		}
	}else{
		memcpy(&MyCBuf->buffer[MyCBuf->head],MyPacket ,sizeof(MyCBuf->buffer[MyCBuf->head]));
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	885b      	ldrh	r3, [r3, #2]
 800c748:	b29b      	uxth	r3, r3
 800c74a:	461a      	mov	r2, r3
 800c74c:	4613      	mov	r3, r2
 800c74e:	011b      	lsls	r3, r3, #4
 800c750:	1a9b      	subs	r3, r3, r2
 800c752:	3308      	adds	r3, #8
 800c754:	687a      	ldr	r2, [r7, #4]
 800c756:	4413      	add	r3, r2
 800c758:	3302      	adds	r3, #2
 800c75a:	220f      	movs	r2, #15
 800c75c:	6839      	ldr	r1, [r7, #0]
 800c75e:	4618      	mov	r0, r3
 800c760:	f002 faf8 	bl	800ed54 <memcpy>
		MyCBuf->head++;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	885b      	ldrh	r3, [r3, #2]
 800c768:	b29b      	uxth	r3, r3
 800c76a:	3301      	adds	r3, #1
 800c76c:	b29a      	uxth	r2, r3
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	805a      	strh	r2, [r3, #2]
		MyCBuf->tail++;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	889b      	ldrh	r3, [r3, #4]
 800c776:	b29b      	uxth	r3, r3
 800c778:	3301      	adds	r3, #1
 800c77a:	b29a      	uxth	r2, r3
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	809a      	strh	r2, [r3, #4]
		CircularIndexCTRL(MyCBuf);
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f000 f811 	bl	800c7a8 <CircularIndexCTRL>
		MyCBuf->MissingPacketCount++;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	891b      	ldrh	r3, [r3, #8]
 800c78a:	b29b      	uxth	r3, r3
 800c78c:	3301      	adds	r3, #1
 800c78e:	b29a      	uxth	r2, r3
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	811a      	strh	r2, [r3, #8]
		state=1;
 800c794:	2301      	movs	r3, #1
 800c796:	60fb      	str	r3, [r7, #12]
	}
	CircularIndexCTRL(MyCBuf);
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	f000 f805 	bl	800c7a8 <CircularIndexCTRL>

	return state;
 800c79e:	68fb      	ldr	r3, [r7, #12]

}
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	3710      	adds	r7, #16
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bd80      	pop	{r7, pc}

0800c7a8 <CircularIndexCTRL>:
/***************************************************************************************************************/
void CircularIndexCTRL(MypacketCBufTypedef*MyCBuf){
 800c7a8:	b480      	push	{r7}
 800c7aa:	b083      	sub	sp, #12
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
	if(MyCBuf->head>=MAXMEMORYSIZE){
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	885b      	ldrh	r3, [r3, #2]
 800c7b4:	b29b      	uxth	r3, r3
 800c7b6:	2b31      	cmp	r3, #49	; 0x31
 800c7b8:	d90b      	bls.n	800c7d2 <CircularIndexCTRL+0x2a>
		MyCBuf->cycle++;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	881b      	ldrh	r3, [r3, #0]
 800c7be:	b29b      	uxth	r3, r3
 800c7c0:	3301      	adds	r3, #1
 800c7c2:	b29a      	uxth	r2, r3
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	801a      	strh	r2, [r3, #0]
		MyCBuf->head=0;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	709a      	strb	r2, [r3, #2]
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	70da      	strb	r2, [r3, #3]
		//return;
	}
	if(MyCBuf->tail>=MAXMEMORYSIZE){
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	889b      	ldrh	r3, [r3, #4]
 800c7d6:	b29b      	uxth	r3, r3
 800c7d8:	2b31      	cmp	r3, #49	; 0x31
 800c7da:	d904      	bls.n	800c7e6 <CircularIndexCTRL+0x3e>
		MyCBuf->tail=0;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2200      	movs	r2, #0
 800c7e0:	711a      	strb	r2, [r3, #4]
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	715a      	strb	r2, [r3, #5]

	}

}
 800c7e6:	bf00      	nop
 800c7e8:	370c      	adds	r7, #12
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f0:	4770      	bx	lr
	...

0800c7f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b082      	sub	sp, #8
 800c7f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800c7fa:	f000 fa39 	bl	800cc70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800c7fe:	f000 f81f 	bl	800c840 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800c802:	f000 f8cf 	bl	800c9a4 <MX_GPIO_Init>
  MX_DMA_Init();
 800c806:	f000 f8ad 	bl	800c964 <MX_DMA_Init>
  MX_UART4_Init();
 800c80a:	f000 f881 	bl	800c910 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  UARTParserInit();
 800c80e:	f7ff fecb 	bl	800c5a8 <UARTParserInit>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
	 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800c812:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c816:	4808      	ldr	r0, [pc, #32]	; (800c838 <main+0x44>)
 800c818:	f001 f903 	bl	800da22 <HAL_GPIO_TogglePin>
	  for(int i=0;i<500000;i++){
 800c81c:	2300      	movs	r3, #0
 800c81e:	607b      	str	r3, [r7, #4]
 800c820:	e002      	b.n	800c828 <main+0x34>
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	3301      	adds	r3, #1
 800c826:	607b      	str	r3, [r7, #4]
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	4a04      	ldr	r2, [pc, #16]	; (800c83c <main+0x48>)
 800c82c:	4293      	cmp	r3, r2
 800c82e:	ddf8      	ble.n	800c822 <main+0x2e>
	  }
	  Commands_Processing();
 800c830:	f7ff fed8 	bl	800c5e4 <Commands_Processing>
	 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800c834:	e7ed      	b.n	800c812 <main+0x1e>
 800c836:	bf00      	nop
 800c838:	40020c00 	.word	0x40020c00
 800c83c:	0007a11f 	.word	0x0007a11f

0800c840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b094      	sub	sp, #80	; 0x50
 800c844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c846:	f107 0320 	add.w	r3, r7, #32
 800c84a:	2230      	movs	r2, #48	; 0x30
 800c84c:	2100      	movs	r1, #0
 800c84e:	4618      	mov	r0, r3
 800c850:	f002 fa8b 	bl	800ed6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c854:	f107 030c 	add.w	r3, r7, #12
 800c858:	2200      	movs	r2, #0
 800c85a:	601a      	str	r2, [r3, #0]
 800c85c:	605a      	str	r2, [r3, #4]
 800c85e:	609a      	str	r2, [r3, #8]
 800c860:	60da      	str	r2, [r3, #12]
 800c862:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800c864:	2300      	movs	r3, #0
 800c866:	60bb      	str	r3, [r7, #8]
 800c868:	4b27      	ldr	r3, [pc, #156]	; (800c908 <SystemClock_Config+0xc8>)
 800c86a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c86c:	4a26      	ldr	r2, [pc, #152]	; (800c908 <SystemClock_Config+0xc8>)
 800c86e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c872:	6413      	str	r3, [r2, #64]	; 0x40
 800c874:	4b24      	ldr	r3, [pc, #144]	; (800c908 <SystemClock_Config+0xc8>)
 800c876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c87c:	60bb      	str	r3, [r7, #8]
 800c87e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c880:	2300      	movs	r3, #0
 800c882:	607b      	str	r3, [r7, #4]
 800c884:	4b21      	ldr	r3, [pc, #132]	; (800c90c <SystemClock_Config+0xcc>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	4a20      	ldr	r2, [pc, #128]	; (800c90c <SystemClock_Config+0xcc>)
 800c88a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c88e:	6013      	str	r3, [r2, #0]
 800c890:	4b1e      	ldr	r3, [pc, #120]	; (800c90c <SystemClock_Config+0xcc>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c898:	607b      	str	r3, [r7, #4]
 800c89a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800c89c:	2302      	movs	r3, #2
 800c89e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800c8a4:	2310      	movs	r3, #16
 800c8a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c8a8:	2302      	movs	r3, #2
 800c8aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800c8b0:	2308      	movs	r3, #8
 800c8b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800c8b4:	2332      	movs	r3, #50	; 0x32
 800c8b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800c8b8:	2302      	movs	r3, #2
 800c8ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800c8bc:	2304      	movs	r3, #4
 800c8be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c8c0:	f107 0320 	add.w	r3, r7, #32
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	f001 f8c7 	bl	800da58 <HAL_RCC_OscConfig>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d001      	beq.n	800c8d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800c8d0:	f000 f8ac 	bl	800ca2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c8d4:	230f      	movs	r3, #15
 800c8d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c8d8:	2302      	movs	r3, #2
 800c8da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c8dc:	2300      	movs	r3, #0
 800c8de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800c8e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c8e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800c8ea:	f107 030c 	add.w	r3, r7, #12
 800c8ee:	2101      	movs	r1, #1
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f001 fb21 	bl	800df38 <HAL_RCC_ClockConfig>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d001      	beq.n	800c900 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800c8fc:	f000 f896 	bl	800ca2c <Error_Handler>
  }
}
 800c900:	bf00      	nop
 800c902:	3750      	adds	r7, #80	; 0x50
 800c904:	46bd      	mov	sp, r7
 800c906:	bd80      	pop	{r7, pc}
 800c908:	40023800 	.word	0x40023800
 800c90c:	40007000 	.word	0x40007000

0800c910 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800c914:	4b11      	ldr	r3, [pc, #68]	; (800c95c <MX_UART4_Init+0x4c>)
 800c916:	4a12      	ldr	r2, [pc, #72]	; (800c960 <MX_UART4_Init+0x50>)
 800c918:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800c91a:	4b10      	ldr	r3, [pc, #64]	; (800c95c <MX_UART4_Init+0x4c>)
 800c91c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800c920:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800c922:	4b0e      	ldr	r3, [pc, #56]	; (800c95c <MX_UART4_Init+0x4c>)
 800c924:	2200      	movs	r2, #0
 800c926:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800c928:	4b0c      	ldr	r3, [pc, #48]	; (800c95c <MX_UART4_Init+0x4c>)
 800c92a:	2200      	movs	r2, #0
 800c92c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800c92e:	4b0b      	ldr	r3, [pc, #44]	; (800c95c <MX_UART4_Init+0x4c>)
 800c930:	2200      	movs	r2, #0
 800c932:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800c934:	4b09      	ldr	r3, [pc, #36]	; (800c95c <MX_UART4_Init+0x4c>)
 800c936:	220c      	movs	r2, #12
 800c938:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c93a:	4b08      	ldr	r3, [pc, #32]	; (800c95c <MX_UART4_Init+0x4c>)
 800c93c:	2200      	movs	r2, #0
 800c93e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800c940:	4b06      	ldr	r3, [pc, #24]	; (800c95c <MX_UART4_Init+0x4c>)
 800c942:	2200      	movs	r2, #0
 800c944:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800c946:	4805      	ldr	r0, [pc, #20]	; (800c95c <MX_UART4_Init+0x4c>)
 800c948:	f001 fcc2 	bl	800e2d0 <HAL_UART_Init>
 800c94c:	4603      	mov	r3, r0
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d001      	beq.n	800c956 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800c952:	f000 f86b 	bl	800ca2c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800c956:	bf00      	nop
 800c958:	bd80      	pop	{r7, pc}
 800c95a:	bf00      	nop
 800c95c:	200003b0 	.word	0x200003b0
 800c960:	40004c00 	.word	0x40004c00

0800c964 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b082      	sub	sp, #8
 800c968:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800c96a:	2300      	movs	r3, #0
 800c96c:	607b      	str	r3, [r7, #4]
 800c96e:	4b0c      	ldr	r3, [pc, #48]	; (800c9a0 <MX_DMA_Init+0x3c>)
 800c970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c972:	4a0b      	ldr	r2, [pc, #44]	; (800c9a0 <MX_DMA_Init+0x3c>)
 800c974:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c978:	6313      	str	r3, [r2, #48]	; 0x30
 800c97a:	4b09      	ldr	r3, [pc, #36]	; (800c9a0 <MX_DMA_Init+0x3c>)
 800c97c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c97e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c982:	607b      	str	r3, [r7, #4]
 800c984:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800c986:	2200      	movs	r2, #0
 800c988:	2100      	movs	r1, #0
 800c98a:	200d      	movs	r0, #13
 800c98c:	f000 faf1 	bl	800cf72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800c990:	200d      	movs	r0, #13
 800c992:	f000 fb0a 	bl	800cfaa <HAL_NVIC_EnableIRQ>

}
 800c996:	bf00      	nop
 800c998:	3708      	adds	r7, #8
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}
 800c99e:	bf00      	nop
 800c9a0:	40023800 	.word	0x40023800

0800c9a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b088      	sub	sp, #32
 800c9a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c9aa:	f107 030c 	add.w	r3, r7, #12
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	601a      	str	r2, [r3, #0]
 800c9b2:	605a      	str	r2, [r3, #4]
 800c9b4:	609a      	str	r2, [r3, #8]
 800c9b6:	60da      	str	r2, [r3, #12]
 800c9b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	60bb      	str	r3, [r7, #8]
 800c9be:	4b19      	ldr	r3, [pc, #100]	; (800ca24 <MX_GPIO_Init+0x80>)
 800c9c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9c2:	4a18      	ldr	r2, [pc, #96]	; (800ca24 <MX_GPIO_Init+0x80>)
 800c9c4:	f043 0301 	orr.w	r3, r3, #1
 800c9c8:	6313      	str	r3, [r2, #48]	; 0x30
 800c9ca:	4b16      	ldr	r3, [pc, #88]	; (800ca24 <MX_GPIO_Init+0x80>)
 800c9cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9ce:	f003 0301 	and.w	r3, r3, #1
 800c9d2:	60bb      	str	r3, [r7, #8]
 800c9d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	607b      	str	r3, [r7, #4]
 800c9da:	4b12      	ldr	r3, [pc, #72]	; (800ca24 <MX_GPIO_Init+0x80>)
 800c9dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9de:	4a11      	ldr	r2, [pc, #68]	; (800ca24 <MX_GPIO_Init+0x80>)
 800c9e0:	f043 0308 	orr.w	r3, r3, #8
 800c9e4:	6313      	str	r3, [r2, #48]	; 0x30
 800c9e6:	4b0f      	ldr	r3, [pc, #60]	; (800ca24 <MX_GPIO_Init+0x80>)
 800c9e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9ea:	f003 0308 	and.w	r3, r3, #8
 800c9ee:	607b      	str	r3, [r7, #4]
 800c9f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c9f8:	480b      	ldr	r0, [pc, #44]	; (800ca28 <MX_GPIO_Init+0x84>)
 800c9fa:	f000 fff9 	bl	800d9f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800c9fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ca02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ca04:	2301      	movs	r3, #1
 800ca06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca08:	2300      	movs	r3, #0
 800ca0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ca10:	f107 030c 	add.w	r3, r7, #12
 800ca14:	4619      	mov	r1, r3
 800ca16:	4804      	ldr	r0, [pc, #16]	; (800ca28 <MX_GPIO_Init+0x84>)
 800ca18:	f000 fe50 	bl	800d6bc <HAL_GPIO_Init>

}
 800ca1c:	bf00      	nop
 800ca1e:	3720      	adds	r7, #32
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bd80      	pop	{r7, pc}
 800ca24:	40023800 	.word	0x40023800
 800ca28:	40020c00 	.word	0x40020c00

0800ca2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800ca2c:	b480      	push	{r7}
 800ca2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800ca30:	bf00      	nop
 800ca32:	46bd      	mov	sp, r7
 800ca34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca38:	4770      	bx	lr
	...

0800ca3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ca3c:	b480      	push	{r7}
 800ca3e:	b083      	sub	sp, #12
 800ca40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ca42:	2300      	movs	r3, #0
 800ca44:	607b      	str	r3, [r7, #4]
 800ca46:	4b10      	ldr	r3, [pc, #64]	; (800ca88 <HAL_MspInit+0x4c>)
 800ca48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca4a:	4a0f      	ldr	r2, [pc, #60]	; (800ca88 <HAL_MspInit+0x4c>)
 800ca4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ca50:	6453      	str	r3, [r2, #68]	; 0x44
 800ca52:	4b0d      	ldr	r3, [pc, #52]	; (800ca88 <HAL_MspInit+0x4c>)
 800ca54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ca5a:	607b      	str	r3, [r7, #4]
 800ca5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800ca5e:	2300      	movs	r3, #0
 800ca60:	603b      	str	r3, [r7, #0]
 800ca62:	4b09      	ldr	r3, [pc, #36]	; (800ca88 <HAL_MspInit+0x4c>)
 800ca64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca66:	4a08      	ldr	r2, [pc, #32]	; (800ca88 <HAL_MspInit+0x4c>)
 800ca68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ca6c:	6413      	str	r3, [r2, #64]	; 0x40
 800ca6e:	4b06      	ldr	r3, [pc, #24]	; (800ca88 <HAL_MspInit+0x4c>)
 800ca70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ca76:	603b      	str	r3, [r7, #0]
 800ca78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ca7a:	bf00      	nop
 800ca7c:	370c      	adds	r7, #12
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca84:	4770      	bx	lr
 800ca86:	bf00      	nop
 800ca88:	40023800 	.word	0x40023800

0800ca8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b08a      	sub	sp, #40	; 0x28
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ca94:	f107 0314 	add.w	r3, r7, #20
 800ca98:	2200      	movs	r2, #0
 800ca9a:	601a      	str	r2, [r3, #0]
 800ca9c:	605a      	str	r2, [r3, #4]
 800ca9e:	609a      	str	r2, [r3, #8]
 800caa0:	60da      	str	r2, [r3, #12]
 800caa2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	4a30      	ldr	r2, [pc, #192]	; (800cb6c <HAL_UART_MspInit+0xe0>)
 800caaa:	4293      	cmp	r3, r2
 800caac:	d159      	bne.n	800cb62 <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800caae:	2300      	movs	r3, #0
 800cab0:	613b      	str	r3, [r7, #16]
 800cab2:	4b2f      	ldr	r3, [pc, #188]	; (800cb70 <HAL_UART_MspInit+0xe4>)
 800cab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cab6:	4a2e      	ldr	r2, [pc, #184]	; (800cb70 <HAL_UART_MspInit+0xe4>)
 800cab8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cabc:	6413      	str	r3, [r2, #64]	; 0x40
 800cabe:	4b2c      	ldr	r3, [pc, #176]	; (800cb70 <HAL_UART_MspInit+0xe4>)
 800cac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cac2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cac6:	613b      	str	r3, [r7, #16]
 800cac8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800caca:	2300      	movs	r3, #0
 800cacc:	60fb      	str	r3, [r7, #12]
 800cace:	4b28      	ldr	r3, [pc, #160]	; (800cb70 <HAL_UART_MspInit+0xe4>)
 800cad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cad2:	4a27      	ldr	r2, [pc, #156]	; (800cb70 <HAL_UART_MspInit+0xe4>)
 800cad4:	f043 0301 	orr.w	r3, r3, #1
 800cad8:	6313      	str	r3, [r2, #48]	; 0x30
 800cada:	4b25      	ldr	r3, [pc, #148]	; (800cb70 <HAL_UART_MspInit+0xe4>)
 800cadc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cade:	f003 0301 	and.w	r3, r3, #1
 800cae2:	60fb      	str	r3, [r7, #12]
 800cae4:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800cae6:	2303      	movs	r3, #3
 800cae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800caea:	2302      	movs	r3, #2
 800caec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800caee:	2301      	movs	r3, #1
 800caf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800caf2:	2303      	movs	r3, #3
 800caf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800caf6:	2308      	movs	r3, #8
 800caf8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cafa:	f107 0314 	add.w	r3, r7, #20
 800cafe:	4619      	mov	r1, r3
 800cb00:	481c      	ldr	r0, [pc, #112]	; (800cb74 <HAL_UART_MspInit+0xe8>)
 800cb02:	f000 fddb 	bl	800d6bc <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800cb06:	4b1c      	ldr	r3, [pc, #112]	; (800cb78 <HAL_UART_MspInit+0xec>)
 800cb08:	4a1c      	ldr	r2, [pc, #112]	; (800cb7c <HAL_UART_MspInit+0xf0>)
 800cb0a:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800cb0c:	4b1a      	ldr	r3, [pc, #104]	; (800cb78 <HAL_UART_MspInit+0xec>)
 800cb0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800cb12:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800cb14:	4b18      	ldr	r3, [pc, #96]	; (800cb78 <HAL_UART_MspInit+0xec>)
 800cb16:	2200      	movs	r2, #0
 800cb18:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800cb1a:	4b17      	ldr	r3, [pc, #92]	; (800cb78 <HAL_UART_MspInit+0xec>)
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800cb20:	4b15      	ldr	r3, [pc, #84]	; (800cb78 <HAL_UART_MspInit+0xec>)
 800cb22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cb26:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800cb28:	4b13      	ldr	r3, [pc, #76]	; (800cb78 <HAL_UART_MspInit+0xec>)
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800cb2e:	4b12      	ldr	r3, [pc, #72]	; (800cb78 <HAL_UART_MspInit+0xec>)
 800cb30:	2200      	movs	r2, #0
 800cb32:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800cb34:	4b10      	ldr	r3, [pc, #64]	; (800cb78 <HAL_UART_MspInit+0xec>)
 800cb36:	2200      	movs	r2, #0
 800cb38:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800cb3a:	4b0f      	ldr	r3, [pc, #60]	; (800cb78 <HAL_UART_MspInit+0xec>)
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800cb40:	4b0d      	ldr	r3, [pc, #52]	; (800cb78 <HAL_UART_MspInit+0xec>)
 800cb42:	2200      	movs	r2, #0
 800cb44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800cb46:	480c      	ldr	r0, [pc, #48]	; (800cb78 <HAL_UART_MspInit+0xec>)
 800cb48:	f000 fa4a 	bl	800cfe0 <HAL_DMA_Init>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d001      	beq.n	800cb56 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800cb52:	f7ff ff6b 	bl	800ca2c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	4a07      	ldr	r2, [pc, #28]	; (800cb78 <HAL_UART_MspInit+0xec>)
 800cb5a:	635a      	str	r2, [r3, #52]	; 0x34
 800cb5c:	4a06      	ldr	r2, [pc, #24]	; (800cb78 <HAL_UART_MspInit+0xec>)
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800cb62:	bf00      	nop
 800cb64:	3728      	adds	r7, #40	; 0x28
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}
 800cb6a:	bf00      	nop
 800cb6c:	40004c00 	.word	0x40004c00
 800cb70:	40023800 	.word	0x40023800
 800cb74:	40020000 	.word	0x40020000
 800cb78:	20000028 	.word	0x20000028
 800cb7c:	40026040 	.word	0x40026040

0800cb80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800cb80:	b480      	push	{r7}
 800cb82:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800cb84:	bf00      	nop
 800cb86:	46bd      	mov	sp, r7
 800cb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8c:	4770      	bx	lr

0800cb8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800cb8e:	b480      	push	{r7}
 800cb90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800cb92:	e7fe      	b.n	800cb92 <HardFault_Handler+0x4>

0800cb94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800cb94:	b480      	push	{r7}
 800cb96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800cb98:	e7fe      	b.n	800cb98 <MemManage_Handler+0x4>

0800cb9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800cb9a:	b480      	push	{r7}
 800cb9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800cb9e:	e7fe      	b.n	800cb9e <BusFault_Handler+0x4>

0800cba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800cba0:	b480      	push	{r7}
 800cba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800cba4:	e7fe      	b.n	800cba4 <UsageFault_Handler+0x4>

0800cba6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800cba6:	b480      	push	{r7}
 800cba8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800cbaa:	bf00      	nop
 800cbac:	46bd      	mov	sp, r7
 800cbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb2:	4770      	bx	lr

0800cbb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800cbb4:	b480      	push	{r7}
 800cbb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800cbb8:	bf00      	nop
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc0:	4770      	bx	lr

0800cbc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800cbc2:	b480      	push	{r7}
 800cbc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800cbc6:	bf00      	nop
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbce:	4770      	bx	lr

0800cbd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800cbd4:	f000 f8d2 	bl	800cd7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800cbd8:	bf00      	nop
 800cbda:	bd80      	pop	{r7, pc}

0800cbdc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800cbe0:	4802      	ldr	r0, [pc, #8]	; (800cbec <DMA1_Stream2_IRQHandler+0x10>)
 800cbe2:	f000 fb03 	bl	800d1ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800cbe6:	bf00      	nop
 800cbe8:	bd80      	pop	{r7, pc}
 800cbea:	bf00      	nop
 800cbec:	20000028 	.word	0x20000028

0800cbf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800cbf4:	4b07      	ldr	r3, [pc, #28]	; (800cc14 <SystemInit+0x24>)
 800cbf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cbfa:	4a06      	ldr	r2, [pc, #24]	; (800cc14 <SystemInit+0x24>)
 800cbfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cc00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800cc04:	4b03      	ldr	r3, [pc, #12]	; (800cc14 <SystemInit+0x24>)
 800cc06:	4a04      	ldr	r2, [pc, #16]	; (800cc18 <SystemInit+0x28>)
 800cc08:	609a      	str	r2, [r3, #8]
#endif
}
 800cc0a:	bf00      	nop
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc12:	4770      	bx	lr
 800cc14:	e000ed00 	.word	0xe000ed00
 800cc18:	0800c000 	.word	0x0800c000

0800cc1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800cc1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800cc54 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800cc20:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800cc22:	e003      	b.n	800cc2c <LoopCopyDataInit>

0800cc24 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800cc24:	4b0c      	ldr	r3, [pc, #48]	; (800cc58 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800cc26:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800cc28:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800cc2a:	3104      	adds	r1, #4

0800cc2c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800cc2c:	480b      	ldr	r0, [pc, #44]	; (800cc5c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800cc2e:	4b0c      	ldr	r3, [pc, #48]	; (800cc60 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800cc30:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800cc32:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800cc34:	d3f6      	bcc.n	800cc24 <CopyDataInit>
  ldr  r2, =_sbss
 800cc36:	4a0b      	ldr	r2, [pc, #44]	; (800cc64 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800cc38:	e002      	b.n	800cc40 <LoopFillZerobss>

0800cc3a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800cc3a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800cc3c:	f842 3b04 	str.w	r3, [r2], #4

0800cc40 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800cc40:	4b09      	ldr	r3, [pc, #36]	; (800cc68 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800cc42:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800cc44:	d3f9      	bcc.n	800cc3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800cc46:	f7ff ffd3 	bl	800cbf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800cc4a:	f002 f85f 	bl	800ed0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800cc4e:	f7ff fdd1 	bl	800c7f4 <main>
  bx  lr    
 800cc52:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800cc54:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800cc58:	0800edc4 	.word	0x0800edc4
  ldr  r0, =_sdata
 800cc5c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800cc60:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800cc64:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800cc68:	20000404 	.word	0x20000404

0800cc6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800cc6c:	e7fe      	b.n	800cc6c <ADC_IRQHandler>
	...

0800cc70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800cc74:	4b0e      	ldr	r3, [pc, #56]	; (800ccb0 <HAL_Init+0x40>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	4a0d      	ldr	r2, [pc, #52]	; (800ccb0 <HAL_Init+0x40>)
 800cc7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cc7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800cc80:	4b0b      	ldr	r3, [pc, #44]	; (800ccb0 <HAL_Init+0x40>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	4a0a      	ldr	r2, [pc, #40]	; (800ccb0 <HAL_Init+0x40>)
 800cc86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800cc8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800cc8c:	4b08      	ldr	r3, [pc, #32]	; (800ccb0 <HAL_Init+0x40>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	4a07      	ldr	r2, [pc, #28]	; (800ccb0 <HAL_Init+0x40>)
 800cc92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800cc98:	2003      	movs	r0, #3
 800cc9a:	f000 f95f 	bl	800cf5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800cc9e:	2000      	movs	r0, #0
 800cca0:	f000 f83c 	bl	800cd1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800cca4:	f7ff feca 	bl	800ca3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800cca8:	2300      	movs	r3, #0
}
 800ccaa:	4618      	mov	r0, r3
 800ccac:	bd80      	pop	{r7, pc}
 800ccae:	bf00      	nop
 800ccb0:	40023c00 	.word	0x40023c00

0800ccb4 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 800ccb8:	4b13      	ldr	r3, [pc, #76]	; (800cd08 <HAL_DeInit+0x54>)
 800ccba:	f04f 32ff 	mov.w	r2, #4294967295
 800ccbe:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 800ccc0:	4b11      	ldr	r3, [pc, #68]	; (800cd08 <HAL_DeInit+0x54>)
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 800ccc6:	4b10      	ldr	r3, [pc, #64]	; (800cd08 <HAL_DeInit+0x54>)
 800ccc8:	f04f 32ff 	mov.w	r2, #4294967295
 800cccc:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 800ccce:	4b0e      	ldr	r3, [pc, #56]	; (800cd08 <HAL_DeInit+0x54>)
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 800ccd4:	4b0c      	ldr	r3, [pc, #48]	; (800cd08 <HAL_DeInit+0x54>)
 800ccd6:	f04f 32ff 	mov.w	r2, #4294967295
 800ccda:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 800ccdc:	4b0a      	ldr	r3, [pc, #40]	; (800cd08 <HAL_DeInit+0x54>)
 800ccde:	2200      	movs	r2, #0
 800cce0:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 800cce2:	4b09      	ldr	r3, [pc, #36]	; (800cd08 <HAL_DeInit+0x54>)
 800cce4:	f04f 32ff 	mov.w	r2, #4294967295
 800cce8:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 800ccea:	4b07      	ldr	r3, [pc, #28]	; (800cd08 <HAL_DeInit+0x54>)
 800ccec:	2200      	movs	r2, #0
 800ccee:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 800ccf0:	4b05      	ldr	r3, [pc, #20]	; (800cd08 <HAL_DeInit+0x54>)
 800ccf2:	f04f 32ff 	mov.w	r2, #4294967295
 800ccf6:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 800ccf8:	4b03      	ldr	r3, [pc, #12]	; (800cd08 <HAL_DeInit+0x54>)
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800ccfe:	f000 f805 	bl	800cd0c <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 800cd02:	2300      	movs	r3, #0
}
 800cd04:	4618      	mov	r0, r3
 800cd06:	bd80      	pop	{r7, pc}
 800cd08:	40023800 	.word	0x40023800

0800cd0c <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 800cd0c:	b480      	push	{r7}
 800cd0e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 800cd10:	bf00      	nop
 800cd12:	46bd      	mov	sp, r7
 800cd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd18:	4770      	bx	lr
	...

0800cd1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b082      	sub	sp, #8
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800cd24:	4b12      	ldr	r3, [pc, #72]	; (800cd70 <HAL_InitTick+0x54>)
 800cd26:	681a      	ldr	r2, [r3, #0]
 800cd28:	4b12      	ldr	r3, [pc, #72]	; (800cd74 <HAL_InitTick+0x58>)
 800cd2a:	781b      	ldrb	r3, [r3, #0]
 800cd2c:	4619      	mov	r1, r3
 800cd2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cd32:	fbb3 f3f1 	udiv	r3, r3, r1
 800cd36:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	f000 f943 	bl	800cfc6 <HAL_SYSTICK_Config>
 800cd40:	4603      	mov	r3, r0
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d001      	beq.n	800cd4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800cd46:	2301      	movs	r3, #1
 800cd48:	e00e      	b.n	800cd68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	2b0f      	cmp	r3, #15
 800cd4e:	d80a      	bhi.n	800cd66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800cd50:	2200      	movs	r2, #0
 800cd52:	6879      	ldr	r1, [r7, #4]
 800cd54:	f04f 30ff 	mov.w	r0, #4294967295
 800cd58:	f000 f90b 	bl	800cf72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800cd5c:	4a06      	ldr	r2, [pc, #24]	; (800cd78 <HAL_InitTick+0x5c>)
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800cd62:	2300      	movs	r3, #0
 800cd64:	e000      	b.n	800cd68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800cd66:	2301      	movs	r3, #1
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3708      	adds	r7, #8
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}
 800cd70:	20000000 	.word	0x20000000
 800cd74:	20000008 	.word	0x20000008
 800cd78:	20000004 	.word	0x20000004

0800cd7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800cd7c:	b480      	push	{r7}
 800cd7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800cd80:	4b06      	ldr	r3, [pc, #24]	; (800cd9c <HAL_IncTick+0x20>)
 800cd82:	781b      	ldrb	r3, [r3, #0]
 800cd84:	461a      	mov	r2, r3
 800cd86:	4b06      	ldr	r3, [pc, #24]	; (800cda0 <HAL_IncTick+0x24>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	4413      	add	r3, r2
 800cd8c:	4a04      	ldr	r2, [pc, #16]	; (800cda0 <HAL_IncTick+0x24>)
 800cd8e:	6013      	str	r3, [r2, #0]
}
 800cd90:	bf00      	nop
 800cd92:	46bd      	mov	sp, r7
 800cd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd98:	4770      	bx	lr
 800cd9a:	bf00      	nop
 800cd9c:	20000008 	.word	0x20000008
 800cda0:	20000400 	.word	0x20000400

0800cda4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800cda4:	b480      	push	{r7}
 800cda6:	af00      	add	r7, sp, #0
  return uwTick;
 800cda8:	4b03      	ldr	r3, [pc, #12]	; (800cdb8 <HAL_GetTick+0x14>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
}
 800cdac:	4618      	mov	r0, r3
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb4:	4770      	bx	lr
 800cdb6:	bf00      	nop
 800cdb8:	20000400 	.word	0x20000400

0800cdbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800cdbc:	b480      	push	{r7}
 800cdbe:	b085      	sub	sp, #20
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f003 0307 	and.w	r3, r3, #7
 800cdca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800cdcc:	4b0c      	ldr	r3, [pc, #48]	; (800ce00 <__NVIC_SetPriorityGrouping+0x44>)
 800cdce:	68db      	ldr	r3, [r3, #12]
 800cdd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800cdd2:	68ba      	ldr	r2, [r7, #8]
 800cdd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800cdd8:	4013      	ands	r3, r2
 800cdda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800cde4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800cde8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cdec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800cdee:	4a04      	ldr	r2, [pc, #16]	; (800ce00 <__NVIC_SetPriorityGrouping+0x44>)
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	60d3      	str	r3, [r2, #12]
}
 800cdf4:	bf00      	nop
 800cdf6:	3714      	adds	r7, #20
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfe:	4770      	bx	lr
 800ce00:	e000ed00 	.word	0xe000ed00

0800ce04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800ce04:	b480      	push	{r7}
 800ce06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ce08:	4b04      	ldr	r3, [pc, #16]	; (800ce1c <__NVIC_GetPriorityGrouping+0x18>)
 800ce0a:	68db      	ldr	r3, [r3, #12]
 800ce0c:	0a1b      	lsrs	r3, r3, #8
 800ce0e:	f003 0307 	and.w	r3, r3, #7
}
 800ce12:	4618      	mov	r0, r3
 800ce14:	46bd      	mov	sp, r7
 800ce16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1a:	4770      	bx	lr
 800ce1c:	e000ed00 	.word	0xe000ed00

0800ce20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ce20:	b480      	push	{r7}
 800ce22:	b083      	sub	sp, #12
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	4603      	mov	r3, r0
 800ce28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ce2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	db0b      	blt.n	800ce4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ce32:	79fb      	ldrb	r3, [r7, #7]
 800ce34:	f003 021f 	and.w	r2, r3, #31
 800ce38:	4907      	ldr	r1, [pc, #28]	; (800ce58 <__NVIC_EnableIRQ+0x38>)
 800ce3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce3e:	095b      	lsrs	r3, r3, #5
 800ce40:	2001      	movs	r0, #1
 800ce42:	fa00 f202 	lsl.w	r2, r0, r2
 800ce46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800ce4a:	bf00      	nop
 800ce4c:	370c      	adds	r7, #12
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce54:	4770      	bx	lr
 800ce56:	bf00      	nop
 800ce58:	e000e100 	.word	0xe000e100

0800ce5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800ce5c:	b480      	push	{r7}
 800ce5e:	b083      	sub	sp, #12
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	4603      	mov	r3, r0
 800ce64:	6039      	str	r1, [r7, #0]
 800ce66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ce68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	db0a      	blt.n	800ce86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	b2da      	uxtb	r2, r3
 800ce74:	490c      	ldr	r1, [pc, #48]	; (800cea8 <__NVIC_SetPriority+0x4c>)
 800ce76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce7a:	0112      	lsls	r2, r2, #4
 800ce7c:	b2d2      	uxtb	r2, r2
 800ce7e:	440b      	add	r3, r1
 800ce80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800ce84:	e00a      	b.n	800ce9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	b2da      	uxtb	r2, r3
 800ce8a:	4908      	ldr	r1, [pc, #32]	; (800ceac <__NVIC_SetPriority+0x50>)
 800ce8c:	79fb      	ldrb	r3, [r7, #7]
 800ce8e:	f003 030f 	and.w	r3, r3, #15
 800ce92:	3b04      	subs	r3, #4
 800ce94:	0112      	lsls	r2, r2, #4
 800ce96:	b2d2      	uxtb	r2, r2
 800ce98:	440b      	add	r3, r1
 800ce9a:	761a      	strb	r2, [r3, #24]
}
 800ce9c:	bf00      	nop
 800ce9e:	370c      	adds	r7, #12
 800cea0:	46bd      	mov	sp, r7
 800cea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea6:	4770      	bx	lr
 800cea8:	e000e100 	.word	0xe000e100
 800ceac:	e000ed00 	.word	0xe000ed00

0800ceb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ceb0:	b480      	push	{r7}
 800ceb2:	b089      	sub	sp, #36	; 0x24
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	60f8      	str	r0, [r7, #12]
 800ceb8:	60b9      	str	r1, [r7, #8]
 800ceba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	f003 0307 	and.w	r3, r3, #7
 800cec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800cec4:	69fb      	ldr	r3, [r7, #28]
 800cec6:	f1c3 0307 	rsb	r3, r3, #7
 800ceca:	2b04      	cmp	r3, #4
 800cecc:	bf28      	it	cs
 800cece:	2304      	movcs	r3, #4
 800ced0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ced2:	69fb      	ldr	r3, [r7, #28]
 800ced4:	3304      	adds	r3, #4
 800ced6:	2b06      	cmp	r3, #6
 800ced8:	d902      	bls.n	800cee0 <NVIC_EncodePriority+0x30>
 800ceda:	69fb      	ldr	r3, [r7, #28]
 800cedc:	3b03      	subs	r3, #3
 800cede:	e000      	b.n	800cee2 <NVIC_EncodePriority+0x32>
 800cee0:	2300      	movs	r3, #0
 800cee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800cee4:	f04f 32ff 	mov.w	r2, #4294967295
 800cee8:	69bb      	ldr	r3, [r7, #24]
 800ceea:	fa02 f303 	lsl.w	r3, r2, r3
 800ceee:	43da      	mvns	r2, r3
 800cef0:	68bb      	ldr	r3, [r7, #8]
 800cef2:	401a      	ands	r2, r3
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800cef8:	f04f 31ff 	mov.w	r1, #4294967295
 800cefc:	697b      	ldr	r3, [r7, #20]
 800cefe:	fa01 f303 	lsl.w	r3, r1, r3
 800cf02:	43d9      	mvns	r1, r3
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800cf08:	4313      	orrs	r3, r2
         );
}
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	3724      	adds	r7, #36	; 0x24
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf14:	4770      	bx	lr
	...

0800cf18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b082      	sub	sp, #8
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	3b01      	subs	r3, #1
 800cf24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cf28:	d301      	bcc.n	800cf2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800cf2a:	2301      	movs	r3, #1
 800cf2c:	e00f      	b.n	800cf4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800cf2e:	4a0a      	ldr	r2, [pc, #40]	; (800cf58 <SysTick_Config+0x40>)
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	3b01      	subs	r3, #1
 800cf34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800cf36:	210f      	movs	r1, #15
 800cf38:	f04f 30ff 	mov.w	r0, #4294967295
 800cf3c:	f7ff ff8e 	bl	800ce5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800cf40:	4b05      	ldr	r3, [pc, #20]	; (800cf58 <SysTick_Config+0x40>)
 800cf42:	2200      	movs	r2, #0
 800cf44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800cf46:	4b04      	ldr	r3, [pc, #16]	; (800cf58 <SysTick_Config+0x40>)
 800cf48:	2207      	movs	r2, #7
 800cf4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800cf4c:	2300      	movs	r3, #0
}
 800cf4e:	4618      	mov	r0, r3
 800cf50:	3708      	adds	r7, #8
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}
 800cf56:	bf00      	nop
 800cf58:	e000e010 	.word	0xe000e010

0800cf5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b082      	sub	sp, #8
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f7ff ff29 	bl	800cdbc <__NVIC_SetPriorityGrouping>
}
 800cf6a:	bf00      	nop
 800cf6c:	3708      	adds	r7, #8
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}

0800cf72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800cf72:	b580      	push	{r7, lr}
 800cf74:	b086      	sub	sp, #24
 800cf76:	af00      	add	r7, sp, #0
 800cf78:	4603      	mov	r3, r0
 800cf7a:	60b9      	str	r1, [r7, #8]
 800cf7c:	607a      	str	r2, [r7, #4]
 800cf7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800cf80:	2300      	movs	r3, #0
 800cf82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800cf84:	f7ff ff3e 	bl	800ce04 <__NVIC_GetPriorityGrouping>
 800cf88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800cf8a:	687a      	ldr	r2, [r7, #4]
 800cf8c:	68b9      	ldr	r1, [r7, #8]
 800cf8e:	6978      	ldr	r0, [r7, #20]
 800cf90:	f7ff ff8e 	bl	800ceb0 <NVIC_EncodePriority>
 800cf94:	4602      	mov	r2, r0
 800cf96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf9a:	4611      	mov	r1, r2
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	f7ff ff5d 	bl	800ce5c <__NVIC_SetPriority>
}
 800cfa2:	bf00      	nop
 800cfa4:	3718      	adds	r7, #24
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}

0800cfaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800cfaa:	b580      	push	{r7, lr}
 800cfac:	b082      	sub	sp, #8
 800cfae:	af00      	add	r7, sp, #0
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800cfb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f7ff ff31 	bl	800ce20 <__NVIC_EnableIRQ>
}
 800cfbe:	bf00      	nop
 800cfc0:	3708      	adds	r7, #8
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}

0800cfc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800cfc6:	b580      	push	{r7, lr}
 800cfc8:	b082      	sub	sp, #8
 800cfca:	af00      	add	r7, sp, #0
 800cfcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	f7ff ffa2 	bl	800cf18 <SysTick_Config>
 800cfd4:	4603      	mov	r3, r0
}
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	3708      	adds	r7, #8
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}
	...

0800cfe0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b086      	sub	sp, #24
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800cfe8:	2300      	movs	r3, #0
 800cfea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800cfec:	f7ff feda 	bl	800cda4 <HAL_GetTick>
 800cff0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d101      	bne.n	800cffc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800cff8:	2301      	movs	r3, #1
 800cffa:	e099      	b.n	800d130 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	2200      	movs	r2, #0
 800d000:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2202      	movs	r2, #2
 800d008:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	681a      	ldr	r2, [r3, #0]
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f022 0201 	bic.w	r2, r2, #1
 800d01a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800d01c:	e00f      	b.n	800d03e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800d01e:	f7ff fec1 	bl	800cda4 <HAL_GetTick>
 800d022:	4602      	mov	r2, r0
 800d024:	693b      	ldr	r3, [r7, #16]
 800d026:	1ad3      	subs	r3, r2, r3
 800d028:	2b05      	cmp	r3, #5
 800d02a:	d908      	bls.n	800d03e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2220      	movs	r2, #32
 800d030:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	2203      	movs	r2, #3
 800d036:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800d03a:	2303      	movs	r3, #3
 800d03c:	e078      	b.n	800d130 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	f003 0301 	and.w	r3, r3, #1
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d1e8      	bne.n	800d01e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800d054:	697a      	ldr	r2, [r7, #20]
 800d056:	4b38      	ldr	r3, [pc, #224]	; (800d138 <HAL_DMA_Init+0x158>)
 800d058:	4013      	ands	r3, r2
 800d05a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	685a      	ldr	r2, [r3, #4]
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	689b      	ldr	r3, [r3, #8]
 800d064:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800d06a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	691b      	ldr	r3, [r3, #16]
 800d070:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d076:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	699b      	ldr	r3, [r3, #24]
 800d07c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d082:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	6a1b      	ldr	r3, [r3, #32]
 800d088:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800d08a:	697a      	ldr	r2, [r7, #20]
 800d08c:	4313      	orrs	r3, r2
 800d08e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d094:	2b04      	cmp	r3, #4
 800d096:	d107      	bne.n	800d0a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0a0:	4313      	orrs	r3, r2
 800d0a2:	697a      	ldr	r2, [r7, #20]
 800d0a4:	4313      	orrs	r3, r2
 800d0a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	697a      	ldr	r2, [r7, #20]
 800d0ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	695b      	ldr	r3, [r3, #20]
 800d0b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800d0b8:	697b      	ldr	r3, [r7, #20]
 800d0ba:	f023 0307 	bic.w	r3, r3, #7
 800d0be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0c4:	697a      	ldr	r2, [r7, #20]
 800d0c6:	4313      	orrs	r3, r2
 800d0c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0ce:	2b04      	cmp	r3, #4
 800d0d0:	d117      	bne.n	800d102 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0d6:	697a      	ldr	r2, [r7, #20]
 800d0d8:	4313      	orrs	r3, r2
 800d0da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d00e      	beq.n	800d102 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	f000 fa6f 	bl	800d5c8 <DMA_CheckFifoParam>
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d008      	beq.n	800d102 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2240      	movs	r2, #64	; 0x40
 800d0f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2201      	movs	r2, #1
 800d0fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800d0fe:	2301      	movs	r3, #1
 800d100:	e016      	b.n	800d130 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	697a      	ldr	r2, [r7, #20]
 800d108:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800d10a:	6878      	ldr	r0, [r7, #4]
 800d10c:	f000 fa26 	bl	800d55c <DMA_CalcBaseAndBitshift>
 800d110:	4603      	mov	r3, r0
 800d112:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d118:	223f      	movs	r2, #63	; 0x3f
 800d11a:	409a      	lsls	r2, r3
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2200      	movs	r2, #0
 800d124:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2201      	movs	r2, #1
 800d12a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800d12e:	2300      	movs	r3, #0
}
 800d130:	4618      	mov	r0, r3
 800d132:	3718      	adds	r7, #24
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}
 800d138:	f010803f 	.word	0xf010803f

0800d13c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b086      	sub	sp, #24
 800d140:	af00      	add	r7, sp, #0
 800d142:	60f8      	str	r0, [r7, #12]
 800d144:	60b9      	str	r1, [r7, #8]
 800d146:	607a      	str	r2, [r7, #4]
 800d148:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d14a:	2300      	movs	r3, #0
 800d14c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d152:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d15a:	2b01      	cmp	r3, #1
 800d15c:	d101      	bne.n	800d162 <HAL_DMA_Start_IT+0x26>
 800d15e:	2302      	movs	r3, #2
 800d160:	e040      	b.n	800d1e4 <HAL_DMA_Start_IT+0xa8>
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	2201      	movs	r2, #1
 800d166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d170:	b2db      	uxtb	r3, r3
 800d172:	2b01      	cmp	r3, #1
 800d174:	d12f      	bne.n	800d1d6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	2202      	movs	r2, #2
 800d17a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	2200      	movs	r2, #0
 800d182:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	687a      	ldr	r2, [r7, #4]
 800d188:	68b9      	ldr	r1, [r7, #8]
 800d18a:	68f8      	ldr	r0, [r7, #12]
 800d18c:	f000 f9b8 	bl	800d500 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d194:	223f      	movs	r2, #63	; 0x3f
 800d196:	409a      	lsls	r2, r3
 800d198:	693b      	ldr	r3, [r7, #16]
 800d19a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	681a      	ldr	r2, [r3, #0]
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	f042 0216 	orr.w	r2, r2, #22
 800d1aa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d007      	beq.n	800d1c4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	681a      	ldr	r2, [r3, #0]
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	f042 0208 	orr.w	r2, r2, #8
 800d1c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	681a      	ldr	r2, [r3, #0]
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	f042 0201 	orr.w	r2, r2, #1
 800d1d2:	601a      	str	r2, [r3, #0]
 800d1d4:	e005      	b.n	800d1e2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	2200      	movs	r2, #0
 800d1da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800d1de:	2302      	movs	r3, #2
 800d1e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800d1e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	3718      	adds	r7, #24
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bd80      	pop	{r7, pc}

0800d1ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b086      	sub	sp, #24
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800d1f8:	4b92      	ldr	r3, [pc, #584]	; (800d444 <HAL_DMA_IRQHandler+0x258>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	4a92      	ldr	r2, [pc, #584]	; (800d448 <HAL_DMA_IRQHandler+0x25c>)
 800d1fe:	fba2 2303 	umull	r2, r3, r2, r3
 800d202:	0a9b      	lsrs	r3, r3, #10
 800d204:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d20a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800d20c:	693b      	ldr	r3, [r7, #16]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d216:	2208      	movs	r2, #8
 800d218:	409a      	lsls	r2, r3
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	4013      	ands	r3, r2
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d01a      	beq.n	800d258 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	f003 0304 	and.w	r3, r3, #4
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d013      	beq.n	800d258 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	681a      	ldr	r2, [r3, #0]
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	f022 0204 	bic.w	r2, r2, #4
 800d23e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d244:	2208      	movs	r2, #8
 800d246:	409a      	lsls	r2, r3
 800d248:	693b      	ldr	r3, [r7, #16]
 800d24a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d250:	f043 0201 	orr.w	r2, r3, #1
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d25c:	2201      	movs	r2, #1
 800d25e:	409a      	lsls	r2, r3
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	4013      	ands	r3, r2
 800d264:	2b00      	cmp	r3, #0
 800d266:	d012      	beq.n	800d28e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	695b      	ldr	r3, [r3, #20]
 800d26e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d272:	2b00      	cmp	r3, #0
 800d274:	d00b      	beq.n	800d28e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d27a:	2201      	movs	r2, #1
 800d27c:	409a      	lsls	r2, r3
 800d27e:	693b      	ldr	r3, [r7, #16]
 800d280:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d286:	f043 0202 	orr.w	r2, r3, #2
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d292:	2204      	movs	r2, #4
 800d294:	409a      	lsls	r2, r3
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	4013      	ands	r3, r2
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d012      	beq.n	800d2c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	f003 0302 	and.w	r3, r3, #2
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d00b      	beq.n	800d2c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d2b0:	2204      	movs	r2, #4
 800d2b2:	409a      	lsls	r2, r3
 800d2b4:	693b      	ldr	r3, [r7, #16]
 800d2b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2bc:	f043 0204 	orr.w	r2, r3, #4
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d2c8:	2210      	movs	r2, #16
 800d2ca:	409a      	lsls	r2, r3
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	4013      	ands	r3, r2
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d043      	beq.n	800d35c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	f003 0308 	and.w	r3, r3, #8
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d03c      	beq.n	800d35c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d2e6:	2210      	movs	r2, #16
 800d2e8:	409a      	lsls	r2, r3
 800d2ea:	693b      	ldr	r3, [r7, #16]
 800d2ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d018      	beq.n	800d32e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d306:	2b00      	cmp	r3, #0
 800d308:	d108      	bne.n	800d31c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d024      	beq.n	800d35c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	4798      	blx	r3
 800d31a:	e01f      	b.n	800d35c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d320:	2b00      	cmp	r3, #0
 800d322:	d01b      	beq.n	800d35c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d328:	6878      	ldr	r0, [r7, #4]
 800d32a:	4798      	blx	r3
 800d32c:	e016      	b.n	800d35c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d107      	bne.n	800d34c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	681a      	ldr	r2, [r3, #0]
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	f022 0208 	bic.w	r2, r2, #8
 800d34a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d350:	2b00      	cmp	r3, #0
 800d352:	d003      	beq.n	800d35c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d358:	6878      	ldr	r0, [r7, #4]
 800d35a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d360:	2220      	movs	r2, #32
 800d362:	409a      	lsls	r2, r3
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	4013      	ands	r3, r2
 800d368:	2b00      	cmp	r3, #0
 800d36a:	f000 808e 	beq.w	800d48a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	f003 0310 	and.w	r3, r3, #16
 800d378:	2b00      	cmp	r3, #0
 800d37a:	f000 8086 	beq.w	800d48a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d382:	2220      	movs	r2, #32
 800d384:	409a      	lsls	r2, r3
 800d386:	693b      	ldr	r3, [r7, #16]
 800d388:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d390:	b2db      	uxtb	r3, r3
 800d392:	2b05      	cmp	r3, #5
 800d394:	d136      	bne.n	800d404 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	681a      	ldr	r2, [r3, #0]
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	f022 0216 	bic.w	r2, r2, #22
 800d3a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	695a      	ldr	r2, [r3, #20]
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d3b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d103      	bne.n	800d3c6 <HAL_DMA_IRQHandler+0x1da>
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d007      	beq.n	800d3d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	681a      	ldr	r2, [r3, #0]
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	f022 0208 	bic.w	r2, r2, #8
 800d3d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d3da:	223f      	movs	r2, #63	; 0x3f
 800d3dc:	409a      	lsls	r2, r3
 800d3de:	693b      	ldr	r3, [r7, #16]
 800d3e0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	2201      	movs	r2, #1
 800d3ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d07d      	beq.n	800d4f6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	4798      	blx	r3
        }
        return;
 800d402:	e078      	b.n	800d4f6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d01c      	beq.n	800d44c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d108      	bne.n	800d432 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d424:	2b00      	cmp	r3, #0
 800d426:	d030      	beq.n	800d48a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d42c:	6878      	ldr	r0, [r7, #4]
 800d42e:	4798      	blx	r3
 800d430:	e02b      	b.n	800d48a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d436:	2b00      	cmp	r3, #0
 800d438:	d027      	beq.n	800d48a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	4798      	blx	r3
 800d442:	e022      	b.n	800d48a <HAL_DMA_IRQHandler+0x29e>
 800d444:	20000000 	.word	0x20000000
 800d448:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d456:	2b00      	cmp	r3, #0
 800d458:	d10f      	bne.n	800d47a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	681a      	ldr	r2, [r3, #0]
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	f022 0210 	bic.w	r2, r2, #16
 800d468:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	2200      	movs	r2, #0
 800d46e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	2201      	movs	r2, #1
 800d476:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d003      	beq.n	800d48a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d032      	beq.n	800d4f8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d496:	f003 0301 	and.w	r3, r3, #1
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d022      	beq.n	800d4e4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	2205      	movs	r2, #5
 800d4a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	681a      	ldr	r2, [r3, #0]
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	f022 0201 	bic.w	r2, r2, #1
 800d4b4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800d4b6:	68bb      	ldr	r3, [r7, #8]
 800d4b8:	3301      	adds	r3, #1
 800d4ba:	60bb      	str	r3, [r7, #8]
 800d4bc:	697a      	ldr	r2, [r7, #20]
 800d4be:	429a      	cmp	r2, r3
 800d4c0:	d307      	bcc.n	800d4d2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	f003 0301 	and.w	r3, r3, #1
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d1f2      	bne.n	800d4b6 <HAL_DMA_IRQHandler+0x2ca>
 800d4d0:	e000      	b.n	800d4d4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800d4d2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2201      	movs	r2, #1
 800d4e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d005      	beq.n	800d4f8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4f0:	6878      	ldr	r0, [r7, #4]
 800d4f2:	4798      	blx	r3
 800d4f4:	e000      	b.n	800d4f8 <HAL_DMA_IRQHandler+0x30c>
        return;
 800d4f6:	bf00      	nop
    }
  }
}
 800d4f8:	3718      	adds	r7, #24
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	bd80      	pop	{r7, pc}
 800d4fe:	bf00      	nop

0800d500 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800d500:	b480      	push	{r7}
 800d502:	b085      	sub	sp, #20
 800d504:	af00      	add	r7, sp, #0
 800d506:	60f8      	str	r0, [r7, #12]
 800d508:	60b9      	str	r1, [r7, #8]
 800d50a:	607a      	str	r2, [r7, #4]
 800d50c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	681a      	ldr	r2, [r3, #0]
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d51c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	683a      	ldr	r2, [r7, #0]
 800d524:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	689b      	ldr	r3, [r3, #8]
 800d52a:	2b40      	cmp	r3, #64	; 0x40
 800d52c:	d108      	bne.n	800d540 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	687a      	ldr	r2, [r7, #4]
 800d534:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	68ba      	ldr	r2, [r7, #8]
 800d53c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800d53e:	e007      	b.n	800d550 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	68ba      	ldr	r2, [r7, #8]
 800d546:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	687a      	ldr	r2, [r7, #4]
 800d54e:	60da      	str	r2, [r3, #12]
}
 800d550:	bf00      	nop
 800d552:	3714      	adds	r7, #20
 800d554:	46bd      	mov	sp, r7
 800d556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55a:	4770      	bx	lr

0800d55c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800d55c:	b480      	push	{r7}
 800d55e:	b085      	sub	sp, #20
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	b2db      	uxtb	r3, r3
 800d56a:	3b10      	subs	r3, #16
 800d56c:	4a14      	ldr	r2, [pc, #80]	; (800d5c0 <DMA_CalcBaseAndBitshift+0x64>)
 800d56e:	fba2 2303 	umull	r2, r3, r2, r3
 800d572:	091b      	lsrs	r3, r3, #4
 800d574:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800d576:	4a13      	ldr	r2, [pc, #76]	; (800d5c4 <DMA_CalcBaseAndBitshift+0x68>)
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	4413      	add	r3, r2
 800d57c:	781b      	ldrb	r3, [r3, #0]
 800d57e:	461a      	mov	r2, r3
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	2b03      	cmp	r3, #3
 800d588:	d909      	bls.n	800d59e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800d592:	f023 0303 	bic.w	r3, r3, #3
 800d596:	1d1a      	adds	r2, r3, #4
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	659a      	str	r2, [r3, #88]	; 0x58
 800d59c:	e007      	b.n	800d5ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800d5a6:	f023 0303 	bic.w	r3, r3, #3
 800d5aa:	687a      	ldr	r2, [r7, #4]
 800d5ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	3714      	adds	r7, #20
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5bc:	4770      	bx	lr
 800d5be:	bf00      	nop
 800d5c0:	aaaaaaab 	.word	0xaaaaaaab
 800d5c4:	0800edac 	.word	0x0800edac

0800d5c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800d5c8:	b480      	push	{r7}
 800d5ca:	b085      	sub	sp, #20
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	699b      	ldr	r3, [r3, #24]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d11f      	bne.n	800d622 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800d5e2:	68bb      	ldr	r3, [r7, #8]
 800d5e4:	2b03      	cmp	r3, #3
 800d5e6:	d855      	bhi.n	800d694 <DMA_CheckFifoParam+0xcc>
 800d5e8:	a201      	add	r2, pc, #4	; (adr r2, 800d5f0 <DMA_CheckFifoParam+0x28>)
 800d5ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5ee:	bf00      	nop
 800d5f0:	0800d601 	.word	0x0800d601
 800d5f4:	0800d613 	.word	0x0800d613
 800d5f8:	0800d601 	.word	0x0800d601
 800d5fc:	0800d695 	.word	0x0800d695
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d604:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d045      	beq.n	800d698 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800d60c:	2301      	movs	r3, #1
 800d60e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d610:	e042      	b.n	800d698 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d616:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800d61a:	d13f      	bne.n	800d69c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800d61c:	2301      	movs	r3, #1
 800d61e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d620:	e03c      	b.n	800d69c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	699b      	ldr	r3, [r3, #24]
 800d626:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d62a:	d121      	bne.n	800d670 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	2b03      	cmp	r3, #3
 800d630:	d836      	bhi.n	800d6a0 <DMA_CheckFifoParam+0xd8>
 800d632:	a201      	add	r2, pc, #4	; (adr r2, 800d638 <DMA_CheckFifoParam+0x70>)
 800d634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d638:	0800d649 	.word	0x0800d649
 800d63c:	0800d64f 	.word	0x0800d64f
 800d640:	0800d649 	.word	0x0800d649
 800d644:	0800d661 	.word	0x0800d661
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800d648:	2301      	movs	r3, #1
 800d64a:	73fb      	strb	r3, [r7, #15]
      break;
 800d64c:	e02f      	b.n	800d6ae <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d652:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d656:	2b00      	cmp	r3, #0
 800d658:	d024      	beq.n	800d6a4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800d65a:	2301      	movs	r3, #1
 800d65c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d65e:	e021      	b.n	800d6a4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d664:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800d668:	d11e      	bne.n	800d6a8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800d66a:	2301      	movs	r3, #1
 800d66c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800d66e:	e01b      	b.n	800d6a8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800d670:	68bb      	ldr	r3, [r7, #8]
 800d672:	2b02      	cmp	r3, #2
 800d674:	d902      	bls.n	800d67c <DMA_CheckFifoParam+0xb4>
 800d676:	2b03      	cmp	r3, #3
 800d678:	d003      	beq.n	800d682 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800d67a:	e018      	b.n	800d6ae <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800d67c:	2301      	movs	r3, #1
 800d67e:	73fb      	strb	r3, [r7, #15]
      break;
 800d680:	e015      	b.n	800d6ae <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d686:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d00e      	beq.n	800d6ac <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800d68e:	2301      	movs	r3, #1
 800d690:	73fb      	strb	r3, [r7, #15]
      break;
 800d692:	e00b      	b.n	800d6ac <DMA_CheckFifoParam+0xe4>
      break;
 800d694:	bf00      	nop
 800d696:	e00a      	b.n	800d6ae <DMA_CheckFifoParam+0xe6>
      break;
 800d698:	bf00      	nop
 800d69a:	e008      	b.n	800d6ae <DMA_CheckFifoParam+0xe6>
      break;
 800d69c:	bf00      	nop
 800d69e:	e006      	b.n	800d6ae <DMA_CheckFifoParam+0xe6>
      break;
 800d6a0:	bf00      	nop
 800d6a2:	e004      	b.n	800d6ae <DMA_CheckFifoParam+0xe6>
      break;
 800d6a4:	bf00      	nop
 800d6a6:	e002      	b.n	800d6ae <DMA_CheckFifoParam+0xe6>
      break;   
 800d6a8:	bf00      	nop
 800d6aa:	e000      	b.n	800d6ae <DMA_CheckFifoParam+0xe6>
      break;
 800d6ac:	bf00      	nop
    }
  } 
  
  return status; 
 800d6ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	3714      	adds	r7, #20
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ba:	4770      	bx	lr

0800d6bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d6bc:	b480      	push	{r7}
 800d6be:	b089      	sub	sp, #36	; 0x24
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
 800d6c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	61fb      	str	r3, [r7, #28]
 800d6d6:	e16b      	b.n	800d9b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800d6d8:	2201      	movs	r2, #1
 800d6da:	69fb      	ldr	r3, [r7, #28]
 800d6dc:	fa02 f303 	lsl.w	r3, r2, r3
 800d6e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800d6e2:	683b      	ldr	r3, [r7, #0]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	697a      	ldr	r2, [r7, #20]
 800d6e8:	4013      	ands	r3, r2
 800d6ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800d6ec:	693a      	ldr	r2, [r7, #16]
 800d6ee:	697b      	ldr	r3, [r7, #20]
 800d6f0:	429a      	cmp	r2, r3
 800d6f2:	f040 815a 	bne.w	800d9aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800d6f6:	683b      	ldr	r3, [r7, #0]
 800d6f8:	685b      	ldr	r3, [r3, #4]
 800d6fa:	2b01      	cmp	r3, #1
 800d6fc:	d00b      	beq.n	800d716 <HAL_GPIO_Init+0x5a>
 800d6fe:	683b      	ldr	r3, [r7, #0]
 800d700:	685b      	ldr	r3, [r3, #4]
 800d702:	2b02      	cmp	r3, #2
 800d704:	d007      	beq.n	800d716 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d706:	683b      	ldr	r3, [r7, #0]
 800d708:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800d70a:	2b11      	cmp	r3, #17
 800d70c:	d003      	beq.n	800d716 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d70e:	683b      	ldr	r3, [r7, #0]
 800d710:	685b      	ldr	r3, [r3, #4]
 800d712:	2b12      	cmp	r3, #18
 800d714:	d130      	bne.n	800d778 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	689b      	ldr	r3, [r3, #8]
 800d71a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800d71c:	69fb      	ldr	r3, [r7, #28]
 800d71e:	005b      	lsls	r3, r3, #1
 800d720:	2203      	movs	r2, #3
 800d722:	fa02 f303 	lsl.w	r3, r2, r3
 800d726:	43db      	mvns	r3, r3
 800d728:	69ba      	ldr	r2, [r7, #24]
 800d72a:	4013      	ands	r3, r2
 800d72c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	68da      	ldr	r2, [r3, #12]
 800d732:	69fb      	ldr	r3, [r7, #28]
 800d734:	005b      	lsls	r3, r3, #1
 800d736:	fa02 f303 	lsl.w	r3, r2, r3
 800d73a:	69ba      	ldr	r2, [r7, #24]
 800d73c:	4313      	orrs	r3, r2
 800d73e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	69ba      	ldr	r2, [r7, #24]
 800d744:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	685b      	ldr	r3, [r3, #4]
 800d74a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800d74c:	2201      	movs	r2, #1
 800d74e:	69fb      	ldr	r3, [r7, #28]
 800d750:	fa02 f303 	lsl.w	r3, r2, r3
 800d754:	43db      	mvns	r3, r3
 800d756:	69ba      	ldr	r2, [r7, #24]
 800d758:	4013      	ands	r3, r2
 800d75a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800d75c:	683b      	ldr	r3, [r7, #0]
 800d75e:	685b      	ldr	r3, [r3, #4]
 800d760:	091b      	lsrs	r3, r3, #4
 800d762:	f003 0201 	and.w	r2, r3, #1
 800d766:	69fb      	ldr	r3, [r7, #28]
 800d768:	fa02 f303 	lsl.w	r3, r2, r3
 800d76c:	69ba      	ldr	r2, [r7, #24]
 800d76e:	4313      	orrs	r3, r2
 800d770:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	69ba      	ldr	r2, [r7, #24]
 800d776:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	68db      	ldr	r3, [r3, #12]
 800d77c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800d77e:	69fb      	ldr	r3, [r7, #28]
 800d780:	005b      	lsls	r3, r3, #1
 800d782:	2203      	movs	r2, #3
 800d784:	fa02 f303 	lsl.w	r3, r2, r3
 800d788:	43db      	mvns	r3, r3
 800d78a:	69ba      	ldr	r2, [r7, #24]
 800d78c:	4013      	ands	r3, r2
 800d78e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	689a      	ldr	r2, [r3, #8]
 800d794:	69fb      	ldr	r3, [r7, #28]
 800d796:	005b      	lsls	r3, r3, #1
 800d798:	fa02 f303 	lsl.w	r3, r2, r3
 800d79c:	69ba      	ldr	r2, [r7, #24]
 800d79e:	4313      	orrs	r3, r2
 800d7a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	69ba      	ldr	r2, [r7, #24]
 800d7a6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	685b      	ldr	r3, [r3, #4]
 800d7ac:	2b02      	cmp	r3, #2
 800d7ae:	d003      	beq.n	800d7b8 <HAL_GPIO_Init+0xfc>
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	685b      	ldr	r3, [r3, #4]
 800d7b4:	2b12      	cmp	r3, #18
 800d7b6:	d123      	bne.n	800d800 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d7b8:	69fb      	ldr	r3, [r7, #28]
 800d7ba:	08da      	lsrs	r2, r3, #3
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	3208      	adds	r2, #8
 800d7c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800d7c6:	69fb      	ldr	r3, [r7, #28]
 800d7c8:	f003 0307 	and.w	r3, r3, #7
 800d7cc:	009b      	lsls	r3, r3, #2
 800d7ce:	220f      	movs	r2, #15
 800d7d0:	fa02 f303 	lsl.w	r3, r2, r3
 800d7d4:	43db      	mvns	r3, r3
 800d7d6:	69ba      	ldr	r2, [r7, #24]
 800d7d8:	4013      	ands	r3, r2
 800d7da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800d7dc:	683b      	ldr	r3, [r7, #0]
 800d7de:	691a      	ldr	r2, [r3, #16]
 800d7e0:	69fb      	ldr	r3, [r7, #28]
 800d7e2:	f003 0307 	and.w	r3, r3, #7
 800d7e6:	009b      	lsls	r3, r3, #2
 800d7e8:	fa02 f303 	lsl.w	r3, r2, r3
 800d7ec:	69ba      	ldr	r2, [r7, #24]
 800d7ee:	4313      	orrs	r3, r2
 800d7f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800d7f2:	69fb      	ldr	r3, [r7, #28]
 800d7f4:	08da      	lsrs	r2, r3, #3
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	3208      	adds	r2, #8
 800d7fa:	69b9      	ldr	r1, [r7, #24]
 800d7fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800d806:	69fb      	ldr	r3, [r7, #28]
 800d808:	005b      	lsls	r3, r3, #1
 800d80a:	2203      	movs	r2, #3
 800d80c:	fa02 f303 	lsl.w	r3, r2, r3
 800d810:	43db      	mvns	r3, r3
 800d812:	69ba      	ldr	r2, [r7, #24]
 800d814:	4013      	ands	r3, r2
 800d816:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d818:	683b      	ldr	r3, [r7, #0]
 800d81a:	685b      	ldr	r3, [r3, #4]
 800d81c:	f003 0203 	and.w	r2, r3, #3
 800d820:	69fb      	ldr	r3, [r7, #28]
 800d822:	005b      	lsls	r3, r3, #1
 800d824:	fa02 f303 	lsl.w	r3, r2, r3
 800d828:	69ba      	ldr	r2, [r7, #24]
 800d82a:	4313      	orrs	r3, r2
 800d82c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	69ba      	ldr	r2, [r7, #24]
 800d832:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800d834:	683b      	ldr	r3, [r7, #0]
 800d836:	685b      	ldr	r3, [r3, #4]
 800d838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	f000 80b4 	beq.w	800d9aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d842:	2300      	movs	r3, #0
 800d844:	60fb      	str	r3, [r7, #12]
 800d846:	4b5f      	ldr	r3, [pc, #380]	; (800d9c4 <HAL_GPIO_Init+0x308>)
 800d848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d84a:	4a5e      	ldr	r2, [pc, #376]	; (800d9c4 <HAL_GPIO_Init+0x308>)
 800d84c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d850:	6453      	str	r3, [r2, #68]	; 0x44
 800d852:	4b5c      	ldr	r3, [pc, #368]	; (800d9c4 <HAL_GPIO_Init+0x308>)
 800d854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d85a:	60fb      	str	r3, [r7, #12]
 800d85c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800d85e:	4a5a      	ldr	r2, [pc, #360]	; (800d9c8 <HAL_GPIO_Init+0x30c>)
 800d860:	69fb      	ldr	r3, [r7, #28]
 800d862:	089b      	lsrs	r3, r3, #2
 800d864:	3302      	adds	r3, #2
 800d866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d86a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800d86c:	69fb      	ldr	r3, [r7, #28]
 800d86e:	f003 0303 	and.w	r3, r3, #3
 800d872:	009b      	lsls	r3, r3, #2
 800d874:	220f      	movs	r2, #15
 800d876:	fa02 f303 	lsl.w	r3, r2, r3
 800d87a:	43db      	mvns	r3, r3
 800d87c:	69ba      	ldr	r2, [r7, #24]
 800d87e:	4013      	ands	r3, r2
 800d880:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	4a51      	ldr	r2, [pc, #324]	; (800d9cc <HAL_GPIO_Init+0x310>)
 800d886:	4293      	cmp	r3, r2
 800d888:	d02b      	beq.n	800d8e2 <HAL_GPIO_Init+0x226>
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	4a50      	ldr	r2, [pc, #320]	; (800d9d0 <HAL_GPIO_Init+0x314>)
 800d88e:	4293      	cmp	r3, r2
 800d890:	d025      	beq.n	800d8de <HAL_GPIO_Init+0x222>
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	4a4f      	ldr	r2, [pc, #316]	; (800d9d4 <HAL_GPIO_Init+0x318>)
 800d896:	4293      	cmp	r3, r2
 800d898:	d01f      	beq.n	800d8da <HAL_GPIO_Init+0x21e>
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	4a4e      	ldr	r2, [pc, #312]	; (800d9d8 <HAL_GPIO_Init+0x31c>)
 800d89e:	4293      	cmp	r3, r2
 800d8a0:	d019      	beq.n	800d8d6 <HAL_GPIO_Init+0x21a>
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	4a4d      	ldr	r2, [pc, #308]	; (800d9dc <HAL_GPIO_Init+0x320>)
 800d8a6:	4293      	cmp	r3, r2
 800d8a8:	d013      	beq.n	800d8d2 <HAL_GPIO_Init+0x216>
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	4a4c      	ldr	r2, [pc, #304]	; (800d9e0 <HAL_GPIO_Init+0x324>)
 800d8ae:	4293      	cmp	r3, r2
 800d8b0:	d00d      	beq.n	800d8ce <HAL_GPIO_Init+0x212>
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	4a4b      	ldr	r2, [pc, #300]	; (800d9e4 <HAL_GPIO_Init+0x328>)
 800d8b6:	4293      	cmp	r3, r2
 800d8b8:	d007      	beq.n	800d8ca <HAL_GPIO_Init+0x20e>
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	4a4a      	ldr	r2, [pc, #296]	; (800d9e8 <HAL_GPIO_Init+0x32c>)
 800d8be:	4293      	cmp	r3, r2
 800d8c0:	d101      	bne.n	800d8c6 <HAL_GPIO_Init+0x20a>
 800d8c2:	2307      	movs	r3, #7
 800d8c4:	e00e      	b.n	800d8e4 <HAL_GPIO_Init+0x228>
 800d8c6:	2308      	movs	r3, #8
 800d8c8:	e00c      	b.n	800d8e4 <HAL_GPIO_Init+0x228>
 800d8ca:	2306      	movs	r3, #6
 800d8cc:	e00a      	b.n	800d8e4 <HAL_GPIO_Init+0x228>
 800d8ce:	2305      	movs	r3, #5
 800d8d0:	e008      	b.n	800d8e4 <HAL_GPIO_Init+0x228>
 800d8d2:	2304      	movs	r3, #4
 800d8d4:	e006      	b.n	800d8e4 <HAL_GPIO_Init+0x228>
 800d8d6:	2303      	movs	r3, #3
 800d8d8:	e004      	b.n	800d8e4 <HAL_GPIO_Init+0x228>
 800d8da:	2302      	movs	r3, #2
 800d8dc:	e002      	b.n	800d8e4 <HAL_GPIO_Init+0x228>
 800d8de:	2301      	movs	r3, #1
 800d8e0:	e000      	b.n	800d8e4 <HAL_GPIO_Init+0x228>
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	69fa      	ldr	r2, [r7, #28]
 800d8e6:	f002 0203 	and.w	r2, r2, #3
 800d8ea:	0092      	lsls	r2, r2, #2
 800d8ec:	4093      	lsls	r3, r2
 800d8ee:	69ba      	ldr	r2, [r7, #24]
 800d8f0:	4313      	orrs	r3, r2
 800d8f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d8f4:	4934      	ldr	r1, [pc, #208]	; (800d9c8 <HAL_GPIO_Init+0x30c>)
 800d8f6:	69fb      	ldr	r3, [r7, #28]
 800d8f8:	089b      	lsrs	r3, r3, #2
 800d8fa:	3302      	adds	r3, #2
 800d8fc:	69ba      	ldr	r2, [r7, #24]
 800d8fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800d902:	4b3a      	ldr	r3, [pc, #232]	; (800d9ec <HAL_GPIO_Init+0x330>)
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d908:	693b      	ldr	r3, [r7, #16]
 800d90a:	43db      	mvns	r3, r3
 800d90c:	69ba      	ldr	r2, [r7, #24]
 800d90e:	4013      	ands	r3, r2
 800d910:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800d912:	683b      	ldr	r3, [r7, #0]
 800d914:	685b      	ldr	r3, [r3, #4]
 800d916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d003      	beq.n	800d926 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800d91e:	69ba      	ldr	r2, [r7, #24]
 800d920:	693b      	ldr	r3, [r7, #16]
 800d922:	4313      	orrs	r3, r2
 800d924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800d926:	4a31      	ldr	r2, [pc, #196]	; (800d9ec <HAL_GPIO_Init+0x330>)
 800d928:	69bb      	ldr	r3, [r7, #24]
 800d92a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800d92c:	4b2f      	ldr	r3, [pc, #188]	; (800d9ec <HAL_GPIO_Init+0x330>)
 800d92e:	685b      	ldr	r3, [r3, #4]
 800d930:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d932:	693b      	ldr	r3, [r7, #16]
 800d934:	43db      	mvns	r3, r3
 800d936:	69ba      	ldr	r2, [r7, #24]
 800d938:	4013      	ands	r3, r2
 800d93a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800d93c:	683b      	ldr	r3, [r7, #0]
 800d93e:	685b      	ldr	r3, [r3, #4]
 800d940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d944:	2b00      	cmp	r3, #0
 800d946:	d003      	beq.n	800d950 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800d948:	69ba      	ldr	r2, [r7, #24]
 800d94a:	693b      	ldr	r3, [r7, #16]
 800d94c:	4313      	orrs	r3, r2
 800d94e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800d950:	4a26      	ldr	r2, [pc, #152]	; (800d9ec <HAL_GPIO_Init+0x330>)
 800d952:	69bb      	ldr	r3, [r7, #24]
 800d954:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800d956:	4b25      	ldr	r3, [pc, #148]	; (800d9ec <HAL_GPIO_Init+0x330>)
 800d958:	689b      	ldr	r3, [r3, #8]
 800d95a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d95c:	693b      	ldr	r3, [r7, #16]
 800d95e:	43db      	mvns	r3, r3
 800d960:	69ba      	ldr	r2, [r7, #24]
 800d962:	4013      	ands	r3, r2
 800d964:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	685b      	ldr	r3, [r3, #4]
 800d96a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d003      	beq.n	800d97a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800d972:	69ba      	ldr	r2, [r7, #24]
 800d974:	693b      	ldr	r3, [r7, #16]
 800d976:	4313      	orrs	r3, r2
 800d978:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800d97a:	4a1c      	ldr	r2, [pc, #112]	; (800d9ec <HAL_GPIO_Init+0x330>)
 800d97c:	69bb      	ldr	r3, [r7, #24]
 800d97e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800d980:	4b1a      	ldr	r3, [pc, #104]	; (800d9ec <HAL_GPIO_Init+0x330>)
 800d982:	68db      	ldr	r3, [r3, #12]
 800d984:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d986:	693b      	ldr	r3, [r7, #16]
 800d988:	43db      	mvns	r3, r3
 800d98a:	69ba      	ldr	r2, [r7, #24]
 800d98c:	4013      	ands	r3, r2
 800d98e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	685b      	ldr	r3, [r3, #4]
 800d994:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d003      	beq.n	800d9a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800d99c:	69ba      	ldr	r2, [r7, #24]
 800d99e:	693b      	ldr	r3, [r7, #16]
 800d9a0:	4313      	orrs	r3, r2
 800d9a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800d9a4:	4a11      	ldr	r2, [pc, #68]	; (800d9ec <HAL_GPIO_Init+0x330>)
 800d9a6:	69bb      	ldr	r3, [r7, #24]
 800d9a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d9aa:	69fb      	ldr	r3, [r7, #28]
 800d9ac:	3301      	adds	r3, #1
 800d9ae:	61fb      	str	r3, [r7, #28]
 800d9b0:	69fb      	ldr	r3, [r7, #28]
 800d9b2:	2b0f      	cmp	r3, #15
 800d9b4:	f67f ae90 	bls.w	800d6d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800d9b8:	bf00      	nop
 800d9ba:	3724      	adds	r7, #36	; 0x24
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c2:	4770      	bx	lr
 800d9c4:	40023800 	.word	0x40023800
 800d9c8:	40013800 	.word	0x40013800
 800d9cc:	40020000 	.word	0x40020000
 800d9d0:	40020400 	.word	0x40020400
 800d9d4:	40020800 	.word	0x40020800
 800d9d8:	40020c00 	.word	0x40020c00
 800d9dc:	40021000 	.word	0x40021000
 800d9e0:	40021400 	.word	0x40021400
 800d9e4:	40021800 	.word	0x40021800
 800d9e8:	40021c00 	.word	0x40021c00
 800d9ec:	40013c00 	.word	0x40013c00

0800d9f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d9f0:	b480      	push	{r7}
 800d9f2:	b083      	sub	sp, #12
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
 800d9f8:	460b      	mov	r3, r1
 800d9fa:	807b      	strh	r3, [r7, #2]
 800d9fc:	4613      	mov	r3, r2
 800d9fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800da00:	787b      	ldrb	r3, [r7, #1]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d003      	beq.n	800da0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800da06:	887a      	ldrh	r2, [r7, #2]
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800da0c:	e003      	b.n	800da16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800da0e:	887b      	ldrh	r3, [r7, #2]
 800da10:	041a      	lsls	r2, r3, #16
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	619a      	str	r2, [r3, #24]
}
 800da16:	bf00      	nop
 800da18:	370c      	adds	r7, #12
 800da1a:	46bd      	mov	sp, r7
 800da1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da20:	4770      	bx	lr

0800da22 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800da22:	b480      	push	{r7}
 800da24:	b083      	sub	sp, #12
 800da26:	af00      	add	r7, sp, #0
 800da28:	6078      	str	r0, [r7, #4]
 800da2a:	460b      	mov	r3, r1
 800da2c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	695a      	ldr	r2, [r3, #20]
 800da32:	887b      	ldrh	r3, [r7, #2]
 800da34:	401a      	ands	r2, r3
 800da36:	887b      	ldrh	r3, [r7, #2]
 800da38:	429a      	cmp	r2, r3
 800da3a:	d104      	bne.n	800da46 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800da3c:	887b      	ldrh	r3, [r7, #2]
 800da3e:	041a      	lsls	r2, r3, #16
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800da44:	e002      	b.n	800da4c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800da46:	887a      	ldrh	r2, [r7, #2]
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	619a      	str	r2, [r3, #24]
}
 800da4c:	bf00      	nop
 800da4e:	370c      	adds	r7, #12
 800da50:	46bd      	mov	sp, r7
 800da52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da56:	4770      	bx	lr

0800da58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b086      	sub	sp, #24
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d101      	bne.n	800da6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800da66:	2301      	movs	r3, #1
 800da68:	e25b      	b.n	800df22 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	f003 0301 	and.w	r3, r3, #1
 800da72:	2b00      	cmp	r3, #0
 800da74:	d075      	beq.n	800db62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800da76:	4ba3      	ldr	r3, [pc, #652]	; (800dd04 <HAL_RCC_OscConfig+0x2ac>)
 800da78:	689b      	ldr	r3, [r3, #8]
 800da7a:	f003 030c 	and.w	r3, r3, #12
 800da7e:	2b04      	cmp	r3, #4
 800da80:	d00c      	beq.n	800da9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800da82:	4ba0      	ldr	r3, [pc, #640]	; (800dd04 <HAL_RCC_OscConfig+0x2ac>)
 800da84:	689b      	ldr	r3, [r3, #8]
 800da86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800da8a:	2b08      	cmp	r3, #8
 800da8c:	d112      	bne.n	800dab4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800da8e:	4b9d      	ldr	r3, [pc, #628]	; (800dd04 <HAL_RCC_OscConfig+0x2ac>)
 800da90:	685b      	ldr	r3, [r3, #4]
 800da92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800da96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800da9a:	d10b      	bne.n	800dab4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800da9c:	4b99      	ldr	r3, [pc, #612]	; (800dd04 <HAL_RCC_OscConfig+0x2ac>)
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d05b      	beq.n	800db60 <HAL_RCC_OscConfig+0x108>
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	685b      	ldr	r3, [r3, #4]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d157      	bne.n	800db60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800dab0:	2301      	movs	r3, #1
 800dab2:	e236      	b.n	800df22 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	685b      	ldr	r3, [r3, #4]
 800dab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dabc:	d106      	bne.n	800dacc <HAL_RCC_OscConfig+0x74>
 800dabe:	4b91      	ldr	r3, [pc, #580]	; (800dd04 <HAL_RCC_OscConfig+0x2ac>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	4a90      	ldr	r2, [pc, #576]	; (800dd04 <HAL_RCC_OscConfig+0x2ac>)
 800dac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dac8:	6013      	str	r3, [r2, #0]
 800daca:	e01d      	b.n	800db08 <HAL_RCC_OscConfig+0xb0>
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	685b      	ldr	r3, [r3, #4]
 800dad0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800dad4:	d10c      	bne.n	800daf0 <HAL_RCC_OscConfig+0x98>
 800dad6:	4b8b      	ldr	r3, [pc, #556]	; (800dd04 <HAL_RCC_OscConfig+0x2ac>)
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	4a8a      	ldr	r2, [pc, #552]	; (800dd04 <HAL_RCC_OscConfig+0x2ac>)
 800dadc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800dae0:	6013      	str	r3, [r2, #0]
 800dae2:	4b88      	ldr	r3, [pc, #544]	; (800dd04 <HAL_RCC_OscConfig+0x2ac>)
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	4a87      	ldr	r2, [pc, #540]	; (800dd04 <HAL_RCC_OscConfig+0x2ac>)
 800dae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800daec:	6013      	str	r3, [r2, #0]
 800daee:	e00b      	b.n	800db08 <HAL_RCC_OscConfig+0xb0>
 800daf0:	4b84      	ldr	r3, [pc, #528]	; (800dd04 <HAL_RCC_OscConfig+0x2ac>)
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	4a83      	ldr	r2, [pc, #524]	; (800dd04 <HAL_RCC_OscConfig+0x2ac>)
 800daf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dafa:	6013      	str	r3, [r2, #0]
 800dafc:	4b81      	ldr	r3, [pc, #516]	; (800dd04 <HAL_RCC_OscConfig+0x2ac>)
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	4a80      	ldr	r2, [pc, #512]	; (800dd04 <HAL_RCC_OscConfig+0x2ac>)
 800db02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800db06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	685b      	ldr	r3, [r3, #4]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d013      	beq.n	800db38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800db10:	f7ff f948 	bl	800cda4 <HAL_GetTick>
 800db14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800db16:	e008      	b.n	800db2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800db18:	f7ff f944 	bl	800cda4 <HAL_GetTick>
 800db1c:	4602      	mov	r2, r0
 800db1e:	693b      	ldr	r3, [r7, #16]
 800db20:	1ad3      	subs	r3, r2, r3
 800db22:	2b64      	cmp	r3, #100	; 0x64
 800db24:	d901      	bls.n	800db2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800db26:	2303      	movs	r3, #3
 800db28:	e1fb      	b.n	800df22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800db2a:	4b76      	ldr	r3, [pc, #472]	; (800dd04 <HAL_RCC_OscConfig+0x2ac>)
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800db32:	2b00      	cmp	r3, #0
 800db34:	d0f0      	beq.n	800db18 <HAL_RCC_OscConfig+0xc0>
 800db36:	e014      	b.n	800db62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800db38:	f7ff f934 	bl	800cda4 <HAL_GetTick>
 800db3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800db3e:	e008      	b.n	800db52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800db40:	f7ff f930 	bl	800cda4 <HAL_GetTick>
 800db44:	4602      	mov	r2, r0
 800db46:	693b      	ldr	r3, [r7, #16]
 800db48:	1ad3      	subs	r3, r2, r3
 800db4a:	2b64      	cmp	r3, #100	; 0x64
 800db4c:	d901      	bls.n	800db52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800db4e:	2303      	movs	r3, #3
 800db50:	e1e7      	b.n	800df22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800db52:	4b6c      	ldr	r3, [pc, #432]	; (800dd04 <HAL_RCC_OscConfig+0x2ac>)
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d1f0      	bne.n	800db40 <HAL_RCC_OscConfig+0xe8>
 800db5e:	e000      	b.n	800db62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800db60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	f003 0302 	and.w	r3, r3, #2
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d063      	beq.n	800dc36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800db6e:	4b65      	ldr	r3, [pc, #404]	; (800dd04 <HAL_RCC_OscConfig+0x2ac>)
 800db70:	689b      	ldr	r3, [r3, #8]
 800db72:	f003 030c 	and.w	r3, r3, #12
 800db76:	2b00      	cmp	r3, #0
 800db78:	d00b      	beq.n	800db92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800db7a:	4b62      	ldr	r3, [pc, #392]	; (800dd04 <HAL_RCC_OscConfig+0x2ac>)
 800db7c:	689b      	ldr	r3, [r3, #8]
 800db7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800db82:	2b08      	cmp	r3, #8
 800db84:	d11c      	bne.n	800dbc0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800db86:	4b5f      	ldr	r3, [pc, #380]	; (800dd04 <HAL_RCC_OscConfig+0x2ac>)
 800db88:	685b      	ldr	r3, [r3, #4]
 800db8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d116      	bne.n	800dbc0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800db92:	4b5c      	ldr	r3, [pc, #368]	; (800dd04 <HAL_RCC_OscConfig+0x2ac>)
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	f003 0302 	and.w	r3, r3, #2
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d005      	beq.n	800dbaa <HAL_RCC_OscConfig+0x152>
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	68db      	ldr	r3, [r3, #12]
 800dba2:	2b01      	cmp	r3, #1
 800dba4:	d001      	beq.n	800dbaa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800dba6:	2301      	movs	r3, #1
 800dba8:	e1bb      	b.n	800df22 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dbaa:	4b56      	ldr	r3, [pc, #344]	; (800dd04 <HAL_RCC_OscConfig+0x2ac>)
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	691b      	ldr	r3, [r3, #16]
 800dbb6:	00db      	lsls	r3, r3, #3
 800dbb8:	4952      	ldr	r1, [pc, #328]	; (800dd04 <HAL_RCC_OscConfig+0x2ac>)
 800dbba:	4313      	orrs	r3, r2
 800dbbc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800dbbe:	e03a      	b.n	800dc36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	68db      	ldr	r3, [r3, #12]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d020      	beq.n	800dc0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800dbc8:	4b4f      	ldr	r3, [pc, #316]	; (800dd08 <HAL_RCC_OscConfig+0x2b0>)
 800dbca:	2201      	movs	r2, #1
 800dbcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dbce:	f7ff f8e9 	bl	800cda4 <HAL_GetTick>
 800dbd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dbd4:	e008      	b.n	800dbe8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800dbd6:	f7ff f8e5 	bl	800cda4 <HAL_GetTick>
 800dbda:	4602      	mov	r2, r0
 800dbdc:	693b      	ldr	r3, [r7, #16]
 800dbde:	1ad3      	subs	r3, r2, r3
 800dbe0:	2b02      	cmp	r3, #2
 800dbe2:	d901      	bls.n	800dbe8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800dbe4:	2303      	movs	r3, #3
 800dbe6:	e19c      	b.n	800df22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dbe8:	4b46      	ldr	r3, [pc, #280]	; (800dd04 <HAL_RCC_OscConfig+0x2ac>)
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	f003 0302 	and.w	r3, r3, #2
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d0f0      	beq.n	800dbd6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dbf4:	4b43      	ldr	r3, [pc, #268]	; (800dd04 <HAL_RCC_OscConfig+0x2ac>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	691b      	ldr	r3, [r3, #16]
 800dc00:	00db      	lsls	r3, r3, #3
 800dc02:	4940      	ldr	r1, [pc, #256]	; (800dd04 <HAL_RCC_OscConfig+0x2ac>)
 800dc04:	4313      	orrs	r3, r2
 800dc06:	600b      	str	r3, [r1, #0]
 800dc08:	e015      	b.n	800dc36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800dc0a:	4b3f      	ldr	r3, [pc, #252]	; (800dd08 <HAL_RCC_OscConfig+0x2b0>)
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dc10:	f7ff f8c8 	bl	800cda4 <HAL_GetTick>
 800dc14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800dc16:	e008      	b.n	800dc2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800dc18:	f7ff f8c4 	bl	800cda4 <HAL_GetTick>
 800dc1c:	4602      	mov	r2, r0
 800dc1e:	693b      	ldr	r3, [r7, #16]
 800dc20:	1ad3      	subs	r3, r2, r3
 800dc22:	2b02      	cmp	r3, #2
 800dc24:	d901      	bls.n	800dc2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800dc26:	2303      	movs	r3, #3
 800dc28:	e17b      	b.n	800df22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800dc2a:	4b36      	ldr	r3, [pc, #216]	; (800dd04 <HAL_RCC_OscConfig+0x2ac>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	f003 0302 	and.w	r3, r3, #2
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d1f0      	bne.n	800dc18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	f003 0308 	and.w	r3, r3, #8
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d030      	beq.n	800dca4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	695b      	ldr	r3, [r3, #20]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d016      	beq.n	800dc78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800dc4a:	4b30      	ldr	r3, [pc, #192]	; (800dd0c <HAL_RCC_OscConfig+0x2b4>)
 800dc4c:	2201      	movs	r2, #1
 800dc4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dc50:	f7ff f8a8 	bl	800cda4 <HAL_GetTick>
 800dc54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800dc56:	e008      	b.n	800dc6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800dc58:	f7ff f8a4 	bl	800cda4 <HAL_GetTick>
 800dc5c:	4602      	mov	r2, r0
 800dc5e:	693b      	ldr	r3, [r7, #16]
 800dc60:	1ad3      	subs	r3, r2, r3
 800dc62:	2b02      	cmp	r3, #2
 800dc64:	d901      	bls.n	800dc6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800dc66:	2303      	movs	r3, #3
 800dc68:	e15b      	b.n	800df22 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800dc6a:	4b26      	ldr	r3, [pc, #152]	; (800dd04 <HAL_RCC_OscConfig+0x2ac>)
 800dc6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc6e:	f003 0302 	and.w	r3, r3, #2
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d0f0      	beq.n	800dc58 <HAL_RCC_OscConfig+0x200>
 800dc76:	e015      	b.n	800dca4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800dc78:	4b24      	ldr	r3, [pc, #144]	; (800dd0c <HAL_RCC_OscConfig+0x2b4>)
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800dc7e:	f7ff f891 	bl	800cda4 <HAL_GetTick>
 800dc82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800dc84:	e008      	b.n	800dc98 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800dc86:	f7ff f88d 	bl	800cda4 <HAL_GetTick>
 800dc8a:	4602      	mov	r2, r0
 800dc8c:	693b      	ldr	r3, [r7, #16]
 800dc8e:	1ad3      	subs	r3, r2, r3
 800dc90:	2b02      	cmp	r3, #2
 800dc92:	d901      	bls.n	800dc98 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800dc94:	2303      	movs	r3, #3
 800dc96:	e144      	b.n	800df22 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800dc98:	4b1a      	ldr	r3, [pc, #104]	; (800dd04 <HAL_RCC_OscConfig+0x2ac>)
 800dc9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc9c:	f003 0302 	and.w	r3, r3, #2
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d1f0      	bne.n	800dc86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	f003 0304 	and.w	r3, r3, #4
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	f000 80a0 	beq.w	800ddf2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800dcb6:	4b13      	ldr	r3, [pc, #76]	; (800dd04 <HAL_RCC_OscConfig+0x2ac>)
 800dcb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d10f      	bne.n	800dce2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	60bb      	str	r3, [r7, #8]
 800dcc6:	4b0f      	ldr	r3, [pc, #60]	; (800dd04 <HAL_RCC_OscConfig+0x2ac>)
 800dcc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcca:	4a0e      	ldr	r2, [pc, #56]	; (800dd04 <HAL_RCC_OscConfig+0x2ac>)
 800dccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dcd0:	6413      	str	r3, [r2, #64]	; 0x40
 800dcd2:	4b0c      	ldr	r3, [pc, #48]	; (800dd04 <HAL_RCC_OscConfig+0x2ac>)
 800dcd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dcda:	60bb      	str	r3, [r7, #8]
 800dcdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800dcde:	2301      	movs	r3, #1
 800dce0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800dce2:	4b0b      	ldr	r3, [pc, #44]	; (800dd10 <HAL_RCC_OscConfig+0x2b8>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d121      	bne.n	800dd32 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800dcee:	4b08      	ldr	r3, [pc, #32]	; (800dd10 <HAL_RCC_OscConfig+0x2b8>)
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	4a07      	ldr	r2, [pc, #28]	; (800dd10 <HAL_RCC_OscConfig+0x2b8>)
 800dcf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dcf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800dcfa:	f7ff f853 	bl	800cda4 <HAL_GetTick>
 800dcfe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800dd00:	e011      	b.n	800dd26 <HAL_RCC_OscConfig+0x2ce>
 800dd02:	bf00      	nop
 800dd04:	40023800 	.word	0x40023800
 800dd08:	42470000 	.word	0x42470000
 800dd0c:	42470e80 	.word	0x42470e80
 800dd10:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dd14:	f7ff f846 	bl	800cda4 <HAL_GetTick>
 800dd18:	4602      	mov	r2, r0
 800dd1a:	693b      	ldr	r3, [r7, #16]
 800dd1c:	1ad3      	subs	r3, r2, r3
 800dd1e:	2b02      	cmp	r3, #2
 800dd20:	d901      	bls.n	800dd26 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800dd22:	2303      	movs	r3, #3
 800dd24:	e0fd      	b.n	800df22 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800dd26:	4b81      	ldr	r3, [pc, #516]	; (800df2c <HAL_RCC_OscConfig+0x4d4>)
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d0f0      	beq.n	800dd14 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	689b      	ldr	r3, [r3, #8]
 800dd36:	2b01      	cmp	r3, #1
 800dd38:	d106      	bne.n	800dd48 <HAL_RCC_OscConfig+0x2f0>
 800dd3a:	4b7d      	ldr	r3, [pc, #500]	; (800df30 <HAL_RCC_OscConfig+0x4d8>)
 800dd3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd3e:	4a7c      	ldr	r2, [pc, #496]	; (800df30 <HAL_RCC_OscConfig+0x4d8>)
 800dd40:	f043 0301 	orr.w	r3, r3, #1
 800dd44:	6713      	str	r3, [r2, #112]	; 0x70
 800dd46:	e01c      	b.n	800dd82 <HAL_RCC_OscConfig+0x32a>
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	689b      	ldr	r3, [r3, #8]
 800dd4c:	2b05      	cmp	r3, #5
 800dd4e:	d10c      	bne.n	800dd6a <HAL_RCC_OscConfig+0x312>
 800dd50:	4b77      	ldr	r3, [pc, #476]	; (800df30 <HAL_RCC_OscConfig+0x4d8>)
 800dd52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd54:	4a76      	ldr	r2, [pc, #472]	; (800df30 <HAL_RCC_OscConfig+0x4d8>)
 800dd56:	f043 0304 	orr.w	r3, r3, #4
 800dd5a:	6713      	str	r3, [r2, #112]	; 0x70
 800dd5c:	4b74      	ldr	r3, [pc, #464]	; (800df30 <HAL_RCC_OscConfig+0x4d8>)
 800dd5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd60:	4a73      	ldr	r2, [pc, #460]	; (800df30 <HAL_RCC_OscConfig+0x4d8>)
 800dd62:	f043 0301 	orr.w	r3, r3, #1
 800dd66:	6713      	str	r3, [r2, #112]	; 0x70
 800dd68:	e00b      	b.n	800dd82 <HAL_RCC_OscConfig+0x32a>
 800dd6a:	4b71      	ldr	r3, [pc, #452]	; (800df30 <HAL_RCC_OscConfig+0x4d8>)
 800dd6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd6e:	4a70      	ldr	r2, [pc, #448]	; (800df30 <HAL_RCC_OscConfig+0x4d8>)
 800dd70:	f023 0301 	bic.w	r3, r3, #1
 800dd74:	6713      	str	r3, [r2, #112]	; 0x70
 800dd76:	4b6e      	ldr	r3, [pc, #440]	; (800df30 <HAL_RCC_OscConfig+0x4d8>)
 800dd78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd7a:	4a6d      	ldr	r2, [pc, #436]	; (800df30 <HAL_RCC_OscConfig+0x4d8>)
 800dd7c:	f023 0304 	bic.w	r3, r3, #4
 800dd80:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	689b      	ldr	r3, [r3, #8]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d015      	beq.n	800ddb6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dd8a:	f7ff f80b 	bl	800cda4 <HAL_GetTick>
 800dd8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dd90:	e00a      	b.n	800dda8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800dd92:	f7ff f807 	bl	800cda4 <HAL_GetTick>
 800dd96:	4602      	mov	r2, r0
 800dd98:	693b      	ldr	r3, [r7, #16]
 800dd9a:	1ad3      	subs	r3, r2, r3
 800dd9c:	f241 3288 	movw	r2, #5000	; 0x1388
 800dda0:	4293      	cmp	r3, r2
 800dda2:	d901      	bls.n	800dda8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800dda4:	2303      	movs	r3, #3
 800dda6:	e0bc      	b.n	800df22 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dda8:	4b61      	ldr	r3, [pc, #388]	; (800df30 <HAL_RCC_OscConfig+0x4d8>)
 800ddaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddac:	f003 0302 	and.w	r3, r3, #2
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d0ee      	beq.n	800dd92 <HAL_RCC_OscConfig+0x33a>
 800ddb4:	e014      	b.n	800dde0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ddb6:	f7fe fff5 	bl	800cda4 <HAL_GetTick>
 800ddba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ddbc:	e00a      	b.n	800ddd4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ddbe:	f7fe fff1 	bl	800cda4 <HAL_GetTick>
 800ddc2:	4602      	mov	r2, r0
 800ddc4:	693b      	ldr	r3, [r7, #16]
 800ddc6:	1ad3      	subs	r3, r2, r3
 800ddc8:	f241 3288 	movw	r2, #5000	; 0x1388
 800ddcc:	4293      	cmp	r3, r2
 800ddce:	d901      	bls.n	800ddd4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800ddd0:	2303      	movs	r3, #3
 800ddd2:	e0a6      	b.n	800df22 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ddd4:	4b56      	ldr	r3, [pc, #344]	; (800df30 <HAL_RCC_OscConfig+0x4d8>)
 800ddd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddd8:	f003 0302 	and.w	r3, r3, #2
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d1ee      	bne.n	800ddbe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800dde0:	7dfb      	ldrb	r3, [r7, #23]
 800dde2:	2b01      	cmp	r3, #1
 800dde4:	d105      	bne.n	800ddf2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800dde6:	4b52      	ldr	r3, [pc, #328]	; (800df30 <HAL_RCC_OscConfig+0x4d8>)
 800dde8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddea:	4a51      	ldr	r2, [pc, #324]	; (800df30 <HAL_RCC_OscConfig+0x4d8>)
 800ddec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ddf0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	699b      	ldr	r3, [r3, #24]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	f000 8092 	beq.w	800df20 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ddfc:	4b4c      	ldr	r3, [pc, #304]	; (800df30 <HAL_RCC_OscConfig+0x4d8>)
 800ddfe:	689b      	ldr	r3, [r3, #8]
 800de00:	f003 030c 	and.w	r3, r3, #12
 800de04:	2b08      	cmp	r3, #8
 800de06:	d05c      	beq.n	800dec2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	699b      	ldr	r3, [r3, #24]
 800de0c:	2b02      	cmp	r3, #2
 800de0e:	d141      	bne.n	800de94 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800de10:	4b48      	ldr	r3, [pc, #288]	; (800df34 <HAL_RCC_OscConfig+0x4dc>)
 800de12:	2200      	movs	r2, #0
 800de14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800de16:	f7fe ffc5 	bl	800cda4 <HAL_GetTick>
 800de1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800de1c:	e008      	b.n	800de30 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800de1e:	f7fe ffc1 	bl	800cda4 <HAL_GetTick>
 800de22:	4602      	mov	r2, r0
 800de24:	693b      	ldr	r3, [r7, #16]
 800de26:	1ad3      	subs	r3, r2, r3
 800de28:	2b02      	cmp	r3, #2
 800de2a:	d901      	bls.n	800de30 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800de2c:	2303      	movs	r3, #3
 800de2e:	e078      	b.n	800df22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800de30:	4b3f      	ldr	r3, [pc, #252]	; (800df30 <HAL_RCC_OscConfig+0x4d8>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d1f0      	bne.n	800de1e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	69da      	ldr	r2, [r3, #28]
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	6a1b      	ldr	r3, [r3, #32]
 800de44:	431a      	orrs	r2, r3
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de4a:	019b      	lsls	r3, r3, #6
 800de4c:	431a      	orrs	r2, r3
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de52:	085b      	lsrs	r3, r3, #1
 800de54:	3b01      	subs	r3, #1
 800de56:	041b      	lsls	r3, r3, #16
 800de58:	431a      	orrs	r2, r3
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de5e:	061b      	lsls	r3, r3, #24
 800de60:	4933      	ldr	r1, [pc, #204]	; (800df30 <HAL_RCC_OscConfig+0x4d8>)
 800de62:	4313      	orrs	r3, r2
 800de64:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800de66:	4b33      	ldr	r3, [pc, #204]	; (800df34 <HAL_RCC_OscConfig+0x4dc>)
 800de68:	2201      	movs	r2, #1
 800de6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800de6c:	f7fe ff9a 	bl	800cda4 <HAL_GetTick>
 800de70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800de72:	e008      	b.n	800de86 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800de74:	f7fe ff96 	bl	800cda4 <HAL_GetTick>
 800de78:	4602      	mov	r2, r0
 800de7a:	693b      	ldr	r3, [r7, #16]
 800de7c:	1ad3      	subs	r3, r2, r3
 800de7e:	2b02      	cmp	r3, #2
 800de80:	d901      	bls.n	800de86 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800de82:	2303      	movs	r3, #3
 800de84:	e04d      	b.n	800df22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800de86:	4b2a      	ldr	r3, [pc, #168]	; (800df30 <HAL_RCC_OscConfig+0x4d8>)
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d0f0      	beq.n	800de74 <HAL_RCC_OscConfig+0x41c>
 800de92:	e045      	b.n	800df20 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800de94:	4b27      	ldr	r3, [pc, #156]	; (800df34 <HAL_RCC_OscConfig+0x4dc>)
 800de96:	2200      	movs	r2, #0
 800de98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800de9a:	f7fe ff83 	bl	800cda4 <HAL_GetTick>
 800de9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dea0:	e008      	b.n	800deb4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800dea2:	f7fe ff7f 	bl	800cda4 <HAL_GetTick>
 800dea6:	4602      	mov	r2, r0
 800dea8:	693b      	ldr	r3, [r7, #16]
 800deaa:	1ad3      	subs	r3, r2, r3
 800deac:	2b02      	cmp	r3, #2
 800deae:	d901      	bls.n	800deb4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800deb0:	2303      	movs	r3, #3
 800deb2:	e036      	b.n	800df22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800deb4:	4b1e      	ldr	r3, [pc, #120]	; (800df30 <HAL_RCC_OscConfig+0x4d8>)
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800debc:	2b00      	cmp	r3, #0
 800debe:	d1f0      	bne.n	800dea2 <HAL_RCC_OscConfig+0x44a>
 800dec0:	e02e      	b.n	800df20 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	699b      	ldr	r3, [r3, #24]
 800dec6:	2b01      	cmp	r3, #1
 800dec8:	d101      	bne.n	800dece <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800deca:	2301      	movs	r3, #1
 800decc:	e029      	b.n	800df22 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800dece:	4b18      	ldr	r3, [pc, #96]	; (800df30 <HAL_RCC_OscConfig+0x4d8>)
 800ded0:	685b      	ldr	r3, [r3, #4]
 800ded2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	69db      	ldr	r3, [r3, #28]
 800dede:	429a      	cmp	r2, r3
 800dee0:	d11c      	bne.n	800df1c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800deec:	429a      	cmp	r2, r3
 800deee:	d115      	bne.n	800df1c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800def0:	68fa      	ldr	r2, [r7, #12]
 800def2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800def6:	4013      	ands	r3, r2
 800def8:	687a      	ldr	r2, [r7, #4]
 800defa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800defc:	4293      	cmp	r3, r2
 800defe:	d10d      	bne.n	800df1c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800df0a:	429a      	cmp	r2, r3
 800df0c:	d106      	bne.n	800df1c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800df18:	429a      	cmp	r2, r3
 800df1a:	d001      	beq.n	800df20 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800df1c:	2301      	movs	r3, #1
 800df1e:	e000      	b.n	800df22 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800df20:	2300      	movs	r3, #0
}
 800df22:	4618      	mov	r0, r3
 800df24:	3718      	adds	r7, #24
 800df26:	46bd      	mov	sp, r7
 800df28:	bd80      	pop	{r7, pc}
 800df2a:	bf00      	nop
 800df2c:	40007000 	.word	0x40007000
 800df30:	40023800 	.word	0x40023800
 800df34:	42470060 	.word	0x42470060

0800df38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b084      	sub	sp, #16
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
 800df40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d101      	bne.n	800df4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800df48:	2301      	movs	r3, #1
 800df4a:	e0cc      	b.n	800e0e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800df4c:	4b68      	ldr	r3, [pc, #416]	; (800e0f0 <HAL_RCC_ClockConfig+0x1b8>)
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	f003 030f 	and.w	r3, r3, #15
 800df54:	683a      	ldr	r2, [r7, #0]
 800df56:	429a      	cmp	r2, r3
 800df58:	d90c      	bls.n	800df74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800df5a:	4b65      	ldr	r3, [pc, #404]	; (800e0f0 <HAL_RCC_ClockConfig+0x1b8>)
 800df5c:	683a      	ldr	r2, [r7, #0]
 800df5e:	b2d2      	uxtb	r2, r2
 800df60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800df62:	4b63      	ldr	r3, [pc, #396]	; (800e0f0 <HAL_RCC_ClockConfig+0x1b8>)
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	f003 030f 	and.w	r3, r3, #15
 800df6a:	683a      	ldr	r2, [r7, #0]
 800df6c:	429a      	cmp	r2, r3
 800df6e:	d001      	beq.n	800df74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800df70:	2301      	movs	r3, #1
 800df72:	e0b8      	b.n	800e0e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	f003 0302 	and.w	r3, r3, #2
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d020      	beq.n	800dfc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	f003 0304 	and.w	r3, r3, #4
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d005      	beq.n	800df98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800df8c:	4b59      	ldr	r3, [pc, #356]	; (800e0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800df8e:	689b      	ldr	r3, [r3, #8]
 800df90:	4a58      	ldr	r2, [pc, #352]	; (800e0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800df92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800df96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	f003 0308 	and.w	r3, r3, #8
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d005      	beq.n	800dfb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800dfa4:	4b53      	ldr	r3, [pc, #332]	; (800e0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800dfa6:	689b      	ldr	r3, [r3, #8]
 800dfa8:	4a52      	ldr	r2, [pc, #328]	; (800e0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800dfaa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800dfae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dfb0:	4b50      	ldr	r3, [pc, #320]	; (800e0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800dfb2:	689b      	ldr	r3, [r3, #8]
 800dfb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	689b      	ldr	r3, [r3, #8]
 800dfbc:	494d      	ldr	r1, [pc, #308]	; (800e0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800dfbe:	4313      	orrs	r3, r2
 800dfc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	f003 0301 	and.w	r3, r3, #1
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d044      	beq.n	800e058 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	685b      	ldr	r3, [r3, #4]
 800dfd2:	2b01      	cmp	r3, #1
 800dfd4:	d107      	bne.n	800dfe6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dfd6:	4b47      	ldr	r3, [pc, #284]	; (800e0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d119      	bne.n	800e016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dfe2:	2301      	movs	r3, #1
 800dfe4:	e07f      	b.n	800e0e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	685b      	ldr	r3, [r3, #4]
 800dfea:	2b02      	cmp	r3, #2
 800dfec:	d003      	beq.n	800dff6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800dff2:	2b03      	cmp	r3, #3
 800dff4:	d107      	bne.n	800e006 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dff6:	4b3f      	ldr	r3, [pc, #252]	; (800e0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d109      	bne.n	800e016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e002:	2301      	movs	r3, #1
 800e004:	e06f      	b.n	800e0e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e006:	4b3b      	ldr	r3, [pc, #236]	; (800e0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	f003 0302 	and.w	r3, r3, #2
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d101      	bne.n	800e016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e012:	2301      	movs	r3, #1
 800e014:	e067      	b.n	800e0e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800e016:	4b37      	ldr	r3, [pc, #220]	; (800e0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800e018:	689b      	ldr	r3, [r3, #8]
 800e01a:	f023 0203 	bic.w	r2, r3, #3
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	685b      	ldr	r3, [r3, #4]
 800e022:	4934      	ldr	r1, [pc, #208]	; (800e0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800e024:	4313      	orrs	r3, r2
 800e026:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800e028:	f7fe febc 	bl	800cda4 <HAL_GetTick>
 800e02c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e02e:	e00a      	b.n	800e046 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e030:	f7fe feb8 	bl	800cda4 <HAL_GetTick>
 800e034:	4602      	mov	r2, r0
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	1ad3      	subs	r3, r2, r3
 800e03a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e03e:	4293      	cmp	r3, r2
 800e040:	d901      	bls.n	800e046 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800e042:	2303      	movs	r3, #3
 800e044:	e04f      	b.n	800e0e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e046:	4b2b      	ldr	r3, [pc, #172]	; (800e0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800e048:	689b      	ldr	r3, [r3, #8]
 800e04a:	f003 020c 	and.w	r2, r3, #12
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	685b      	ldr	r3, [r3, #4]
 800e052:	009b      	lsls	r3, r3, #2
 800e054:	429a      	cmp	r2, r3
 800e056:	d1eb      	bne.n	800e030 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800e058:	4b25      	ldr	r3, [pc, #148]	; (800e0f0 <HAL_RCC_ClockConfig+0x1b8>)
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	f003 030f 	and.w	r3, r3, #15
 800e060:	683a      	ldr	r2, [r7, #0]
 800e062:	429a      	cmp	r2, r3
 800e064:	d20c      	bcs.n	800e080 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e066:	4b22      	ldr	r3, [pc, #136]	; (800e0f0 <HAL_RCC_ClockConfig+0x1b8>)
 800e068:	683a      	ldr	r2, [r7, #0]
 800e06a:	b2d2      	uxtb	r2, r2
 800e06c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e06e:	4b20      	ldr	r3, [pc, #128]	; (800e0f0 <HAL_RCC_ClockConfig+0x1b8>)
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	f003 030f 	and.w	r3, r3, #15
 800e076:	683a      	ldr	r2, [r7, #0]
 800e078:	429a      	cmp	r2, r3
 800e07a:	d001      	beq.n	800e080 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800e07c:	2301      	movs	r3, #1
 800e07e:	e032      	b.n	800e0e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	f003 0304 	and.w	r3, r3, #4
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d008      	beq.n	800e09e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e08c:	4b19      	ldr	r3, [pc, #100]	; (800e0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800e08e:	689b      	ldr	r3, [r3, #8]
 800e090:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	68db      	ldr	r3, [r3, #12]
 800e098:	4916      	ldr	r1, [pc, #88]	; (800e0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800e09a:	4313      	orrs	r3, r2
 800e09c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	f003 0308 	and.w	r3, r3, #8
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d009      	beq.n	800e0be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800e0aa:	4b12      	ldr	r3, [pc, #72]	; (800e0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800e0ac:	689b      	ldr	r3, [r3, #8]
 800e0ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	691b      	ldr	r3, [r3, #16]
 800e0b6:	00db      	lsls	r3, r3, #3
 800e0b8:	490e      	ldr	r1, [pc, #56]	; (800e0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800e0ba:	4313      	orrs	r3, r2
 800e0bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800e0be:	f000 f821 	bl	800e104 <HAL_RCC_GetSysClockFreq>
 800e0c2:	4601      	mov	r1, r0
 800e0c4:	4b0b      	ldr	r3, [pc, #44]	; (800e0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800e0c6:	689b      	ldr	r3, [r3, #8]
 800e0c8:	091b      	lsrs	r3, r3, #4
 800e0ca:	f003 030f 	and.w	r3, r3, #15
 800e0ce:	4a0a      	ldr	r2, [pc, #40]	; (800e0f8 <HAL_RCC_ClockConfig+0x1c0>)
 800e0d0:	5cd3      	ldrb	r3, [r2, r3]
 800e0d2:	fa21 f303 	lsr.w	r3, r1, r3
 800e0d6:	4a09      	ldr	r2, [pc, #36]	; (800e0fc <HAL_RCC_ClockConfig+0x1c4>)
 800e0d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800e0da:	4b09      	ldr	r3, [pc, #36]	; (800e100 <HAL_RCC_ClockConfig+0x1c8>)
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	4618      	mov	r0, r3
 800e0e0:	f7fe fe1c 	bl	800cd1c <HAL_InitTick>

  return HAL_OK;
 800e0e4:	2300      	movs	r3, #0
}
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	3710      	adds	r7, #16
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	bd80      	pop	{r7, pc}
 800e0ee:	bf00      	nop
 800e0f0:	40023c00 	.word	0x40023c00
 800e0f4:	40023800 	.word	0x40023800
 800e0f8:	0800ed94 	.word	0x0800ed94
 800e0fc:	20000000 	.word	0x20000000
 800e100:	20000004 	.word	0x20000004

0800e104 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e104:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e106:	b085      	sub	sp, #20
 800e108:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800e10a:	2300      	movs	r3, #0
 800e10c:	607b      	str	r3, [r7, #4]
 800e10e:	2300      	movs	r3, #0
 800e110:	60fb      	str	r3, [r7, #12]
 800e112:	2300      	movs	r3, #0
 800e114:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800e116:	2300      	movs	r3, #0
 800e118:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e11a:	4b50      	ldr	r3, [pc, #320]	; (800e25c <HAL_RCC_GetSysClockFreq+0x158>)
 800e11c:	689b      	ldr	r3, [r3, #8]
 800e11e:	f003 030c 	and.w	r3, r3, #12
 800e122:	2b04      	cmp	r3, #4
 800e124:	d007      	beq.n	800e136 <HAL_RCC_GetSysClockFreq+0x32>
 800e126:	2b08      	cmp	r3, #8
 800e128:	d008      	beq.n	800e13c <HAL_RCC_GetSysClockFreq+0x38>
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	f040 808d 	bne.w	800e24a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800e130:	4b4b      	ldr	r3, [pc, #300]	; (800e260 <HAL_RCC_GetSysClockFreq+0x15c>)
 800e132:	60bb      	str	r3, [r7, #8]
       break;
 800e134:	e08c      	b.n	800e250 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800e136:	4b4b      	ldr	r3, [pc, #300]	; (800e264 <HAL_RCC_GetSysClockFreq+0x160>)
 800e138:	60bb      	str	r3, [r7, #8]
      break;
 800e13a:	e089      	b.n	800e250 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e13c:	4b47      	ldr	r3, [pc, #284]	; (800e25c <HAL_RCC_GetSysClockFreq+0x158>)
 800e13e:	685b      	ldr	r3, [r3, #4]
 800e140:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e144:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e146:	4b45      	ldr	r3, [pc, #276]	; (800e25c <HAL_RCC_GetSysClockFreq+0x158>)
 800e148:	685b      	ldr	r3, [r3, #4]
 800e14a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d023      	beq.n	800e19a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e152:	4b42      	ldr	r3, [pc, #264]	; (800e25c <HAL_RCC_GetSysClockFreq+0x158>)
 800e154:	685b      	ldr	r3, [r3, #4]
 800e156:	099b      	lsrs	r3, r3, #6
 800e158:	f04f 0400 	mov.w	r4, #0
 800e15c:	f240 11ff 	movw	r1, #511	; 0x1ff
 800e160:	f04f 0200 	mov.w	r2, #0
 800e164:	ea03 0501 	and.w	r5, r3, r1
 800e168:	ea04 0602 	and.w	r6, r4, r2
 800e16c:	4a3d      	ldr	r2, [pc, #244]	; (800e264 <HAL_RCC_GetSysClockFreq+0x160>)
 800e16e:	fb02 f106 	mul.w	r1, r2, r6
 800e172:	2200      	movs	r2, #0
 800e174:	fb02 f205 	mul.w	r2, r2, r5
 800e178:	440a      	add	r2, r1
 800e17a:	493a      	ldr	r1, [pc, #232]	; (800e264 <HAL_RCC_GetSysClockFreq+0x160>)
 800e17c:	fba5 0101 	umull	r0, r1, r5, r1
 800e180:	1853      	adds	r3, r2, r1
 800e182:	4619      	mov	r1, r3
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	f04f 0400 	mov.w	r4, #0
 800e18a:	461a      	mov	r2, r3
 800e18c:	4623      	mov	r3, r4
 800e18e:	f7fe f81b 	bl	800c1c8 <__aeabi_uldivmod>
 800e192:	4603      	mov	r3, r0
 800e194:	460c      	mov	r4, r1
 800e196:	60fb      	str	r3, [r7, #12]
 800e198:	e049      	b.n	800e22e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e19a:	4b30      	ldr	r3, [pc, #192]	; (800e25c <HAL_RCC_GetSysClockFreq+0x158>)
 800e19c:	685b      	ldr	r3, [r3, #4]
 800e19e:	099b      	lsrs	r3, r3, #6
 800e1a0:	f04f 0400 	mov.w	r4, #0
 800e1a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 800e1a8:	f04f 0200 	mov.w	r2, #0
 800e1ac:	ea03 0501 	and.w	r5, r3, r1
 800e1b0:	ea04 0602 	and.w	r6, r4, r2
 800e1b4:	4629      	mov	r1, r5
 800e1b6:	4632      	mov	r2, r6
 800e1b8:	f04f 0300 	mov.w	r3, #0
 800e1bc:	f04f 0400 	mov.w	r4, #0
 800e1c0:	0154      	lsls	r4, r2, #5
 800e1c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800e1c6:	014b      	lsls	r3, r1, #5
 800e1c8:	4619      	mov	r1, r3
 800e1ca:	4622      	mov	r2, r4
 800e1cc:	1b49      	subs	r1, r1, r5
 800e1ce:	eb62 0206 	sbc.w	r2, r2, r6
 800e1d2:	f04f 0300 	mov.w	r3, #0
 800e1d6:	f04f 0400 	mov.w	r4, #0
 800e1da:	0194      	lsls	r4, r2, #6
 800e1dc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800e1e0:	018b      	lsls	r3, r1, #6
 800e1e2:	1a5b      	subs	r3, r3, r1
 800e1e4:	eb64 0402 	sbc.w	r4, r4, r2
 800e1e8:	f04f 0100 	mov.w	r1, #0
 800e1ec:	f04f 0200 	mov.w	r2, #0
 800e1f0:	00e2      	lsls	r2, r4, #3
 800e1f2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800e1f6:	00d9      	lsls	r1, r3, #3
 800e1f8:	460b      	mov	r3, r1
 800e1fa:	4614      	mov	r4, r2
 800e1fc:	195b      	adds	r3, r3, r5
 800e1fe:	eb44 0406 	adc.w	r4, r4, r6
 800e202:	f04f 0100 	mov.w	r1, #0
 800e206:	f04f 0200 	mov.w	r2, #0
 800e20a:	02a2      	lsls	r2, r4, #10
 800e20c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800e210:	0299      	lsls	r1, r3, #10
 800e212:	460b      	mov	r3, r1
 800e214:	4614      	mov	r4, r2
 800e216:	4618      	mov	r0, r3
 800e218:	4621      	mov	r1, r4
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	f04f 0400 	mov.w	r4, #0
 800e220:	461a      	mov	r2, r3
 800e222:	4623      	mov	r3, r4
 800e224:	f7fd ffd0 	bl	800c1c8 <__aeabi_uldivmod>
 800e228:	4603      	mov	r3, r0
 800e22a:	460c      	mov	r4, r1
 800e22c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800e22e:	4b0b      	ldr	r3, [pc, #44]	; (800e25c <HAL_RCC_GetSysClockFreq+0x158>)
 800e230:	685b      	ldr	r3, [r3, #4]
 800e232:	0c1b      	lsrs	r3, r3, #16
 800e234:	f003 0303 	and.w	r3, r3, #3
 800e238:	3301      	adds	r3, #1
 800e23a:	005b      	lsls	r3, r3, #1
 800e23c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800e23e:	68fa      	ldr	r2, [r7, #12]
 800e240:	683b      	ldr	r3, [r7, #0]
 800e242:	fbb2 f3f3 	udiv	r3, r2, r3
 800e246:	60bb      	str	r3, [r7, #8]
      break;
 800e248:	e002      	b.n	800e250 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e24a:	4b05      	ldr	r3, [pc, #20]	; (800e260 <HAL_RCC_GetSysClockFreq+0x15c>)
 800e24c:	60bb      	str	r3, [r7, #8]
      break;
 800e24e:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e250:	68bb      	ldr	r3, [r7, #8]
}
 800e252:	4618      	mov	r0, r3
 800e254:	3714      	adds	r7, #20
 800e256:	46bd      	mov	sp, r7
 800e258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e25a:	bf00      	nop
 800e25c:	40023800 	.word	0x40023800
 800e260:	00f42400 	.word	0x00f42400
 800e264:	017d7840 	.word	0x017d7840

0800e268 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e268:	b480      	push	{r7}
 800e26a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e26c:	4b03      	ldr	r3, [pc, #12]	; (800e27c <HAL_RCC_GetHCLKFreq+0x14>)
 800e26e:	681b      	ldr	r3, [r3, #0]
}
 800e270:	4618      	mov	r0, r3
 800e272:	46bd      	mov	sp, r7
 800e274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e278:	4770      	bx	lr
 800e27a:	bf00      	nop
 800e27c:	20000000 	.word	0x20000000

0800e280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800e284:	f7ff fff0 	bl	800e268 <HAL_RCC_GetHCLKFreq>
 800e288:	4601      	mov	r1, r0
 800e28a:	4b05      	ldr	r3, [pc, #20]	; (800e2a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e28c:	689b      	ldr	r3, [r3, #8]
 800e28e:	0a9b      	lsrs	r3, r3, #10
 800e290:	f003 0307 	and.w	r3, r3, #7
 800e294:	4a03      	ldr	r2, [pc, #12]	; (800e2a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e296:	5cd3      	ldrb	r3, [r2, r3]
 800e298:	fa21 f303 	lsr.w	r3, r1, r3
}
 800e29c:	4618      	mov	r0, r3
 800e29e:	bd80      	pop	{r7, pc}
 800e2a0:	40023800 	.word	0x40023800
 800e2a4:	0800eda4 	.word	0x0800eda4

0800e2a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800e2ac:	f7ff ffdc 	bl	800e268 <HAL_RCC_GetHCLKFreq>
 800e2b0:	4601      	mov	r1, r0
 800e2b2:	4b05      	ldr	r3, [pc, #20]	; (800e2c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e2b4:	689b      	ldr	r3, [r3, #8]
 800e2b6:	0b5b      	lsrs	r3, r3, #13
 800e2b8:	f003 0307 	and.w	r3, r3, #7
 800e2bc:	4a03      	ldr	r2, [pc, #12]	; (800e2cc <HAL_RCC_GetPCLK2Freq+0x24>)
 800e2be:	5cd3      	ldrb	r3, [r2, r3]
 800e2c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	bd80      	pop	{r7, pc}
 800e2c8:	40023800 	.word	0x40023800
 800e2cc:	0800eda4 	.word	0x0800eda4

0800e2d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b082      	sub	sp, #8
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d101      	bne.n	800e2e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e2de:	2301      	movs	r3, #1
 800e2e0:	e03f      	b.n	800e362 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e2e8:	b2db      	uxtb	r3, r3
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d106      	bne.n	800e2fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	2200      	movs	r2, #0
 800e2f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e2f6:	6878      	ldr	r0, [r7, #4]
 800e2f8:	f7fe fbc8 	bl	800ca8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	2224      	movs	r2, #36	; 0x24
 800e300:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	68da      	ldr	r2, [r3, #12]
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e312:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e314:	6878      	ldr	r0, [r7, #4]
 800e316:	f000 f97d 	bl	800e614 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	691a      	ldr	r2, [r3, #16]
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e328:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	695a      	ldr	r2, [r3, #20]
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e338:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	68da      	ldr	r2, [r3, #12]
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e348:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	2200      	movs	r2, #0
 800e34e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2220      	movs	r2, #32
 800e354:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	2220      	movs	r2, #32
 800e35c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800e360:	2300      	movs	r3, #0
}
 800e362:	4618      	mov	r0, r3
 800e364:	3708      	adds	r7, #8
 800e366:	46bd      	mov	sp, r7
 800e368:	bd80      	pop	{r7, pc}
	...

0800e36c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b086      	sub	sp, #24
 800e370:	af00      	add	r7, sp, #0
 800e372:	60f8      	str	r0, [r7, #12]
 800e374:	60b9      	str	r1, [r7, #8]
 800e376:	4613      	mov	r3, r2
 800e378:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e380:	b2db      	uxtb	r3, r3
 800e382:	2b20      	cmp	r3, #32
 800e384:	d166      	bne.n	800e454 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800e386:	68bb      	ldr	r3, [r7, #8]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d002      	beq.n	800e392 <HAL_UART_Receive_DMA+0x26>
 800e38c:	88fb      	ldrh	r3, [r7, #6]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d101      	bne.n	800e396 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800e392:	2301      	movs	r3, #1
 800e394:	e05f      	b.n	800e456 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e39c:	2b01      	cmp	r3, #1
 800e39e:	d101      	bne.n	800e3a4 <HAL_UART_Receive_DMA+0x38>
 800e3a0:	2302      	movs	r3, #2
 800e3a2:	e058      	b.n	800e456 <HAL_UART_Receive_DMA+0xea>
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	2201      	movs	r2, #1
 800e3a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800e3ac:	68ba      	ldr	r2, [r7, #8]
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	88fa      	ldrh	r2, [r7, #6]
 800e3b6:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	2222      	movs	r2, #34	; 0x22
 800e3c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3ca:	4a25      	ldr	r2, [pc, #148]	; (800e460 <HAL_UART_Receive_DMA+0xf4>)
 800e3cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3d2:	4a24      	ldr	r2, [pc, #144]	; (800e464 <HAL_UART_Receive_DMA+0xf8>)
 800e3d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3da:	4a23      	ldr	r2, [pc, #140]	; (800e468 <HAL_UART_Receive_DMA+0xfc>)
 800e3dc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800e3e6:	f107 0308 	add.w	r3, r7, #8
 800e3ea:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	3304      	adds	r3, #4
 800e3f6:	4619      	mov	r1, r3
 800e3f8:	697b      	ldr	r3, [r7, #20]
 800e3fa:	681a      	ldr	r2, [r3, #0]
 800e3fc:	88fb      	ldrh	r3, [r7, #6]
 800e3fe:	f7fe fe9d 	bl	800d13c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800e402:	2300      	movs	r3, #0
 800e404:	613b      	str	r3, [r7, #16]
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	613b      	str	r3, [r7, #16]
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	685b      	ldr	r3, [r3, #4]
 800e414:	613b      	str	r3, [r7, #16]
 800e416:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	2200      	movs	r2, #0
 800e41c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	68da      	ldr	r2, [r3, #12]
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e42e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	695a      	ldr	r2, [r3, #20]
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	f042 0201 	orr.w	r2, r2, #1
 800e43e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	695a      	ldr	r2, [r3, #20]
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e44e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800e450:	2300      	movs	r3, #0
 800e452:	e000      	b.n	800e456 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800e454:	2302      	movs	r3, #2
  }
}
 800e456:	4618      	mov	r0, r3
 800e458:	3718      	adds	r7, #24
 800e45a:	46bd      	mov	sp, r7
 800e45c:	bd80      	pop	{r7, pc}
 800e45e:	bf00      	nop
 800e460:	0800e495 	.word	0x0800e495
 800e464:	0800e4fd 	.word	0x0800e4fd
 800e468:	0800e519 	.word	0x0800e519

0800e46c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e46c:	b480      	push	{r7}
 800e46e:	b083      	sub	sp, #12
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800e474:	bf00      	nop
 800e476:	370c      	adds	r7, #12
 800e478:	46bd      	mov	sp, r7
 800e47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47e:	4770      	bx	lr

0800e480 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e480:	b480      	push	{r7}
 800e482:	b083      	sub	sp, #12
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800e488:	bf00      	nop
 800e48a:	370c      	adds	r7, #12
 800e48c:	46bd      	mov	sp, r7
 800e48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e492:	4770      	bx	lr

0800e494 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b084      	sub	sp, #16
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4a0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d11e      	bne.n	800e4ee <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	68da      	ldr	r2, [r3, #12]
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e4c4:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	695a      	ldr	r2, [r3, #20]
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	f022 0201 	bic.w	r2, r2, #1
 800e4d4:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	695a      	ldr	r2, [r3, #20]
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e4e4:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	2220      	movs	r2, #32
 800e4ea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800e4ee:	68f8      	ldr	r0, [r7, #12]
 800e4f0:	f7fe f810 	bl	800c514 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e4f4:	bf00      	nop
 800e4f6:	3710      	adds	r7, #16
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	bd80      	pop	{r7, pc}

0800e4fc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b084      	sub	sp, #16
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e508:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800e50a:	68f8      	ldr	r0, [r7, #12]
 800e50c:	f7ff ffae 	bl	800e46c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e510:	bf00      	nop
 800e512:	3710      	adds	r7, #16
 800e514:	46bd      	mov	sp, r7
 800e516:	bd80      	pop	{r7, pc}

0800e518 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b084      	sub	sp, #16
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800e520:	2300      	movs	r3, #0
 800e522:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e528:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800e52a:	68bb      	ldr	r3, [r7, #8]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	695b      	ldr	r3, [r3, #20]
 800e530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e534:	2b80      	cmp	r3, #128	; 0x80
 800e536:	bf0c      	ite	eq
 800e538:	2301      	moveq	r3, #1
 800e53a:	2300      	movne	r3, #0
 800e53c:	b2db      	uxtb	r3, r3
 800e53e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800e540:	68bb      	ldr	r3, [r7, #8]
 800e542:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e546:	b2db      	uxtb	r3, r3
 800e548:	2b21      	cmp	r3, #33	; 0x21
 800e54a:	d108      	bne.n	800e55e <UART_DMAError+0x46>
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d005      	beq.n	800e55e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800e552:	68bb      	ldr	r3, [r7, #8]
 800e554:	2200      	movs	r2, #0
 800e556:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800e558:	68b8      	ldr	r0, [r7, #8]
 800e55a:	f000 f827 	bl	800e5ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e55e:	68bb      	ldr	r3, [r7, #8]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	695b      	ldr	r3, [r3, #20]
 800e564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e568:	2b40      	cmp	r3, #64	; 0x40
 800e56a:	bf0c      	ite	eq
 800e56c:	2301      	moveq	r3, #1
 800e56e:	2300      	movne	r3, #0
 800e570:	b2db      	uxtb	r3, r3
 800e572:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800e574:	68bb      	ldr	r3, [r7, #8]
 800e576:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e57a:	b2db      	uxtb	r3, r3
 800e57c:	2b22      	cmp	r3, #34	; 0x22
 800e57e:	d108      	bne.n	800e592 <UART_DMAError+0x7a>
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d005      	beq.n	800e592 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800e586:	68bb      	ldr	r3, [r7, #8]
 800e588:	2200      	movs	r2, #0
 800e58a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800e58c:	68b8      	ldr	r0, [r7, #8]
 800e58e:	f000 f823 	bl	800e5d8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e592:	68bb      	ldr	r3, [r7, #8]
 800e594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e596:	f043 0210 	orr.w	r2, r3, #16
 800e59a:	68bb      	ldr	r3, [r7, #8]
 800e59c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e59e:	68b8      	ldr	r0, [r7, #8]
 800e5a0:	f7ff ff6e 	bl	800e480 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e5a4:	bf00      	nop
 800e5a6:	3710      	adds	r7, #16
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	bd80      	pop	{r7, pc}

0800e5ac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e5ac:	b480      	push	{r7}
 800e5ae:	b083      	sub	sp, #12
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	68da      	ldr	r2, [r3, #12]
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800e5c2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	2220      	movs	r2, #32
 800e5c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800e5cc:	bf00      	nop
 800e5ce:	370c      	adds	r7, #12
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d6:	4770      	bx	lr

0800e5d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e5d8:	b480      	push	{r7}
 800e5da:	b083      	sub	sp, #12
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	68da      	ldr	r2, [r3, #12]
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e5ee:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	695a      	ldr	r2, [r3, #20]
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	f022 0201 	bic.w	r2, r2, #1
 800e5fe:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	2220      	movs	r2, #32
 800e604:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800e608:	bf00      	nop
 800e60a:	370c      	adds	r7, #12
 800e60c:	46bd      	mov	sp, r7
 800e60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e612:	4770      	bx	lr

0800e614 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e618:	b085      	sub	sp, #20
 800e61a:	af00      	add	r7, sp, #0
 800e61c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	691b      	ldr	r3, [r3, #16]
 800e624:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	68da      	ldr	r2, [r3, #12]
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	430a      	orrs	r2, r1
 800e632:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	689a      	ldr	r2, [r3, #8]
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	691b      	ldr	r3, [r3, #16]
 800e63c:	431a      	orrs	r2, r3
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	695b      	ldr	r3, [r3, #20]
 800e642:	431a      	orrs	r2, r3
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	69db      	ldr	r3, [r3, #28]
 800e648:	4313      	orrs	r3, r2
 800e64a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	68db      	ldr	r3, [r3, #12]
 800e652:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800e656:	f023 030c 	bic.w	r3, r3, #12
 800e65a:	687a      	ldr	r2, [r7, #4]
 800e65c:	6812      	ldr	r2, [r2, #0]
 800e65e:	68f9      	ldr	r1, [r7, #12]
 800e660:	430b      	orrs	r3, r1
 800e662:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	695b      	ldr	r3, [r3, #20]
 800e66a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	699a      	ldr	r2, [r3, #24]
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	430a      	orrs	r2, r1
 800e678:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	69db      	ldr	r3, [r3, #28]
 800e67e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e682:	f040 818b 	bne.w	800e99c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	4ac1      	ldr	r2, [pc, #772]	; (800e990 <UART_SetConfig+0x37c>)
 800e68c:	4293      	cmp	r3, r2
 800e68e:	d005      	beq.n	800e69c <UART_SetConfig+0x88>
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	4abf      	ldr	r2, [pc, #764]	; (800e994 <UART_SetConfig+0x380>)
 800e696:	4293      	cmp	r3, r2
 800e698:	f040 80bd 	bne.w	800e816 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e69c:	f7ff fe04 	bl	800e2a8 <HAL_RCC_GetPCLK2Freq>
 800e6a0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e6a2:	68bb      	ldr	r3, [r7, #8]
 800e6a4:	461d      	mov	r5, r3
 800e6a6:	f04f 0600 	mov.w	r6, #0
 800e6aa:	46a8      	mov	r8, r5
 800e6ac:	46b1      	mov	r9, r6
 800e6ae:	eb18 0308 	adds.w	r3, r8, r8
 800e6b2:	eb49 0409 	adc.w	r4, r9, r9
 800e6b6:	4698      	mov	r8, r3
 800e6b8:	46a1      	mov	r9, r4
 800e6ba:	eb18 0805 	adds.w	r8, r8, r5
 800e6be:	eb49 0906 	adc.w	r9, r9, r6
 800e6c2:	f04f 0100 	mov.w	r1, #0
 800e6c6:	f04f 0200 	mov.w	r2, #0
 800e6ca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e6ce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e6d2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e6d6:	4688      	mov	r8, r1
 800e6d8:	4691      	mov	r9, r2
 800e6da:	eb18 0005 	adds.w	r0, r8, r5
 800e6de:	eb49 0106 	adc.w	r1, r9, r6
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	685b      	ldr	r3, [r3, #4]
 800e6e6:	461d      	mov	r5, r3
 800e6e8:	f04f 0600 	mov.w	r6, #0
 800e6ec:	196b      	adds	r3, r5, r5
 800e6ee:	eb46 0406 	adc.w	r4, r6, r6
 800e6f2:	461a      	mov	r2, r3
 800e6f4:	4623      	mov	r3, r4
 800e6f6:	f7fd fd67 	bl	800c1c8 <__aeabi_uldivmod>
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	460c      	mov	r4, r1
 800e6fe:	461a      	mov	r2, r3
 800e700:	4ba5      	ldr	r3, [pc, #660]	; (800e998 <UART_SetConfig+0x384>)
 800e702:	fba3 2302 	umull	r2, r3, r3, r2
 800e706:	095b      	lsrs	r3, r3, #5
 800e708:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e70c:	68bb      	ldr	r3, [r7, #8]
 800e70e:	461d      	mov	r5, r3
 800e710:	f04f 0600 	mov.w	r6, #0
 800e714:	46a9      	mov	r9, r5
 800e716:	46b2      	mov	sl, r6
 800e718:	eb19 0309 	adds.w	r3, r9, r9
 800e71c:	eb4a 040a 	adc.w	r4, sl, sl
 800e720:	4699      	mov	r9, r3
 800e722:	46a2      	mov	sl, r4
 800e724:	eb19 0905 	adds.w	r9, r9, r5
 800e728:	eb4a 0a06 	adc.w	sl, sl, r6
 800e72c:	f04f 0100 	mov.w	r1, #0
 800e730:	f04f 0200 	mov.w	r2, #0
 800e734:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e738:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e73c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e740:	4689      	mov	r9, r1
 800e742:	4692      	mov	sl, r2
 800e744:	eb19 0005 	adds.w	r0, r9, r5
 800e748:	eb4a 0106 	adc.w	r1, sl, r6
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	685b      	ldr	r3, [r3, #4]
 800e750:	461d      	mov	r5, r3
 800e752:	f04f 0600 	mov.w	r6, #0
 800e756:	196b      	adds	r3, r5, r5
 800e758:	eb46 0406 	adc.w	r4, r6, r6
 800e75c:	461a      	mov	r2, r3
 800e75e:	4623      	mov	r3, r4
 800e760:	f7fd fd32 	bl	800c1c8 <__aeabi_uldivmod>
 800e764:	4603      	mov	r3, r0
 800e766:	460c      	mov	r4, r1
 800e768:	461a      	mov	r2, r3
 800e76a:	4b8b      	ldr	r3, [pc, #556]	; (800e998 <UART_SetConfig+0x384>)
 800e76c:	fba3 1302 	umull	r1, r3, r3, r2
 800e770:	095b      	lsrs	r3, r3, #5
 800e772:	2164      	movs	r1, #100	; 0x64
 800e774:	fb01 f303 	mul.w	r3, r1, r3
 800e778:	1ad3      	subs	r3, r2, r3
 800e77a:	00db      	lsls	r3, r3, #3
 800e77c:	3332      	adds	r3, #50	; 0x32
 800e77e:	4a86      	ldr	r2, [pc, #536]	; (800e998 <UART_SetConfig+0x384>)
 800e780:	fba2 2303 	umull	r2, r3, r2, r3
 800e784:	095b      	lsrs	r3, r3, #5
 800e786:	005b      	lsls	r3, r3, #1
 800e788:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e78c:	4498      	add	r8, r3
 800e78e:	68bb      	ldr	r3, [r7, #8]
 800e790:	461d      	mov	r5, r3
 800e792:	f04f 0600 	mov.w	r6, #0
 800e796:	46a9      	mov	r9, r5
 800e798:	46b2      	mov	sl, r6
 800e79a:	eb19 0309 	adds.w	r3, r9, r9
 800e79e:	eb4a 040a 	adc.w	r4, sl, sl
 800e7a2:	4699      	mov	r9, r3
 800e7a4:	46a2      	mov	sl, r4
 800e7a6:	eb19 0905 	adds.w	r9, r9, r5
 800e7aa:	eb4a 0a06 	adc.w	sl, sl, r6
 800e7ae:	f04f 0100 	mov.w	r1, #0
 800e7b2:	f04f 0200 	mov.w	r2, #0
 800e7b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e7ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e7be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e7c2:	4689      	mov	r9, r1
 800e7c4:	4692      	mov	sl, r2
 800e7c6:	eb19 0005 	adds.w	r0, r9, r5
 800e7ca:	eb4a 0106 	adc.w	r1, sl, r6
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	685b      	ldr	r3, [r3, #4]
 800e7d2:	461d      	mov	r5, r3
 800e7d4:	f04f 0600 	mov.w	r6, #0
 800e7d8:	196b      	adds	r3, r5, r5
 800e7da:	eb46 0406 	adc.w	r4, r6, r6
 800e7de:	461a      	mov	r2, r3
 800e7e0:	4623      	mov	r3, r4
 800e7e2:	f7fd fcf1 	bl	800c1c8 <__aeabi_uldivmod>
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	460c      	mov	r4, r1
 800e7ea:	461a      	mov	r2, r3
 800e7ec:	4b6a      	ldr	r3, [pc, #424]	; (800e998 <UART_SetConfig+0x384>)
 800e7ee:	fba3 1302 	umull	r1, r3, r3, r2
 800e7f2:	095b      	lsrs	r3, r3, #5
 800e7f4:	2164      	movs	r1, #100	; 0x64
 800e7f6:	fb01 f303 	mul.w	r3, r1, r3
 800e7fa:	1ad3      	subs	r3, r2, r3
 800e7fc:	00db      	lsls	r3, r3, #3
 800e7fe:	3332      	adds	r3, #50	; 0x32
 800e800:	4a65      	ldr	r2, [pc, #404]	; (800e998 <UART_SetConfig+0x384>)
 800e802:	fba2 2303 	umull	r2, r3, r2, r3
 800e806:	095b      	lsrs	r3, r3, #5
 800e808:	f003 0207 	and.w	r2, r3, #7
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	4442      	add	r2, r8
 800e812:	609a      	str	r2, [r3, #8]
 800e814:	e26f      	b.n	800ecf6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800e816:	f7ff fd33 	bl	800e280 <HAL_RCC_GetPCLK1Freq>
 800e81a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e81c:	68bb      	ldr	r3, [r7, #8]
 800e81e:	461d      	mov	r5, r3
 800e820:	f04f 0600 	mov.w	r6, #0
 800e824:	46a8      	mov	r8, r5
 800e826:	46b1      	mov	r9, r6
 800e828:	eb18 0308 	adds.w	r3, r8, r8
 800e82c:	eb49 0409 	adc.w	r4, r9, r9
 800e830:	4698      	mov	r8, r3
 800e832:	46a1      	mov	r9, r4
 800e834:	eb18 0805 	adds.w	r8, r8, r5
 800e838:	eb49 0906 	adc.w	r9, r9, r6
 800e83c:	f04f 0100 	mov.w	r1, #0
 800e840:	f04f 0200 	mov.w	r2, #0
 800e844:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e848:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e84c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e850:	4688      	mov	r8, r1
 800e852:	4691      	mov	r9, r2
 800e854:	eb18 0005 	adds.w	r0, r8, r5
 800e858:	eb49 0106 	adc.w	r1, r9, r6
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	685b      	ldr	r3, [r3, #4]
 800e860:	461d      	mov	r5, r3
 800e862:	f04f 0600 	mov.w	r6, #0
 800e866:	196b      	adds	r3, r5, r5
 800e868:	eb46 0406 	adc.w	r4, r6, r6
 800e86c:	461a      	mov	r2, r3
 800e86e:	4623      	mov	r3, r4
 800e870:	f7fd fcaa 	bl	800c1c8 <__aeabi_uldivmod>
 800e874:	4603      	mov	r3, r0
 800e876:	460c      	mov	r4, r1
 800e878:	461a      	mov	r2, r3
 800e87a:	4b47      	ldr	r3, [pc, #284]	; (800e998 <UART_SetConfig+0x384>)
 800e87c:	fba3 2302 	umull	r2, r3, r3, r2
 800e880:	095b      	lsrs	r3, r3, #5
 800e882:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e886:	68bb      	ldr	r3, [r7, #8]
 800e888:	461d      	mov	r5, r3
 800e88a:	f04f 0600 	mov.w	r6, #0
 800e88e:	46a9      	mov	r9, r5
 800e890:	46b2      	mov	sl, r6
 800e892:	eb19 0309 	adds.w	r3, r9, r9
 800e896:	eb4a 040a 	adc.w	r4, sl, sl
 800e89a:	4699      	mov	r9, r3
 800e89c:	46a2      	mov	sl, r4
 800e89e:	eb19 0905 	adds.w	r9, r9, r5
 800e8a2:	eb4a 0a06 	adc.w	sl, sl, r6
 800e8a6:	f04f 0100 	mov.w	r1, #0
 800e8aa:	f04f 0200 	mov.w	r2, #0
 800e8ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e8b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e8b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e8ba:	4689      	mov	r9, r1
 800e8bc:	4692      	mov	sl, r2
 800e8be:	eb19 0005 	adds.w	r0, r9, r5
 800e8c2:	eb4a 0106 	adc.w	r1, sl, r6
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	685b      	ldr	r3, [r3, #4]
 800e8ca:	461d      	mov	r5, r3
 800e8cc:	f04f 0600 	mov.w	r6, #0
 800e8d0:	196b      	adds	r3, r5, r5
 800e8d2:	eb46 0406 	adc.w	r4, r6, r6
 800e8d6:	461a      	mov	r2, r3
 800e8d8:	4623      	mov	r3, r4
 800e8da:	f7fd fc75 	bl	800c1c8 <__aeabi_uldivmod>
 800e8de:	4603      	mov	r3, r0
 800e8e0:	460c      	mov	r4, r1
 800e8e2:	461a      	mov	r2, r3
 800e8e4:	4b2c      	ldr	r3, [pc, #176]	; (800e998 <UART_SetConfig+0x384>)
 800e8e6:	fba3 1302 	umull	r1, r3, r3, r2
 800e8ea:	095b      	lsrs	r3, r3, #5
 800e8ec:	2164      	movs	r1, #100	; 0x64
 800e8ee:	fb01 f303 	mul.w	r3, r1, r3
 800e8f2:	1ad3      	subs	r3, r2, r3
 800e8f4:	00db      	lsls	r3, r3, #3
 800e8f6:	3332      	adds	r3, #50	; 0x32
 800e8f8:	4a27      	ldr	r2, [pc, #156]	; (800e998 <UART_SetConfig+0x384>)
 800e8fa:	fba2 2303 	umull	r2, r3, r2, r3
 800e8fe:	095b      	lsrs	r3, r3, #5
 800e900:	005b      	lsls	r3, r3, #1
 800e902:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e906:	4498      	add	r8, r3
 800e908:	68bb      	ldr	r3, [r7, #8]
 800e90a:	461d      	mov	r5, r3
 800e90c:	f04f 0600 	mov.w	r6, #0
 800e910:	46a9      	mov	r9, r5
 800e912:	46b2      	mov	sl, r6
 800e914:	eb19 0309 	adds.w	r3, r9, r9
 800e918:	eb4a 040a 	adc.w	r4, sl, sl
 800e91c:	4699      	mov	r9, r3
 800e91e:	46a2      	mov	sl, r4
 800e920:	eb19 0905 	adds.w	r9, r9, r5
 800e924:	eb4a 0a06 	adc.w	sl, sl, r6
 800e928:	f04f 0100 	mov.w	r1, #0
 800e92c:	f04f 0200 	mov.w	r2, #0
 800e930:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e934:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e938:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e93c:	4689      	mov	r9, r1
 800e93e:	4692      	mov	sl, r2
 800e940:	eb19 0005 	adds.w	r0, r9, r5
 800e944:	eb4a 0106 	adc.w	r1, sl, r6
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	685b      	ldr	r3, [r3, #4]
 800e94c:	461d      	mov	r5, r3
 800e94e:	f04f 0600 	mov.w	r6, #0
 800e952:	196b      	adds	r3, r5, r5
 800e954:	eb46 0406 	adc.w	r4, r6, r6
 800e958:	461a      	mov	r2, r3
 800e95a:	4623      	mov	r3, r4
 800e95c:	f7fd fc34 	bl	800c1c8 <__aeabi_uldivmod>
 800e960:	4603      	mov	r3, r0
 800e962:	460c      	mov	r4, r1
 800e964:	461a      	mov	r2, r3
 800e966:	4b0c      	ldr	r3, [pc, #48]	; (800e998 <UART_SetConfig+0x384>)
 800e968:	fba3 1302 	umull	r1, r3, r3, r2
 800e96c:	095b      	lsrs	r3, r3, #5
 800e96e:	2164      	movs	r1, #100	; 0x64
 800e970:	fb01 f303 	mul.w	r3, r1, r3
 800e974:	1ad3      	subs	r3, r2, r3
 800e976:	00db      	lsls	r3, r3, #3
 800e978:	3332      	adds	r3, #50	; 0x32
 800e97a:	4a07      	ldr	r2, [pc, #28]	; (800e998 <UART_SetConfig+0x384>)
 800e97c:	fba2 2303 	umull	r2, r3, r2, r3
 800e980:	095b      	lsrs	r3, r3, #5
 800e982:	f003 0207 	and.w	r2, r3, #7
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	4442      	add	r2, r8
 800e98c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800e98e:	e1b2      	b.n	800ecf6 <UART_SetConfig+0x6e2>
 800e990:	40011000 	.word	0x40011000
 800e994:	40011400 	.word	0x40011400
 800e998:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	4ad7      	ldr	r2, [pc, #860]	; (800ed00 <UART_SetConfig+0x6ec>)
 800e9a2:	4293      	cmp	r3, r2
 800e9a4:	d005      	beq.n	800e9b2 <UART_SetConfig+0x39e>
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	4ad6      	ldr	r2, [pc, #856]	; (800ed04 <UART_SetConfig+0x6f0>)
 800e9ac:	4293      	cmp	r3, r2
 800e9ae:	f040 80d1 	bne.w	800eb54 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800e9b2:	f7ff fc79 	bl	800e2a8 <HAL_RCC_GetPCLK2Freq>
 800e9b6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e9b8:	68bb      	ldr	r3, [r7, #8]
 800e9ba:	469a      	mov	sl, r3
 800e9bc:	f04f 0b00 	mov.w	fp, #0
 800e9c0:	46d0      	mov	r8, sl
 800e9c2:	46d9      	mov	r9, fp
 800e9c4:	eb18 0308 	adds.w	r3, r8, r8
 800e9c8:	eb49 0409 	adc.w	r4, r9, r9
 800e9cc:	4698      	mov	r8, r3
 800e9ce:	46a1      	mov	r9, r4
 800e9d0:	eb18 080a 	adds.w	r8, r8, sl
 800e9d4:	eb49 090b 	adc.w	r9, r9, fp
 800e9d8:	f04f 0100 	mov.w	r1, #0
 800e9dc:	f04f 0200 	mov.w	r2, #0
 800e9e0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e9e4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e9e8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e9ec:	4688      	mov	r8, r1
 800e9ee:	4691      	mov	r9, r2
 800e9f0:	eb1a 0508 	adds.w	r5, sl, r8
 800e9f4:	eb4b 0609 	adc.w	r6, fp, r9
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	685b      	ldr	r3, [r3, #4]
 800e9fc:	4619      	mov	r1, r3
 800e9fe:	f04f 0200 	mov.w	r2, #0
 800ea02:	f04f 0300 	mov.w	r3, #0
 800ea06:	f04f 0400 	mov.w	r4, #0
 800ea0a:	0094      	lsls	r4, r2, #2
 800ea0c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ea10:	008b      	lsls	r3, r1, #2
 800ea12:	461a      	mov	r2, r3
 800ea14:	4623      	mov	r3, r4
 800ea16:	4628      	mov	r0, r5
 800ea18:	4631      	mov	r1, r6
 800ea1a:	f7fd fbd5 	bl	800c1c8 <__aeabi_uldivmod>
 800ea1e:	4603      	mov	r3, r0
 800ea20:	460c      	mov	r4, r1
 800ea22:	461a      	mov	r2, r3
 800ea24:	4bb8      	ldr	r3, [pc, #736]	; (800ed08 <UART_SetConfig+0x6f4>)
 800ea26:	fba3 2302 	umull	r2, r3, r3, r2
 800ea2a:	095b      	lsrs	r3, r3, #5
 800ea2c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ea30:	68bb      	ldr	r3, [r7, #8]
 800ea32:	469b      	mov	fp, r3
 800ea34:	f04f 0c00 	mov.w	ip, #0
 800ea38:	46d9      	mov	r9, fp
 800ea3a:	46e2      	mov	sl, ip
 800ea3c:	eb19 0309 	adds.w	r3, r9, r9
 800ea40:	eb4a 040a 	adc.w	r4, sl, sl
 800ea44:	4699      	mov	r9, r3
 800ea46:	46a2      	mov	sl, r4
 800ea48:	eb19 090b 	adds.w	r9, r9, fp
 800ea4c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ea50:	f04f 0100 	mov.w	r1, #0
 800ea54:	f04f 0200 	mov.w	r2, #0
 800ea58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ea5c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ea60:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ea64:	4689      	mov	r9, r1
 800ea66:	4692      	mov	sl, r2
 800ea68:	eb1b 0509 	adds.w	r5, fp, r9
 800ea6c:	eb4c 060a 	adc.w	r6, ip, sl
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	685b      	ldr	r3, [r3, #4]
 800ea74:	4619      	mov	r1, r3
 800ea76:	f04f 0200 	mov.w	r2, #0
 800ea7a:	f04f 0300 	mov.w	r3, #0
 800ea7e:	f04f 0400 	mov.w	r4, #0
 800ea82:	0094      	lsls	r4, r2, #2
 800ea84:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ea88:	008b      	lsls	r3, r1, #2
 800ea8a:	461a      	mov	r2, r3
 800ea8c:	4623      	mov	r3, r4
 800ea8e:	4628      	mov	r0, r5
 800ea90:	4631      	mov	r1, r6
 800ea92:	f7fd fb99 	bl	800c1c8 <__aeabi_uldivmod>
 800ea96:	4603      	mov	r3, r0
 800ea98:	460c      	mov	r4, r1
 800ea9a:	461a      	mov	r2, r3
 800ea9c:	4b9a      	ldr	r3, [pc, #616]	; (800ed08 <UART_SetConfig+0x6f4>)
 800ea9e:	fba3 1302 	umull	r1, r3, r3, r2
 800eaa2:	095b      	lsrs	r3, r3, #5
 800eaa4:	2164      	movs	r1, #100	; 0x64
 800eaa6:	fb01 f303 	mul.w	r3, r1, r3
 800eaaa:	1ad3      	subs	r3, r2, r3
 800eaac:	011b      	lsls	r3, r3, #4
 800eaae:	3332      	adds	r3, #50	; 0x32
 800eab0:	4a95      	ldr	r2, [pc, #596]	; (800ed08 <UART_SetConfig+0x6f4>)
 800eab2:	fba2 2303 	umull	r2, r3, r2, r3
 800eab6:	095b      	lsrs	r3, r3, #5
 800eab8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800eabc:	4498      	add	r8, r3
 800eabe:	68bb      	ldr	r3, [r7, #8]
 800eac0:	469b      	mov	fp, r3
 800eac2:	f04f 0c00 	mov.w	ip, #0
 800eac6:	46d9      	mov	r9, fp
 800eac8:	46e2      	mov	sl, ip
 800eaca:	eb19 0309 	adds.w	r3, r9, r9
 800eace:	eb4a 040a 	adc.w	r4, sl, sl
 800ead2:	4699      	mov	r9, r3
 800ead4:	46a2      	mov	sl, r4
 800ead6:	eb19 090b 	adds.w	r9, r9, fp
 800eada:	eb4a 0a0c 	adc.w	sl, sl, ip
 800eade:	f04f 0100 	mov.w	r1, #0
 800eae2:	f04f 0200 	mov.w	r2, #0
 800eae6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800eaea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800eaee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800eaf2:	4689      	mov	r9, r1
 800eaf4:	4692      	mov	sl, r2
 800eaf6:	eb1b 0509 	adds.w	r5, fp, r9
 800eafa:	eb4c 060a 	adc.w	r6, ip, sl
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	685b      	ldr	r3, [r3, #4]
 800eb02:	4619      	mov	r1, r3
 800eb04:	f04f 0200 	mov.w	r2, #0
 800eb08:	f04f 0300 	mov.w	r3, #0
 800eb0c:	f04f 0400 	mov.w	r4, #0
 800eb10:	0094      	lsls	r4, r2, #2
 800eb12:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800eb16:	008b      	lsls	r3, r1, #2
 800eb18:	461a      	mov	r2, r3
 800eb1a:	4623      	mov	r3, r4
 800eb1c:	4628      	mov	r0, r5
 800eb1e:	4631      	mov	r1, r6
 800eb20:	f7fd fb52 	bl	800c1c8 <__aeabi_uldivmod>
 800eb24:	4603      	mov	r3, r0
 800eb26:	460c      	mov	r4, r1
 800eb28:	461a      	mov	r2, r3
 800eb2a:	4b77      	ldr	r3, [pc, #476]	; (800ed08 <UART_SetConfig+0x6f4>)
 800eb2c:	fba3 1302 	umull	r1, r3, r3, r2
 800eb30:	095b      	lsrs	r3, r3, #5
 800eb32:	2164      	movs	r1, #100	; 0x64
 800eb34:	fb01 f303 	mul.w	r3, r1, r3
 800eb38:	1ad3      	subs	r3, r2, r3
 800eb3a:	011b      	lsls	r3, r3, #4
 800eb3c:	3332      	adds	r3, #50	; 0x32
 800eb3e:	4a72      	ldr	r2, [pc, #456]	; (800ed08 <UART_SetConfig+0x6f4>)
 800eb40:	fba2 2303 	umull	r2, r3, r2, r3
 800eb44:	095b      	lsrs	r3, r3, #5
 800eb46:	f003 020f 	and.w	r2, r3, #15
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	4442      	add	r2, r8
 800eb50:	609a      	str	r2, [r3, #8]
 800eb52:	e0d0      	b.n	800ecf6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800eb54:	f7ff fb94 	bl	800e280 <HAL_RCC_GetPCLK1Freq>
 800eb58:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800eb5a:	68bb      	ldr	r3, [r7, #8]
 800eb5c:	469a      	mov	sl, r3
 800eb5e:	f04f 0b00 	mov.w	fp, #0
 800eb62:	46d0      	mov	r8, sl
 800eb64:	46d9      	mov	r9, fp
 800eb66:	eb18 0308 	adds.w	r3, r8, r8
 800eb6a:	eb49 0409 	adc.w	r4, r9, r9
 800eb6e:	4698      	mov	r8, r3
 800eb70:	46a1      	mov	r9, r4
 800eb72:	eb18 080a 	adds.w	r8, r8, sl
 800eb76:	eb49 090b 	adc.w	r9, r9, fp
 800eb7a:	f04f 0100 	mov.w	r1, #0
 800eb7e:	f04f 0200 	mov.w	r2, #0
 800eb82:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800eb86:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800eb8a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800eb8e:	4688      	mov	r8, r1
 800eb90:	4691      	mov	r9, r2
 800eb92:	eb1a 0508 	adds.w	r5, sl, r8
 800eb96:	eb4b 0609 	adc.w	r6, fp, r9
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	685b      	ldr	r3, [r3, #4]
 800eb9e:	4619      	mov	r1, r3
 800eba0:	f04f 0200 	mov.w	r2, #0
 800eba4:	f04f 0300 	mov.w	r3, #0
 800eba8:	f04f 0400 	mov.w	r4, #0
 800ebac:	0094      	lsls	r4, r2, #2
 800ebae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ebb2:	008b      	lsls	r3, r1, #2
 800ebb4:	461a      	mov	r2, r3
 800ebb6:	4623      	mov	r3, r4
 800ebb8:	4628      	mov	r0, r5
 800ebba:	4631      	mov	r1, r6
 800ebbc:	f7fd fb04 	bl	800c1c8 <__aeabi_uldivmod>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	460c      	mov	r4, r1
 800ebc4:	461a      	mov	r2, r3
 800ebc6:	4b50      	ldr	r3, [pc, #320]	; (800ed08 <UART_SetConfig+0x6f4>)
 800ebc8:	fba3 2302 	umull	r2, r3, r3, r2
 800ebcc:	095b      	lsrs	r3, r3, #5
 800ebce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ebd2:	68bb      	ldr	r3, [r7, #8]
 800ebd4:	469b      	mov	fp, r3
 800ebd6:	f04f 0c00 	mov.w	ip, #0
 800ebda:	46d9      	mov	r9, fp
 800ebdc:	46e2      	mov	sl, ip
 800ebde:	eb19 0309 	adds.w	r3, r9, r9
 800ebe2:	eb4a 040a 	adc.w	r4, sl, sl
 800ebe6:	4699      	mov	r9, r3
 800ebe8:	46a2      	mov	sl, r4
 800ebea:	eb19 090b 	adds.w	r9, r9, fp
 800ebee:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ebf2:	f04f 0100 	mov.w	r1, #0
 800ebf6:	f04f 0200 	mov.w	r2, #0
 800ebfa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ebfe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ec02:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ec06:	4689      	mov	r9, r1
 800ec08:	4692      	mov	sl, r2
 800ec0a:	eb1b 0509 	adds.w	r5, fp, r9
 800ec0e:	eb4c 060a 	adc.w	r6, ip, sl
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	685b      	ldr	r3, [r3, #4]
 800ec16:	4619      	mov	r1, r3
 800ec18:	f04f 0200 	mov.w	r2, #0
 800ec1c:	f04f 0300 	mov.w	r3, #0
 800ec20:	f04f 0400 	mov.w	r4, #0
 800ec24:	0094      	lsls	r4, r2, #2
 800ec26:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ec2a:	008b      	lsls	r3, r1, #2
 800ec2c:	461a      	mov	r2, r3
 800ec2e:	4623      	mov	r3, r4
 800ec30:	4628      	mov	r0, r5
 800ec32:	4631      	mov	r1, r6
 800ec34:	f7fd fac8 	bl	800c1c8 <__aeabi_uldivmod>
 800ec38:	4603      	mov	r3, r0
 800ec3a:	460c      	mov	r4, r1
 800ec3c:	461a      	mov	r2, r3
 800ec3e:	4b32      	ldr	r3, [pc, #200]	; (800ed08 <UART_SetConfig+0x6f4>)
 800ec40:	fba3 1302 	umull	r1, r3, r3, r2
 800ec44:	095b      	lsrs	r3, r3, #5
 800ec46:	2164      	movs	r1, #100	; 0x64
 800ec48:	fb01 f303 	mul.w	r3, r1, r3
 800ec4c:	1ad3      	subs	r3, r2, r3
 800ec4e:	011b      	lsls	r3, r3, #4
 800ec50:	3332      	adds	r3, #50	; 0x32
 800ec52:	4a2d      	ldr	r2, [pc, #180]	; (800ed08 <UART_SetConfig+0x6f4>)
 800ec54:	fba2 2303 	umull	r2, r3, r2, r3
 800ec58:	095b      	lsrs	r3, r3, #5
 800ec5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ec5e:	4498      	add	r8, r3
 800ec60:	68bb      	ldr	r3, [r7, #8]
 800ec62:	469b      	mov	fp, r3
 800ec64:	f04f 0c00 	mov.w	ip, #0
 800ec68:	46d9      	mov	r9, fp
 800ec6a:	46e2      	mov	sl, ip
 800ec6c:	eb19 0309 	adds.w	r3, r9, r9
 800ec70:	eb4a 040a 	adc.w	r4, sl, sl
 800ec74:	4699      	mov	r9, r3
 800ec76:	46a2      	mov	sl, r4
 800ec78:	eb19 090b 	adds.w	r9, r9, fp
 800ec7c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ec80:	f04f 0100 	mov.w	r1, #0
 800ec84:	f04f 0200 	mov.w	r2, #0
 800ec88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ec8c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ec90:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ec94:	4689      	mov	r9, r1
 800ec96:	4692      	mov	sl, r2
 800ec98:	eb1b 0509 	adds.w	r5, fp, r9
 800ec9c:	eb4c 060a 	adc.w	r6, ip, sl
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	685b      	ldr	r3, [r3, #4]
 800eca4:	4619      	mov	r1, r3
 800eca6:	f04f 0200 	mov.w	r2, #0
 800ecaa:	f04f 0300 	mov.w	r3, #0
 800ecae:	f04f 0400 	mov.w	r4, #0
 800ecb2:	0094      	lsls	r4, r2, #2
 800ecb4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ecb8:	008b      	lsls	r3, r1, #2
 800ecba:	461a      	mov	r2, r3
 800ecbc:	4623      	mov	r3, r4
 800ecbe:	4628      	mov	r0, r5
 800ecc0:	4631      	mov	r1, r6
 800ecc2:	f7fd fa81 	bl	800c1c8 <__aeabi_uldivmod>
 800ecc6:	4603      	mov	r3, r0
 800ecc8:	460c      	mov	r4, r1
 800ecca:	461a      	mov	r2, r3
 800eccc:	4b0e      	ldr	r3, [pc, #56]	; (800ed08 <UART_SetConfig+0x6f4>)
 800ecce:	fba3 1302 	umull	r1, r3, r3, r2
 800ecd2:	095b      	lsrs	r3, r3, #5
 800ecd4:	2164      	movs	r1, #100	; 0x64
 800ecd6:	fb01 f303 	mul.w	r3, r1, r3
 800ecda:	1ad3      	subs	r3, r2, r3
 800ecdc:	011b      	lsls	r3, r3, #4
 800ecde:	3332      	adds	r3, #50	; 0x32
 800ece0:	4a09      	ldr	r2, [pc, #36]	; (800ed08 <UART_SetConfig+0x6f4>)
 800ece2:	fba2 2303 	umull	r2, r3, r2, r3
 800ece6:	095b      	lsrs	r3, r3, #5
 800ece8:	f003 020f 	and.w	r2, r3, #15
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	4442      	add	r2, r8
 800ecf2:	609a      	str	r2, [r3, #8]
}
 800ecf4:	e7ff      	b.n	800ecf6 <UART_SetConfig+0x6e2>
 800ecf6:	bf00      	nop
 800ecf8:	3714      	adds	r7, #20
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed00:	40011000 	.word	0x40011000
 800ed04:	40011400 	.word	0x40011400
 800ed08:	51eb851f 	.word	0x51eb851f

0800ed0c <__libc_init_array>:
 800ed0c:	b570      	push	{r4, r5, r6, lr}
 800ed0e:	4e0d      	ldr	r6, [pc, #52]	; (800ed44 <__libc_init_array+0x38>)
 800ed10:	4c0d      	ldr	r4, [pc, #52]	; (800ed48 <__libc_init_array+0x3c>)
 800ed12:	1ba4      	subs	r4, r4, r6
 800ed14:	10a4      	asrs	r4, r4, #2
 800ed16:	2500      	movs	r5, #0
 800ed18:	42a5      	cmp	r5, r4
 800ed1a:	d109      	bne.n	800ed30 <__libc_init_array+0x24>
 800ed1c:	4e0b      	ldr	r6, [pc, #44]	; (800ed4c <__libc_init_array+0x40>)
 800ed1e:	4c0c      	ldr	r4, [pc, #48]	; (800ed50 <__libc_init_array+0x44>)
 800ed20:	f000 f82c 	bl	800ed7c <_init>
 800ed24:	1ba4      	subs	r4, r4, r6
 800ed26:	10a4      	asrs	r4, r4, #2
 800ed28:	2500      	movs	r5, #0
 800ed2a:	42a5      	cmp	r5, r4
 800ed2c:	d105      	bne.n	800ed3a <__libc_init_array+0x2e>
 800ed2e:	bd70      	pop	{r4, r5, r6, pc}
 800ed30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ed34:	4798      	blx	r3
 800ed36:	3501      	adds	r5, #1
 800ed38:	e7ee      	b.n	800ed18 <__libc_init_array+0xc>
 800ed3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ed3e:	4798      	blx	r3
 800ed40:	3501      	adds	r5, #1
 800ed42:	e7f2      	b.n	800ed2a <__libc_init_array+0x1e>
 800ed44:	0800edbc 	.word	0x0800edbc
 800ed48:	0800edbc 	.word	0x0800edbc
 800ed4c:	0800edbc 	.word	0x0800edbc
 800ed50:	0800edc0 	.word	0x0800edc0

0800ed54 <memcpy>:
 800ed54:	b510      	push	{r4, lr}
 800ed56:	1e43      	subs	r3, r0, #1
 800ed58:	440a      	add	r2, r1
 800ed5a:	4291      	cmp	r1, r2
 800ed5c:	d100      	bne.n	800ed60 <memcpy+0xc>
 800ed5e:	bd10      	pop	{r4, pc}
 800ed60:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed64:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ed68:	e7f7      	b.n	800ed5a <memcpy+0x6>

0800ed6a <memset>:
 800ed6a:	4402      	add	r2, r0
 800ed6c:	4603      	mov	r3, r0
 800ed6e:	4293      	cmp	r3, r2
 800ed70:	d100      	bne.n	800ed74 <memset+0xa>
 800ed72:	4770      	bx	lr
 800ed74:	f803 1b01 	strb.w	r1, [r3], #1
 800ed78:	e7f9      	b.n	800ed6e <memset+0x4>
	...

0800ed7c <_init>:
 800ed7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed7e:	bf00      	nop
 800ed80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed82:	bc08      	pop	{r3}
 800ed84:	469e      	mov	lr, r3
 800ed86:	4770      	bx	lr

0800ed88 <_fini>:
 800ed88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed8a:	bf00      	nop
 800ed8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed8e:	bc08      	pop	{r3}
 800ed90:	469e      	mov	lr, r3
 800ed92:	4770      	bx	lr
