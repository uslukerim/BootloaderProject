
BOOTMODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003450  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080035d8  080035d8  000135d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035f8  080035f8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080035f8  080035f8  000135f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003600  08003600  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003600  08003600  00013600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003604  08003604  00013604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003608  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000720  20000010  08003618  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000730  08003618  00020730  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b75  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001deb  00000000  00000000  00029bb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000870  00000000  00000000  0002b9a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000778  00000000  00000000  0002c210  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020e7f  00000000  00000000  0002c988  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000825d  00000000  00000000  0004d807  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c239a  00000000  00000000  00055a64  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00117dfe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020b0  00000000  00000000  00117e7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080035c0 	.word	0x080035c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080035c0 	.word	0x080035c0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <FlashErase>:
 *      Author: kerim
 */
#include "FlashManager.h"

void FlashErase(uint8_t FromTheSegment,uint8_t SectorNB)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	460a      	mov	r2, r1
 80004d2:	71fb      	strb	r3, [r7, #7]
 80004d4:	4613      	mov	r3, r2
 80004d6:	71bb      	strb	r3, [r7, #6]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	HAL_FLASH_Unlock();
 80004d8:	f001 f9e2 	bl	80018a0 <HAL_FLASH_Unlock>
	uint32_t SectorError = 0;
 80004dc:	2300      	movs	r3, #0
 80004de:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 80004e0:	4b0e      	ldr	r3, [pc, #56]	; (800051c <FlashErase+0x54>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80004e6:	4b0d      	ldr	r3, [pc, #52]	; (800051c <FlashErase+0x54>)
 80004e8:	2202      	movs	r2, #2
 80004ea:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector = FromTheSegment;
 80004ec:	79fb      	ldrb	r3, [r7, #7]
 80004ee:	4a0b      	ldr	r2, [pc, #44]	; (800051c <FlashErase+0x54>)
 80004f0:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbSectors = SectorNB;
 80004f2:	79bb      	ldrb	r3, [r7, #6]
 80004f4:	4a09      	ldr	r2, [pc, #36]	; (800051c <FlashErase+0x54>)
 80004f6:	60d3      	str	r3, [r2, #12]

	if(HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK)
 80004f8:	f107 030c 	add.w	r3, r7, #12
 80004fc:	4619      	mov	r1, r3
 80004fe:	4807      	ldr	r0, [pc, #28]	; (800051c <FlashErase+0x54>)
 8000500:	f001 fb2e 	bl	8001b60 <HAL_FLASHEx_Erase>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <FlashErase+0x46>
		     */
		     /*
		       FLASH_ErrorTypeDef errorcode = HAL_FLASH_GetError();
		     */

		Error_Handler();
 800050a:	f000 fb2d 	bl	8000b68 <Error_Handler>
	}
	HAL_FLASH_Lock();
 800050e:	f001 f9e9 	bl	80018e4 <HAL_FLASH_Lock>
}
 8000512:	bf00      	nop
 8000514:	3710      	adds	r7, #16
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	2000002c 	.word	0x2000002c

08000520 <WriteProgram>:


void WriteProgram(uint32_t AppADDR,uint32_t Program_Data)
{
 8000520:	b590      	push	{r4, r7, lr}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
 8000528:	6039      	str	r1, [r7, #0]
	uint32_t addr;
	if(AppADDR==0){
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d10d      	bne.n	800054c <WriteProgram+0x2c>
		HAL_FLASH_Unlock();
 8000530:	f001 f9b6 	bl	80018a0 <HAL_FLASH_Unlock>
		addr=APPADDRESS;
 8000534:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <WriteProgram+0x54>)
 8000536:	60fb      	str	r3, [r7, #12]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,addr, Program_Data);
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	f04f 0400 	mov.w	r4, #0
 800053e:	461a      	mov	r2, r3
 8000540:	4623      	mov	r3, r4
 8000542:	68f9      	ldr	r1, [r7, #12]
 8000544:	2002      	movs	r0, #2
 8000546:	f001 f957 	bl	80017f8 <HAL_FLASH_Program>

	}else{
		addr=APPADDRESS+AppADDR*4;
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,addr, Program_Data);
	}
}
 800054a:	e00f      	b.n	800056c <WriteProgram+0x4c>
		addr=APPADDRESS+AppADDR*4;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8000552:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8000556:	009b      	lsls	r3, r3, #2
 8000558:	60fb      	str	r3, [r7, #12]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,addr, Program_Data);
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	f04f 0400 	mov.w	r4, #0
 8000560:	461a      	mov	r2, r3
 8000562:	4623      	mov	r3, r4
 8000564:	68f9      	ldr	r1, [r7, #12]
 8000566:	2002      	movs	r0, #2
 8000568:	f001 f946 	bl	80017f8 <HAL_FLASH_Program>
}
 800056c:	bf00      	nop
 800056e:	3714      	adds	r7, #20
 8000570:	46bd      	mov	sp, r7
 8000572:	bd90      	pop	{r4, r7, pc}
 8000574:	0800c000 	.word	0x0800c000

08000578 <JumpTo>:
void JumpTo(uint32_t AppADDR){
 8000578:	b580      	push	{r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	HAL_DeInit();
 8000580:	f000 fc36 	bl	8000df0 <HAL_DeInit>
	pFunction Jump_To_Application = *( (pFunction*) (AppADDR + 4) );
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	3304      	adds	r3, #4
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	617b      	str	r3, [r7, #20]
 800058c:	2300      	movs	r3, #0
 800058e:	60fb      	str	r3, [r7, #12]
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	f383 8814 	msr	CONTROL, r3
	__set_CONTROL(0);
	SysTick->CTRL = 0; //disable SysTick
 8000596:	4b09      	ldr	r3, [pc, #36]	; (80005bc <JumpTo+0x44>)
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
	SCB->VTOR = AppADDR;
 800059c:	4a08      	ldr	r2, [pc, #32]	; (80005c0 <JumpTo+0x48>)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	6093      	str	r3, [r2, #8]
	__set_MSP( *( (uint32_t*) AppADDR ) );
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80005a8:	693b      	ldr	r3, [r7, #16]
 80005aa:	f383 8808 	msr	MSP, r3
	Jump_To_Application();
 80005ae:	697b      	ldr	r3, [r7, #20]
 80005b0:	4798      	blx	r3
}
 80005b2:	bf00      	nop
 80005b4:	3718      	adds	r7, #24
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	e000e010 	.word	0xe000e010
 80005c0:	e000ed00 	.word	0xe000ed00

080005c4 <HAL_UART_RxCpltCallback>:

#include "circularMemory.h"

/*********************************************************************************************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)//UART üzerinden verilerin alımında kullanılır
{
 80005c4:	b590      	push	{r4, r7, lr}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]

    TState=HAL_UART_Receive_DMA(&huart4, UART1_rxBuffer, 15);
 80005cc:	220f      	movs	r2, #15
 80005ce:	491c      	ldr	r1, [pc, #112]	; (8000640 <HAL_UART_RxCpltCallback+0x7c>)
 80005d0:	481c      	ldr	r0, [pc, #112]	; (8000644 <HAL_UART_RxCpltCallback+0x80>)
 80005d2:	f002 faa3 	bl	8002b1c <HAL_UART_Receive_DMA>
 80005d6:	4603      	mov	r3, r0
 80005d8:	461a      	mov	r2, r3
 80005da:	4b1b      	ldr	r3, [pc, #108]	; (8000648 <HAL_UART_RxCpltCallback+0x84>)
 80005dc:	701a      	strb	r2, [r3, #0]
	memcpy(&parser,&UART1_rxBuffer,sizeof(parser));
 80005de:	4b1b      	ldr	r3, [pc, #108]	; (800064c <HAL_UART_RxCpltCallback+0x88>)
 80005e0:	4a17      	ldr	r2, [pc, #92]	; (8000640 <HAL_UART_RxCpltCallback+0x7c>)
 80005e2:	6814      	ldr	r4, [r2, #0]
 80005e4:	6850      	ldr	r0, [r2, #4]
 80005e6:	6891      	ldr	r1, [r2, #8]
 80005e8:	601c      	str	r4, [r3, #0]
 80005ea:	6058      	str	r0, [r3, #4]
 80005ec:	6099      	str	r1, [r3, #8]
 80005ee:	8991      	ldrh	r1, [r2, #12]
 80005f0:	7b92      	ldrb	r2, [r2, #14]
 80005f2:	8199      	strh	r1, [r3, #12]
 80005f4:	739a      	strb	r2, [r3, #14]
    if(UART1_rxBuffer[0]==START_Condition && UART1_rxBuffer[14]==STOP_Condition){
 80005f6:	4b12      	ldr	r3, [pc, #72]	; (8000640 <HAL_UART_RxCpltCallback+0x7c>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2ba3      	cmp	r3, #163	; 0xa3
 80005fc:	d114      	bne.n	8000628 <HAL_UART_RxCpltCallback+0x64>
 80005fe:	4b10      	ldr	r3, [pc, #64]	; (8000640 <HAL_UART_RxCpltCallback+0x7c>)
 8000600:	7b9b      	ldrb	r3, [r3, #14]
 8000602:	2b25      	cmp	r3, #37	; 0x25
 8000604:	d110      	bne.n	8000628 <HAL_UART_RxCpltCallback+0x64>
    	memcpy(&Mypacket,&UART1_rxBuffer,sizeof(parser));
 8000606:	4b12      	ldr	r3, [pc, #72]	; (8000650 <HAL_UART_RxCpltCallback+0x8c>)
 8000608:	4a0d      	ldr	r2, [pc, #52]	; (8000640 <HAL_UART_RxCpltCallback+0x7c>)
 800060a:	6814      	ldr	r4, [r2, #0]
 800060c:	6850      	ldr	r0, [r2, #4]
 800060e:	6891      	ldr	r1, [r2, #8]
 8000610:	601c      	str	r4, [r3, #0]
 8000612:	6058      	str	r0, [r3, #4]
 8000614:	6099      	str	r1, [r3, #8]
 8000616:	8991      	ldrh	r1, [r2, #12]
 8000618:	7b92      	ldrb	r2, [r2, #14]
 800061a:	8199      	strh	r1, [r3, #12]
 800061c:	739a      	strb	r2, [r3, #14]
    	CBufWrite(&CBuf,&Mypacket);
 800061e:	490c      	ldr	r1, [pc, #48]	; (8000650 <HAL_UART_RxCpltCallback+0x8c>)
 8000620:	480c      	ldr	r0, [pc, #48]	; (8000654 <HAL_UART_RxCpltCallback+0x90>)
 8000622:	f000 f915 	bl	8000850 <CBufWrite>
 8000626:	e006      	b.n	8000636 <HAL_UART_RxCpltCallback+0x72>
    }else
    {
    	CBuf.WrongPacketCount++;
 8000628:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <HAL_UART_RxCpltCallback+0x90>)
 800062a:	88db      	ldrh	r3, [r3, #6]
 800062c:	b29b      	uxth	r3, r3
 800062e:	3301      	adds	r3, #1
 8000630:	b29a      	uxth	r2, r3
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <HAL_UART_RxCpltCallback+0x90>)
 8000634:	80da      	strh	r2, [r3, #6]
    }


}
 8000636:	bf00      	nop
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	bd90      	pop	{r4, r7, pc}
 800063e:	bf00      	nop
 8000640:	200000c4 	.word	0x200000c4
 8000644:	200006bc 	.word	0x200006bc
 8000648:	200000bf 	.word	0x200000bf
 800064c:	200000b0 	.word	0x200000b0
 8000650:	200006fc 	.word	0x200006fc
 8000654:	200000d4 	.word	0x200000d4

08000658 <UARTParserInit>:
/**********************************************************************************************************************/
parser_status UARTParserInit(){
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
	parser_status state;
	FlashErased=0;
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <UARTParserInit+0x38>)
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
	CBufINIT(&CBuf);
 8000664:	480b      	ldr	r0, [pc, #44]	; (8000694 <UARTParserInit+0x3c>)
 8000666:	f000 f8a7 	bl	80007b8 <CBufINIT>
    if(HAL_UART_Receive_DMA (&huart4, UART1_rxBuffer, 15)==HAL_OK){
 800066a:	220f      	movs	r2, #15
 800066c:	490a      	ldr	r1, [pc, #40]	; (8000698 <UARTParserInit+0x40>)
 800066e:	480b      	ldr	r0, [pc, #44]	; (800069c <UARTParserInit+0x44>)
 8000670:	f002 fa54 	bl	8002b1c <HAL_UART_Receive_DMA>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d102      	bne.n	8000680 <UARTParserInit+0x28>
    	state=INITSUCCESS;
 800067a:	2300      	movs	r3, #0
 800067c:	71fb      	strb	r3, [r7, #7]
 800067e:	e001      	b.n	8000684 <UARTParserInit+0x2c>
    }else{
    	state=INITERROR;
 8000680:	2301      	movs	r3, #1
 8000682:	71fb      	strb	r3, [r7, #7]
    }
    return state;
 8000684:	79fb      	ldrb	r3, [r7, #7]

}
 8000686:	4618      	mov	r0, r3
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	200000d3 	.word	0x200000d3
 8000694:	200000d4 	.word	0x200000d4
 8000698:	200000c4 	.word	0x200000c4
 800069c:	200006bc 	.word	0x200006bc

080006a0 <TransmitCommandVia_UART>:



/**********************************************************************************************************************/

parser_status TransmitCommandVia_UART(MypacketTypedef *transmit){
 80006a0:	b590      	push	{r4, r7, lr}
 80006a2:	b087      	sub	sp, #28
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	parser_status state = Transmit_ERROR;
 80006a8:	230a      	movs	r3, #10
 80006aa:	75fb      	strb	r3, [r7, #23]
	uint8_t commands[15];
	memcpy(&commands,transmit,15);
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	f107 0308 	add.w	r3, r7, #8
 80006b2:	4614      	mov	r4, r2
 80006b4:	6820      	ldr	r0, [r4, #0]
 80006b6:	6861      	ldr	r1, [r4, #4]
 80006b8:	68a2      	ldr	r2, [r4, #8]
 80006ba:	c307      	stmia	r3!, {r0, r1, r2}
 80006bc:	89a2      	ldrh	r2, [r4, #12]
 80006be:	7ba1      	ldrb	r1, [r4, #14]
 80006c0:	801a      	strh	r2, [r3, #0]
 80006c2:	460a      	mov	r2, r1
 80006c4:	709a      	strb	r2, [r3, #2]
	if(HAL_UART_Transmit(&huart4, commands, 15,1000)==HAL_OK){
 80006c6:	f107 0108 	add.w	r1, r7, #8
 80006ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ce:	220f      	movs	r2, #15
 80006d0:	4807      	ldr	r0, [pc, #28]	; (80006f0 <TransmitCommandVia_UART+0x50>)
 80006d2:	f002 f98a 	bl	80029ea <HAL_UART_Transmit>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d102      	bne.n	80006e2 <TransmitCommandVia_UART+0x42>
		state=transmitCommands;
 80006dc:	2308      	movs	r3, #8
 80006de:	75fb      	strb	r3, [r7, #23]
 80006e0:	e001      	b.n	80006e6 <TransmitCommandVia_UART+0x46>
	}else{
		state=Transmit_ERROR;
 80006e2:	230a      	movs	r3, #10
 80006e4:	75fb      	strb	r3, [r7, #23]

	}

	return state;
 80006e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	371c      	adds	r7, #28
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd90      	pop	{r4, r7, pc}
 80006f0:	200006bc 	.word	0x200006bc

080006f4 <Commands_Processing>:



parser_status Commands_Processing(){//Gelen verilerin işlenmesi. Bu fonksiyon farklı kombinasyonlara göre özelleştirilebilir
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0

	parser_status state = waiting_data;
 80006fa:	2309      	movs	r3, #9
 80006fc:	73fb      	strb	r3, [r7, #15]
	//uint32_t addr;
	MypacketTypedef TRPack;
	TRPack.SOF=START_Condition;
 80006fe:	23a3      	movs	r3, #163	; 0xa3
 8000700:	703b      	strb	r3, [r7, #0]
	TRPack.commandNO=EraseFlash;
 8000702:	2300      	movs	r3, #0
 8000704:	f043 0302 	orr.w	r3, r3, #2
 8000708:	707b      	strb	r3, [r7, #1]
 800070a:	2300      	movs	r3, #0
 800070c:	70bb      	strb	r3, [r7, #2]
	TRPack.slaveNO=1;
 800070e:	2301      	movs	r3, #1
 8000710:	70fb      	strb	r3, [r7, #3]
	TRPack.commandAdress=0x02;
 8000712:	2302      	movs	r3, #2
 8000714:	607b      	str	r3, [r7, #4]
	TRPack.datatype=1;
 8000716:	2301      	movs	r3, #1
 8000718:	727b      	strb	r3, [r7, #9]
	TRPack.command=1;
 800071a:	2300      	movs	r3, #0
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	817b      	strh	r3, [r7, #10]
 8000722:	2300      	movs	r3, #0
 8000724:	81bb      	strh	r3, [r7, #12]
	TRPack.R_W=0;
 8000726:	2300      	movs	r3, #0
 8000728:	723b      	strb	r3, [r7, #8]
	TRPack.EOFF=STOP_Condition;
 800072a:	2325      	movs	r3, #37	; 0x25
 800072c:	73bb      	strb	r3, [r7, #14]
		while(!CBufRead(&CBuf,&parser)){
 800072e:	e02e      	b.n	800078e <Commands_Processing+0x9a>
			state=process_complated;
 8000730:	2307      	movs	r3, #7
 8000732:	73fb      	strb	r3, [r7, #15]
			switch(parser.commandNO)
 8000734:	4b1c      	ldr	r3, [pc, #112]	; (80007a8 <Commands_Processing+0xb4>)
 8000736:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800073a:	b29b      	uxth	r3, r3
 800073c:	2b01      	cmp	r3, #1
 800073e:	d013      	beq.n	8000768 <Commands_Processing+0x74>
 8000740:	2b03      	cmp	r3, #3
 8000742:	d01b      	beq.n	800077c <Commands_Processing+0x88>
 8000744:	2b00      	cmp	r3, #0
 8000746:	d11f      	bne.n	8000788 <Commands_Processing+0x94>
			{
			case BootCommand:
				if(!FlashErased){
 8000748:	4b18      	ldr	r3, [pc, #96]	; (80007ac <Commands_Processing+0xb8>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d11e      	bne.n	800078e <Commands_Processing+0x9a>
					FlashErase(3,9);//Erase flash from  Segment 2 to Segment 11
 8000750:	2109      	movs	r1, #9
 8000752:	2003      	movs	r0, #3
 8000754:	f7ff feb8 	bl	80004c8 <FlashErase>
					FlashErased=1;
 8000758:	4b14      	ldr	r3, [pc, #80]	; (80007ac <Commands_Processing+0xb8>)
 800075a:	2201      	movs	r2, #1
 800075c:	701a      	strb	r2, [r3, #0]
					TransmitCommandVia_UART(&TRPack);
 800075e:	463b      	mov	r3, r7
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff ff9d 	bl	80006a0 <TransmitCommandVia_UART>

				}
				break;
 8000766:	e012      	b.n	800078e <Commands_Processing+0x9a>
			case UPDATESW:
				WriteProgram(parser.commandAdress, parser.command);
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <Commands_Processing+0xb4>)
 800076a:	685a      	ldr	r2, [r3, #4]
 800076c:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <Commands_Processing+0xb4>)
 800076e:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8000772:	4619      	mov	r1, r3
 8000774:	4610      	mov	r0, r2
 8000776:	f7ff fed3 	bl	8000520 <WriteProgram>
				break;
 800077a:	e008      	b.n	800078e <Commands_Processing+0x9a>
			case JumpUserAPP:
				HAL_FLASH_Lock();
 800077c:	f001 f8b2 	bl	80018e4 <HAL_FLASH_Lock>
				JumpTo(APPADDRESS);
 8000780:	480b      	ldr	r0, [pc, #44]	; (80007b0 <Commands_Processing+0xbc>)
 8000782:	f7ff fef9 	bl	8000578 <JumpTo>
				break;
 8000786:	e002      	b.n	800078e <Commands_Processing+0x9a>
				/*
				 *
				 *
				 */
			default:
				state=CMDDoesNotMatch;
 8000788:	2302      	movs	r3, #2
 800078a:	73fb      	strb	r3, [r7, #15]
				break;
 800078c:	bf00      	nop
		while(!CBufRead(&CBuf,&parser)){
 800078e:	4906      	ldr	r1, [pc, #24]	; (80007a8 <Commands_Processing+0xb4>)
 8000790:	4808      	ldr	r0, [pc, #32]	; (80007b4 <Commands_Processing+0xc0>)
 8000792:	f000 f81d 	bl	80007d0 <CBufRead>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d0c9      	beq.n	8000730 <Commands_Processing+0x3c>
			}
		}
		return state;
 800079c:	7bfb      	ldrb	r3, [r7, #15]
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200000b0 	.word	0x200000b0
 80007ac:	200000d3 	.word	0x200000d3
 80007b0:	0800c000 	.word	0x0800c000
 80007b4:	200000d4 	.word	0x200000d4

080007b8 <CBufINIT>:
 *      Author: kerim
 */

#include "circularMemory.h"

void CBufINIT(MypacketCBufTypedef*MyCBuf){
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]

memset(&MyCBuf,0,sizeof(MyCBuf));
 80007c0:	2300      	movs	r3, #0
 80007c2:	607b      	str	r3, [r7, #4]

}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <CBufRead>:

int CBufGetHead(MypacketCBufTypedef*MyCBuf){
	return MyCBuf->head;
}

int CBufRead(MypacketCBufTypedef*MyCBuf,MypacketTypedef*MyPacket){
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]


	if(MyCBuf->buffer[MyCBuf->tail].SOF!=0){
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	889b      	ldrh	r3, [r3, #4]
 80007de:	b29b      	uxth	r3, r3
 80007e0:	4619      	mov	r1, r3
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	460b      	mov	r3, r1
 80007e6:	011b      	lsls	r3, r3, #4
 80007e8:	1a5b      	subs	r3, r3, r1
 80007ea:	4413      	add	r3, r2
 80007ec:	330a      	adds	r3, #10
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d028      	beq.n	8000846 <CBufRead+0x76>
		memcpy(&MyPacket,&MyCBuf->buffer[MyCBuf->tail],sizeof(MyPacket));
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	889b      	ldrh	r3, [r3, #4]
 80007f8:	b29b      	uxth	r3, r3
 80007fa:	461a      	mov	r2, r3
 80007fc:	4613      	mov	r3, r2
 80007fe:	011b      	lsls	r3, r3, #4
 8000800:	1a9b      	subs	r3, r3, r2
 8000802:	3308      	adds	r3, #8
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	4413      	add	r3, r2
 8000808:	3302      	adds	r3, #2
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	603b      	str	r3, [r7, #0]
		memset(&MyCBuf->buffer[MyCBuf->tail],0,sizeof(MyCBuf->buffer[MyCBuf->tail]));
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	889b      	ldrh	r3, [r3, #4]
 8000812:	b29b      	uxth	r3, r3
 8000814:	461a      	mov	r2, r3
 8000816:	4613      	mov	r3, r2
 8000818:	011b      	lsls	r3, r3, #4
 800081a:	1a9b      	subs	r3, r3, r2
 800081c:	3308      	adds	r3, #8
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	4413      	add	r3, r2
 8000822:	3302      	adds	r3, #2
 8000824:	220f      	movs	r2, #15
 8000826:	2100      	movs	r1, #0
 8000828:	4618      	mov	r0, r3
 800082a:	f002 fec0 	bl	80035ae <memset>
		MyCBuf->tail++;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	889b      	ldrh	r3, [r3, #4]
 8000832:	b29b      	uxth	r3, r3
 8000834:	3301      	adds	r3, #1
 8000836:	b29a      	uxth	r2, r3
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	809a      	strh	r2, [r3, #4]
		CircularIndexCTRL(MyCBuf);
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f000 f877 	bl	8000930 <CircularIndexCTRL>
		return 0;
 8000842:	2300      	movs	r3, #0
 8000844:	e000      	b.n	8000848 <CBufRead+0x78>
	}else{
		return 1;
 8000846:	2301      	movs	r3, #1
		memset(&MyCBuf->buffer[MyCBuf->tail],0,sizeof(MyCBuf->buffer[MyCBuf->tail]));
		MyCBuf->tail++;
		return 0;
	}*/

}
 8000848:	4618      	mov	r0, r3
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <CBufWrite>:
int CBufWrite(MypacketCBufTypedef*MyCBuf,MypacketTypedef*MyPacket){
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]

int state=0;
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]



	if(MyCBuf->buffer[MyCBuf->head].SOF==0){
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	885b      	ldrh	r3, [r3, #2]
 8000862:	b29b      	uxth	r3, r3
 8000864:	4619      	mov	r1, r3
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	460b      	mov	r3, r1
 800086a:	011b      	lsls	r3, r3, #4
 800086c:	1a5b      	subs	r3, r3, r1
 800086e:	4413      	add	r3, r2
 8000870:	330a      	adds	r3, #10
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d129      	bne.n	80008cc <CBufWrite+0x7c>
		memcpy(&MyCBuf->buffer[MyCBuf->head],MyPacket ,sizeof(MyCBuf->buffer[MyCBuf->head]));
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	885b      	ldrh	r3, [r3, #2]
 800087c:	b29b      	uxth	r3, r3
 800087e:	461a      	mov	r2, r3
 8000880:	4613      	mov	r3, r2
 8000882:	011b      	lsls	r3, r3, #4
 8000884:	1a9b      	subs	r3, r3, r2
 8000886:	3308      	adds	r3, #8
 8000888:	687a      	ldr	r2, [r7, #4]
 800088a:	4413      	add	r3, r2
 800088c:	3302      	adds	r3, #2
 800088e:	220f      	movs	r2, #15
 8000890:	6839      	ldr	r1, [r7, #0]
 8000892:	4618      	mov	r0, r3
 8000894:	f002 fe80 	bl	8003598 <memcpy>
		MyCBuf->head++;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	885b      	ldrh	r3, [r3, #2]
 800089c:	b29b      	uxth	r3, r3
 800089e:	3301      	adds	r3, #1
 80008a0:	b29a      	uxth	r2, r3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	805a      	strh	r2, [r3, #2]
		CircularIndexCTRL(MyCBuf);
 80008a6:	6878      	ldr	r0, [r7, #4]
 80008a8:	f000 f842 	bl	8000930 <CircularIndexCTRL>
		if(MyCBuf->head==MyCBuf->tail){
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	885b      	ldrh	r3, [r3, #2]
 80008b0:	b29a      	uxth	r2, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	889b      	ldrh	r3, [r3, #4]
 80008b6:	b29b      	uxth	r3, r3
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d131      	bne.n	8000920 <CBufWrite+0xd0>
			MyCBuf->tail++;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	889b      	ldrh	r3, [r3, #4]
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	3301      	adds	r3, #1
 80008c4:	b29a      	uxth	r2, r3
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	809a      	strh	r2, [r3, #4]
 80008ca:	e029      	b.n	8000920 <CBufWrite+0xd0>
		}
	}else{
		memcpy(&MyCBuf->buffer[MyCBuf->head],MyPacket ,sizeof(MyCBuf->buffer[MyCBuf->head]));
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	885b      	ldrh	r3, [r3, #2]
 80008d0:	b29b      	uxth	r3, r3
 80008d2:	461a      	mov	r2, r3
 80008d4:	4613      	mov	r3, r2
 80008d6:	011b      	lsls	r3, r3, #4
 80008d8:	1a9b      	subs	r3, r3, r2
 80008da:	3308      	adds	r3, #8
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	4413      	add	r3, r2
 80008e0:	3302      	adds	r3, #2
 80008e2:	220f      	movs	r2, #15
 80008e4:	6839      	ldr	r1, [r7, #0]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f002 fe56 	bl	8003598 <memcpy>
		MyCBuf->head++;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	885b      	ldrh	r3, [r3, #2]
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	3301      	adds	r3, #1
 80008f4:	b29a      	uxth	r2, r3
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	805a      	strh	r2, [r3, #2]
		MyCBuf->tail++;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	889b      	ldrh	r3, [r3, #4]
 80008fe:	b29b      	uxth	r3, r3
 8000900:	3301      	adds	r3, #1
 8000902:	b29a      	uxth	r2, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	809a      	strh	r2, [r3, #4]
		CircularIndexCTRL(MyCBuf);
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f000 f811 	bl	8000930 <CircularIndexCTRL>
		//CircularIndexCTRL(MyCBuf->head);
		MyCBuf->MissingPacketCount++;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	891b      	ldrh	r3, [r3, #8]
 8000912:	b29b      	uxth	r3, r3
 8000914:	3301      	adds	r3, #1
 8000916:	b29a      	uxth	r2, r3
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	811a      	strh	r2, [r3, #8]
		state=1;
 800091c:	2301      	movs	r3, #1
 800091e:	60fb      	str	r3, [r7, #12]
	}
	CircularIndexCTRL(MyCBuf);
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f000 f805 	bl	8000930 <CircularIndexCTRL>

	return state;
 8000926:	68fb      	ldr	r3, [r7, #12]

}
 8000928:	4618      	mov	r0, r3
 800092a:	3710      	adds	r7, #16
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <CircularIndexCTRL>:
void CircularIndexCTRL(MypacketCBufTypedef*MyCBuf){
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
	if(MyCBuf->head>=MAXMEMORYSIZE){
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	885b      	ldrh	r3, [r3, #2]
 800093c:	b29b      	uxth	r3, r3
 800093e:	2b63      	cmp	r3, #99	; 0x63
 8000940:	d90b      	bls.n	800095a <CircularIndexCTRL+0x2a>
		MyCBuf->cycle++;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	881b      	ldrh	r3, [r3, #0]
 8000946:	b29b      	uxth	r3, r3
 8000948:	3301      	adds	r3, #1
 800094a:	b29a      	uxth	r2, r3
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	801a      	strh	r2, [r3, #0]
		MyCBuf->head=0;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2200      	movs	r2, #0
 8000954:	709a      	strb	r2, [r3, #2]
 8000956:	2200      	movs	r2, #0
 8000958:	70da      	strb	r2, [r3, #3]
		//return;
	}
	if(MyCBuf->tail>=MAXMEMORYSIZE){
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	889b      	ldrh	r3, [r3, #4]
 800095e:	b29b      	uxth	r3, r3
 8000960:	2b63      	cmp	r3, #99	; 0x63
 8000962:	d904      	bls.n	800096e <CircularIndexCTRL+0x3e>
		MyCBuf->tail=0;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2200      	movs	r2, #0
 8000968:	711a      	strb	r2, [r3, #4]
 800096a:	2200      	movs	r2, #0
 800096c:	715a      	strb	r2, [r3, #5]

	}

}
 800096e:	bf00      	nop
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
	...

0800097c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000980:	f000 fa14 	bl	8000dac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000984:	f000 f824 	bl	80009d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000988:	f000 f8d4 	bl	8000b34 <MX_GPIO_Init>
  MX_DMA_Init();
 800098c:	f000 f8b2 	bl	8000af4 <MX_DMA_Init>
  MX_UART4_Init();
 8000990:	f000 f886 	bl	8000aa0 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  UARTParserInit();
 8000994:	f7ff fe60 	bl	8000658 <UARTParserInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 // isUpdateSW();
  while(TimeOutBoot){
 8000998:	e006      	b.n	80009a8 <main+0x2c>
	  Commands_Processing();
 800099a:	f7ff feab 	bl	80006f4 <Commands_Processing>
	  TimeOutBoot--;
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <main+0x48>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	3b01      	subs	r3, #1
 80009a4:	4a07      	ldr	r2, [pc, #28]	; (80009c4 <main+0x48>)
 80009a6:	6013      	str	r3, [r2, #0]
  while(TimeOutBoot){
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <main+0x48>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d1f4      	bne.n	800099a <main+0x1e>
  	__set_CONTROL(0);
  	SysTick->CTRL = 0; //disable SysTick
  	SCB->VTOR = APPLICATION_START_ADDRESS;
  	__set_MSP( *( (uint32_t*) APPLICATION_START_ADDRESS ) );
  	Jump_To_Application();*/
  if(!FlashErased){
 80009b0:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <main+0x4c>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d102      	bne.n	80009be <main+0x42>
  JumpTo(APPADDRESS);
 80009b8:	4804      	ldr	r0, [pc, #16]	; (80009cc <main+0x50>)
 80009ba:	f7ff fddd 	bl	8000578 <JumpTo>
  }
  while (1)
  {
    /* USER CODE END WHILE */
	  Commands_Processing();
 80009be:	f7ff fe99 	bl	80006f4 <Commands_Processing>
 80009c2:	e7fc      	b.n	80009be <main+0x42>
 80009c4:	20000000 	.word	0x20000000
 80009c8:	200000d3 	.word	0x200000d3
 80009cc:	0800c000 	.word	0x0800c000

080009d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b094      	sub	sp, #80	; 0x50
 80009d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d6:	f107 0320 	add.w	r3, r7, #32
 80009da:	2230      	movs	r2, #48	; 0x30
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f002 fde5 	bl	80035ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f4:	2300      	movs	r3, #0
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	4b27      	ldr	r3, [pc, #156]	; (8000a98 <SystemClock_Config+0xc8>)
 80009fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fc:	4a26      	ldr	r2, [pc, #152]	; (8000a98 <SystemClock_Config+0xc8>)
 80009fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a02:	6413      	str	r3, [r2, #64]	; 0x40
 8000a04:	4b24      	ldr	r3, [pc, #144]	; (8000a98 <SystemClock_Config+0xc8>)
 8000a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a10:	2300      	movs	r3, #0
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	4b21      	ldr	r3, [pc, #132]	; (8000a9c <SystemClock_Config+0xcc>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a20      	ldr	r2, [pc, #128]	; (8000a9c <SystemClock_Config+0xcc>)
 8000a1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a1e:	6013      	str	r3, [r2, #0]
 8000a20:	4b1e      	ldr	r3, [pc, #120]	; (8000a9c <SystemClock_Config+0xcc>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a30:	2301      	movs	r3, #1
 8000a32:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a34:	2310      	movs	r3, #16
 8000a36:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a40:	2308      	movs	r3, #8
 8000a42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000a44:	2332      	movs	r3, #50	; 0x32
 8000a46:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a4c:	2304      	movs	r3, #4
 8000a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a50:	f107 0320 	add.w	r3, r7, #32
 8000a54:	4618      	mov	r0, r3
 8000a56:	f001 fb3f 	bl	80020d8 <HAL_RCC_OscConfig>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a60:	f000 f882 	bl	8000b68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a64:	230f      	movs	r3, #15
 8000a66:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a7a:	f107 030c 	add.w	r3, r7, #12
 8000a7e:	2101      	movs	r1, #1
 8000a80:	4618      	mov	r0, r3
 8000a82:	f001 fd99 	bl	80025b8 <HAL_RCC_ClockConfig>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a8c:	f000 f86c 	bl	8000b68 <Error_Handler>
  }
}
 8000a90:	bf00      	nop
 8000a92:	3750      	adds	r7, #80	; 0x50
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40007000 	.word	0x40007000

08000aa0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	; (8000aec <MX_UART4_Init+0x4c>)
 8000aa6:	4a12      	ldr	r2, [pc, #72]	; (8000af0 <MX_UART4_Init+0x50>)
 8000aa8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000aaa:	4b10      	ldr	r3, [pc, #64]	; (8000aec <MX_UART4_Init+0x4c>)
 8000aac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <MX_UART4_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <MX_UART4_Init+0x4c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <MX_UART4_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000ac4:	4b09      	ldr	r3, [pc, #36]	; (8000aec <MX_UART4_Init+0x4c>)
 8000ac6:	220c      	movs	r2, #12
 8000ac8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aca:	4b08      	ldr	r3, [pc, #32]	; (8000aec <MX_UART4_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <MX_UART4_Init+0x4c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000ad6:	4805      	ldr	r0, [pc, #20]	; (8000aec <MX_UART4_Init+0x4c>)
 8000ad8:	f001 ff3a 	bl	8002950 <HAL_UART_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000ae2:	f000 f841 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	200006bc 	.word	0x200006bc
 8000af0:	40004c00 	.word	0x40004c00

08000af4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <MX_DMA_Init+0x3c>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a0b      	ldr	r2, [pc, #44]	; (8000b30 <MX_DMA_Init+0x3c>)
 8000b04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <MX_DMA_Init+0x3c>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2100      	movs	r1, #0
 8000b1a:	200d      	movs	r0, #13
 8000b1c:	f000 fac7 	bl	80010ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000b20:	200d      	movs	r0, #13
 8000b22:	f000 fae0 	bl	80010e6 <HAL_NVIC_EnableIRQ>

}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40023800 	.word	0x40023800

08000b34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <MX_GPIO_Init+0x30>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a08      	ldr	r2, [pc, #32]	; (8000b64 <MX_GPIO_Init+0x30>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <MX_GPIO_Init+0x30>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]

}
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	40023800 	.word	0x40023800

08000b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
	...

08000b78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <HAL_MspInit+0x4c>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b86:	4a0f      	ldr	r2, [pc, #60]	; (8000bc4 <HAL_MspInit+0x4c>)
 8000b88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b8e:	4b0d      	ldr	r3, [pc, #52]	; (8000bc4 <HAL_MspInit+0x4c>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	603b      	str	r3, [r7, #0]
 8000b9e:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <HAL_MspInit+0x4c>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	4a08      	ldr	r2, [pc, #32]	; (8000bc4 <HAL_MspInit+0x4c>)
 8000ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8000baa:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <HAL_MspInit+0x4c>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	40023800 	.word	0x40023800

08000bc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	; 0x28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a30      	ldr	r2, [pc, #192]	; (8000ca8 <HAL_UART_MspInit+0xe0>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d159      	bne.n	8000c9e <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	4b2f      	ldr	r3, [pc, #188]	; (8000cac <HAL_UART_MspInit+0xe4>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	4a2e      	ldr	r2, [pc, #184]	; (8000cac <HAL_UART_MspInit+0xe4>)
 8000bf4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfa:	4b2c      	ldr	r3, [pc, #176]	; (8000cac <HAL_UART_MspInit+0xe4>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	4b28      	ldr	r3, [pc, #160]	; (8000cac <HAL_UART_MspInit+0xe4>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a27      	ldr	r2, [pc, #156]	; (8000cac <HAL_UART_MspInit+0xe4>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b25      	ldr	r3, [pc, #148]	; (8000cac <HAL_UART_MspInit+0xe4>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c22:	2303      	movs	r3, #3
 8000c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c26:	2302      	movs	r3, #2
 8000c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c32:	2308      	movs	r3, #8
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	481c      	ldr	r0, [pc, #112]	; (8000cb0 <HAL_UART_MspInit+0xe8>)
 8000c3e:	f001 f8b1 	bl	8001da4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8000c42:	4b1c      	ldr	r3, [pc, #112]	; (8000cb4 <HAL_UART_MspInit+0xec>)
 8000c44:	4a1c      	ldr	r2, [pc, #112]	; (8000cb8 <HAL_UART_MspInit+0xf0>)
 8000c46:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8000c48:	4b1a      	ldr	r3, [pc, #104]	; (8000cb4 <HAL_UART_MspInit+0xec>)
 8000c4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c4e:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c50:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <HAL_UART_MspInit+0xec>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c56:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <HAL_UART_MspInit+0xec>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c5c:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <HAL_UART_MspInit+0xec>)
 8000c5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c62:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c64:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <HAL_UART_MspInit+0xec>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c6a:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <HAL_UART_MspInit+0xec>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8000c70:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <HAL_UART_MspInit+0xec>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c76:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <HAL_UART_MspInit+0xec>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c7c:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <HAL_UART_MspInit+0xec>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8000c82:	480c      	ldr	r0, [pc, #48]	; (8000cb4 <HAL_UART_MspInit+0xec>)
 8000c84:	f000 fa4a 	bl	800111c <HAL_DMA_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000c8e:	f7ff ff6b 	bl	8000b68 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a07      	ldr	r2, [pc, #28]	; (8000cb4 <HAL_UART_MspInit+0xec>)
 8000c96:	635a      	str	r2, [r3, #52]	; 0x34
 8000c98:	4a06      	ldr	r2, [pc, #24]	; (8000cb4 <HAL_UART_MspInit+0xec>)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000c9e:	bf00      	nop
 8000ca0:	3728      	adds	r7, #40	; 0x28
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40004c00 	.word	0x40004c00
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40020000 	.word	0x40020000
 8000cb4:	20000040 	.word	0x20000040
 8000cb8:	40026040 	.word	0x40026040

08000cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cce:	e7fe      	b.n	8000cce <HardFault_Handler+0x4>

08000cd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <MemManage_Handler+0x4>

08000cd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cda:	e7fe      	b.n	8000cda <BusFault_Handler+0x4>

08000cdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <UsageFault_Handler+0x4>

08000ce2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d10:	f000 f8d2 	bl	8000eb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8000d1c:	4802      	ldr	r0, [pc, #8]	; (8000d28 <DMA1_Stream2_IRQHandler+0x10>)
 8000d1e:	f000 fb03 	bl	8001328 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000040 	.word	0x20000040

08000d2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d30:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <SystemInit+0x28>)
 8000d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d36:	4a07      	ldr	r2, [pc, #28]	; (8000d54 <SystemInit+0x28>)
 8000d38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d40:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <SystemInit+0x28>)
 8000d42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d46:	609a      	str	r2, [r3, #8]
#endif
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d90 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d5c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d5e:	e003      	b.n	8000d68 <LoopCopyDataInit>

08000d60 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d62:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d64:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d66:	3104      	adds	r1, #4

08000d68 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d68:	480b      	ldr	r0, [pc, #44]	; (8000d98 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d6c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d6e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d70:	d3f6      	bcc.n	8000d60 <CopyDataInit>
  ldr  r2, =_sbss
 8000d72:	4a0b      	ldr	r2, [pc, #44]	; (8000da0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d74:	e002      	b.n	8000d7c <LoopFillZerobss>

08000d76 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d76:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d78:	f842 3b04 	str.w	r3, [r2], #4

08000d7c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d7c:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d7e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d80:	d3f9      	bcc.n	8000d76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d82:	f7ff ffd3 	bl	8000d2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d86:	f002 fbe3 	bl	8003550 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d8a:	f7ff fdf7 	bl	800097c <main>
  bx  lr    
 8000d8e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d90:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000d94:	08003608 	.word	0x08003608
  ldr  r0, =_sdata
 8000d98:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d9c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000da0:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000da4:	20000730 	.word	0x20000730

08000da8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000da8:	e7fe      	b.n	8000da8 <ADC_IRQHandler>
	...

08000dac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000db0:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <HAL_Init+0x40>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a0d      	ldr	r2, [pc, #52]	; (8000dec <HAL_Init+0x40>)
 8000db6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <HAL_Init+0x40>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <HAL_Init+0x40>)
 8000dc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <HAL_Init+0x40>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a07      	ldr	r2, [pc, #28]	; (8000dec <HAL_Init+0x40>)
 8000dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd4:	2003      	movs	r0, #3
 8000dd6:	f000 f95f 	bl	8001098 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f000 f83c 	bl	8000e58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de0:	f7ff feca 	bl	8000b78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40023c00 	.word	0x40023c00

08000df0 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000df4:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <HAL_DeInit+0x54>)
 8000df6:	f04f 32ff 	mov.w	r2, #4294967295
 8000dfa:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000dfc:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <HAL_DeInit+0x54>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <HAL_DeInit+0x54>)
 8000e04:	f04f 32ff 	mov.w	r2, #4294967295
 8000e08:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <HAL_DeInit+0x54>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <HAL_DeInit+0x54>)
 8000e12:	f04f 32ff 	mov.w	r2, #4294967295
 8000e16:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000e18:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <HAL_DeInit+0x54>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8000e1e:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <HAL_DeInit+0x54>)
 8000e20:	f04f 32ff 	mov.w	r2, #4294967295
 8000e24:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000e26:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <HAL_DeInit+0x54>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8000e2c:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <HAL_DeInit+0x54>)
 8000e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8000e32:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000e34:	4b03      	ldr	r3, [pc, #12]	; (8000e44 <HAL_DeInit+0x54>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000e3a:	f000 f805 	bl	8000e48 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8000e3e:	2300      	movs	r3, #0
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40023800 	.word	0x40023800

08000e48 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
	...

08000e58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e60:	4b12      	ldr	r3, [pc, #72]	; (8000eac <HAL_InitTick+0x54>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <HAL_InitTick+0x58>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e76:	4618      	mov	r0, r3
 8000e78:	f000 f943 	bl	8001102 <HAL_SYSTICK_Config>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e00e      	b.n	8000ea4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2b0f      	cmp	r3, #15
 8000e8a:	d80a      	bhi.n	8000ea2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	6879      	ldr	r1, [r7, #4]
 8000e90:	f04f 30ff 	mov.w	r0, #4294967295
 8000e94:	f000 f90b 	bl	80010ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e98:	4a06      	ldr	r2, [pc, #24]	; (8000eb4 <HAL_InitTick+0x5c>)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e000      	b.n	8000ea4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20000004 	.word	0x20000004
 8000eb0:	2000000c 	.word	0x2000000c
 8000eb4:	20000008 	.word	0x20000008

08000eb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_IncTick+0x20>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_IncTick+0x24>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	4a04      	ldr	r2, [pc, #16]	; (8000edc <HAL_IncTick+0x24>)
 8000eca:	6013      	str	r3, [r2, #0]
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	2000000c 	.word	0x2000000c
 8000edc:	2000070c 	.word	0x2000070c

08000ee0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee4:	4b03      	ldr	r3, [pc, #12]	; (8000ef4 <HAL_GetTick+0x14>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	2000070c 	.word	0x2000070c

08000ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <__NVIC_SetPriorityGrouping+0x44>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f14:	4013      	ands	r3, r2
 8000f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f2a:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <__NVIC_SetPriorityGrouping+0x44>)
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	60d3      	str	r3, [r2, #12]
}
 8000f30:	bf00      	nop
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f44:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <__NVIC_GetPriorityGrouping+0x18>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	0a1b      	lsrs	r3, r3, #8
 8000f4a:	f003 0307 	and.w	r3, r3, #7
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	db0b      	blt.n	8000f86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	f003 021f 	and.w	r2, r3, #31
 8000f74:	4907      	ldr	r1, [pc, #28]	; (8000f94 <__NVIC_EnableIRQ+0x38>)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	095b      	lsrs	r3, r3, #5
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	e000e100 	.word	0xe000e100

08000f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	6039      	str	r1, [r7, #0]
 8000fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	db0a      	blt.n	8000fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	490c      	ldr	r1, [pc, #48]	; (8000fe4 <__NVIC_SetPriority+0x4c>)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	0112      	lsls	r2, r2, #4
 8000fb8:	b2d2      	uxtb	r2, r2
 8000fba:	440b      	add	r3, r1
 8000fbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc0:	e00a      	b.n	8000fd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	4908      	ldr	r1, [pc, #32]	; (8000fe8 <__NVIC_SetPriority+0x50>)
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	f003 030f 	and.w	r3, r3, #15
 8000fce:	3b04      	subs	r3, #4
 8000fd0:	0112      	lsls	r2, r2, #4
 8000fd2:	b2d2      	uxtb	r2, r2
 8000fd4:	440b      	add	r3, r1
 8000fd6:	761a      	strb	r2, [r3, #24]
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000e100 	.word	0xe000e100
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b089      	sub	sp, #36	; 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	f1c3 0307 	rsb	r3, r3, #7
 8001006:	2b04      	cmp	r3, #4
 8001008:	bf28      	it	cs
 800100a:	2304      	movcs	r3, #4
 800100c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3304      	adds	r3, #4
 8001012:	2b06      	cmp	r3, #6
 8001014:	d902      	bls.n	800101c <NVIC_EncodePriority+0x30>
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3b03      	subs	r3, #3
 800101a:	e000      	b.n	800101e <NVIC_EncodePriority+0x32>
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	f04f 32ff 	mov.w	r2, #4294967295
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43da      	mvns	r2, r3
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	401a      	ands	r2, r3
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001034:	f04f 31ff 	mov.w	r1, #4294967295
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	fa01 f303 	lsl.w	r3, r1, r3
 800103e:	43d9      	mvns	r1, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001044:	4313      	orrs	r3, r2
         );
}
 8001046:	4618      	mov	r0, r3
 8001048:	3724      	adds	r7, #36	; 0x24
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
	...

08001054 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3b01      	subs	r3, #1
 8001060:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001064:	d301      	bcc.n	800106a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001066:	2301      	movs	r3, #1
 8001068:	e00f      	b.n	800108a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800106a:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <SysTick_Config+0x40>)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3b01      	subs	r3, #1
 8001070:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001072:	210f      	movs	r1, #15
 8001074:	f04f 30ff 	mov.w	r0, #4294967295
 8001078:	f7ff ff8e 	bl	8000f98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <SysTick_Config+0x40>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001082:	4b04      	ldr	r3, [pc, #16]	; (8001094 <SysTick_Config+0x40>)
 8001084:	2207      	movs	r2, #7
 8001086:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	e000e010 	.word	0xe000e010

08001098 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff ff29 	bl	8000ef8 <__NVIC_SetPriorityGrouping>
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b086      	sub	sp, #24
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	4603      	mov	r3, r0
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
 80010ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010c0:	f7ff ff3e 	bl	8000f40 <__NVIC_GetPriorityGrouping>
 80010c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	68b9      	ldr	r1, [r7, #8]
 80010ca:	6978      	ldr	r0, [r7, #20]
 80010cc:	f7ff ff8e 	bl	8000fec <NVIC_EncodePriority>
 80010d0:	4602      	mov	r2, r0
 80010d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d6:	4611      	mov	r1, r2
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff5d 	bl	8000f98 <__NVIC_SetPriority>
}
 80010de:	bf00      	nop
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	4603      	mov	r3, r0
 80010ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff31 	bl	8000f5c <__NVIC_EnableIRQ>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff ffa2 	bl	8001054 <SysTick_Config>
 8001110:	4603      	mov	r3, r0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001128:	f7ff feda 	bl	8000ee0 <HAL_GetTick>
 800112c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d101      	bne.n	8001138 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e099      	b.n	800126c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2202      	movs	r2, #2
 8001144:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f022 0201 	bic.w	r2, r2, #1
 8001156:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001158:	e00f      	b.n	800117a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800115a:	f7ff fec1 	bl	8000ee0 <HAL_GetTick>
 800115e:	4602      	mov	r2, r0
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	2b05      	cmp	r3, #5
 8001166:	d908      	bls.n	800117a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2220      	movs	r2, #32
 800116c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2203      	movs	r2, #3
 8001172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e078      	b.n	800126c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	2b00      	cmp	r3, #0
 8001186:	d1e8      	bne.n	800115a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001190:	697a      	ldr	r2, [r7, #20]
 8001192:	4b38      	ldr	r3, [pc, #224]	; (8001274 <HAL_DMA_Init+0x158>)
 8001194:	4013      	ands	r3, r2
 8001196:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	691b      	ldr	r3, [r3, #16]
 80011ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6a1b      	ldr	r3, [r3, #32]
 80011c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d0:	2b04      	cmp	r3, #4
 80011d2:	d107      	bne.n	80011e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011dc:	4313      	orrs	r3, r2
 80011de:	697a      	ldr	r2, [r7, #20]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	697a      	ldr	r2, [r7, #20]
 80011ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f023 0307 	bic.w	r3, r3, #7
 80011fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001200:	697a      	ldr	r2, [r7, #20]
 8001202:	4313      	orrs	r3, r2
 8001204:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120a:	2b04      	cmp	r3, #4
 800120c:	d117      	bne.n	800123e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001212:	697a      	ldr	r2, [r7, #20]
 8001214:	4313      	orrs	r3, r2
 8001216:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800121c:	2b00      	cmp	r3, #0
 800121e:	d00e      	beq.n	800123e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f000 fa6f 	bl	8001704 <DMA_CheckFifoParam>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d008      	beq.n	800123e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2240      	movs	r2, #64	; 0x40
 8001230:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2201      	movs	r2, #1
 8001236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800123a:	2301      	movs	r3, #1
 800123c:	e016      	b.n	800126c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	697a      	ldr	r2, [r7, #20]
 8001244:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f000 fa26 	bl	8001698 <DMA_CalcBaseAndBitshift>
 800124c:	4603      	mov	r3, r0
 800124e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001254:	223f      	movs	r2, #63	; 0x3f
 8001256:	409a      	lsls	r2, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2201      	movs	r2, #1
 8001266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800126a:	2300      	movs	r3, #0
}
 800126c:	4618      	mov	r0, r3
 800126e:	3718      	adds	r7, #24
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	f010803f 	.word	0xf010803f

08001278 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
 8001284:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001286:	2300      	movs	r3, #0
 8001288:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001296:	2b01      	cmp	r3, #1
 8001298:	d101      	bne.n	800129e <HAL_DMA_Start_IT+0x26>
 800129a:	2302      	movs	r3, #2
 800129c:	e040      	b.n	8001320 <HAL_DMA_Start_IT+0xa8>
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	2201      	movs	r2, #1
 80012a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d12f      	bne.n	8001312 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	2202      	movs	r2, #2
 80012b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	2200      	movs	r2, #0
 80012be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	68b9      	ldr	r1, [r7, #8]
 80012c6:	68f8      	ldr	r0, [r7, #12]
 80012c8:	f000 f9b8 	bl	800163c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012d0:	223f      	movs	r2, #63	; 0x3f
 80012d2:	409a      	lsls	r2, r3
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f042 0216 	orr.w	r2, r2, #22
 80012e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d007      	beq.n	8001300 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f042 0208 	orr.w	r2, r2, #8
 80012fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f042 0201 	orr.w	r2, r2, #1
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	e005      	b.n	800131e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2200      	movs	r2, #0
 8001316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800131a:	2302      	movs	r3, #2
 800131c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800131e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001330:	2300      	movs	r3, #0
 8001332:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001334:	4b92      	ldr	r3, [pc, #584]	; (8001580 <HAL_DMA_IRQHandler+0x258>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a92      	ldr	r2, [pc, #584]	; (8001584 <HAL_DMA_IRQHandler+0x25c>)
 800133a:	fba2 2303 	umull	r2, r3, r2, r3
 800133e:	0a9b      	lsrs	r3, r3, #10
 8001340:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001346:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001352:	2208      	movs	r2, #8
 8001354:	409a      	lsls	r2, r3
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	4013      	ands	r3, r2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d01a      	beq.n	8001394 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	2b00      	cmp	r3, #0
 800136a:	d013      	beq.n	8001394 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f022 0204 	bic.w	r2, r2, #4
 800137a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001380:	2208      	movs	r2, #8
 8001382:	409a      	lsls	r2, r3
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800138c:	f043 0201 	orr.w	r2, r3, #1
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001398:	2201      	movs	r2, #1
 800139a:	409a      	lsls	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4013      	ands	r3, r2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d012      	beq.n	80013ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d00b      	beq.n	80013ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013b6:	2201      	movs	r2, #1
 80013b8:	409a      	lsls	r2, r3
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013c2:	f043 0202 	orr.w	r2, r3, #2
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ce:	2204      	movs	r2, #4
 80013d0:	409a      	lsls	r2, r3
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	4013      	ands	r3, r2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d012      	beq.n	8001400 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d00b      	beq.n	8001400 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ec:	2204      	movs	r2, #4
 80013ee:	409a      	lsls	r2, r3
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f8:	f043 0204 	orr.w	r2, r3, #4
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001404:	2210      	movs	r2, #16
 8001406:	409a      	lsls	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4013      	ands	r3, r2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d043      	beq.n	8001498 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	2b00      	cmp	r3, #0
 800141c:	d03c      	beq.n	8001498 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001422:	2210      	movs	r2, #16
 8001424:	409a      	lsls	r2, r3
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d018      	beq.n	800146a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d108      	bne.n	8001458 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	2b00      	cmp	r3, #0
 800144c:	d024      	beq.n	8001498 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	4798      	blx	r3
 8001456:	e01f      	b.n	8001498 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800145c:	2b00      	cmp	r3, #0
 800145e:	d01b      	beq.n	8001498 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	4798      	blx	r3
 8001468:	e016      	b.n	8001498 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001474:	2b00      	cmp	r3, #0
 8001476:	d107      	bne.n	8001488 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f022 0208 	bic.w	r2, r2, #8
 8001486:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	2b00      	cmp	r3, #0
 800148e:	d003      	beq.n	8001498 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800149c:	2220      	movs	r2, #32
 800149e:	409a      	lsls	r2, r3
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	4013      	ands	r3, r2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f000 808e 	beq.w	80015c6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0310 	and.w	r3, r3, #16
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f000 8086 	beq.w	80015c6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014be:	2220      	movs	r2, #32
 80014c0:	409a      	lsls	r2, r3
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b05      	cmp	r3, #5
 80014d0:	d136      	bne.n	8001540 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f022 0216 	bic.w	r2, r2, #22
 80014e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	695a      	ldr	r2, [r3, #20]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d103      	bne.n	8001502 <HAL_DMA_IRQHandler+0x1da>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d007      	beq.n	8001512 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f022 0208 	bic.w	r2, r2, #8
 8001510:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001516:	223f      	movs	r2, #63	; 0x3f
 8001518:	409a      	lsls	r2, r3
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2201      	movs	r2, #1
 800152a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001532:	2b00      	cmp	r3, #0
 8001534:	d07d      	beq.n	8001632 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	4798      	blx	r3
        }
        return;
 800153e:	e078      	b.n	8001632 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d01c      	beq.n	8001588 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d108      	bne.n	800156e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001560:	2b00      	cmp	r3, #0
 8001562:	d030      	beq.n	80015c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	4798      	blx	r3
 800156c:	e02b      	b.n	80015c6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001572:	2b00      	cmp	r3, #0
 8001574:	d027      	beq.n	80015c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	4798      	blx	r3
 800157e:	e022      	b.n	80015c6 <HAL_DMA_IRQHandler+0x29e>
 8001580:	20000004 	.word	0x20000004
 8001584:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001592:	2b00      	cmp	r3, #0
 8001594:	d10f      	bne.n	80015b6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f022 0210 	bic.w	r2, r2, #16
 80015a4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2201      	movs	r2, #1
 80015b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d003      	beq.n	80015c6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d032      	beq.n	8001634 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d022      	beq.n	8001620 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2205      	movs	r2, #5
 80015de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f022 0201 	bic.w	r2, r2, #1
 80015f0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	3301      	adds	r3, #1
 80015f6:	60bb      	str	r3, [r7, #8]
 80015f8:	697a      	ldr	r2, [r7, #20]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d307      	bcc.n	800160e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1f2      	bne.n	80015f2 <HAL_DMA_IRQHandler+0x2ca>
 800160c:	e000      	b.n	8001610 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800160e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001624:	2b00      	cmp	r3, #0
 8001626:	d005      	beq.n	8001634 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	4798      	blx	r3
 8001630:	e000      	b.n	8001634 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001632:	bf00      	nop
    }
  }
}
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop

0800163c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
 8001648:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001658:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	2b40      	cmp	r3, #64	; 0x40
 8001668:	d108      	bne.n	800167c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	68ba      	ldr	r2, [r7, #8]
 8001678:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800167a:	e007      	b.n	800168c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	68ba      	ldr	r2, [r7, #8]
 8001682:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	60da      	str	r2, [r3, #12]
}
 800168c:	bf00      	nop
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	3b10      	subs	r3, #16
 80016a8:	4a14      	ldr	r2, [pc, #80]	; (80016fc <DMA_CalcBaseAndBitshift+0x64>)
 80016aa:	fba2 2303 	umull	r2, r3, r2, r3
 80016ae:	091b      	lsrs	r3, r3, #4
 80016b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80016b2:	4a13      	ldr	r2, [pc, #76]	; (8001700 <DMA_CalcBaseAndBitshift+0x68>)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4413      	add	r3, r2
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	461a      	mov	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2b03      	cmp	r3, #3
 80016c4:	d909      	bls.n	80016da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016ce:	f023 0303 	bic.w	r3, r3, #3
 80016d2:	1d1a      	adds	r2, r3, #4
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	659a      	str	r2, [r3, #88]	; 0x58
 80016d8:	e007      	b.n	80016ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016e2:	f023 0303 	bic.w	r3, r3, #3
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3714      	adds	r7, #20
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	aaaaaaab 	.word	0xaaaaaaab
 8001700:	080035f0 	.word	0x080035f0

08001704 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800170c:	2300      	movs	r3, #0
 800170e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001714:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d11f      	bne.n	800175e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	2b03      	cmp	r3, #3
 8001722:	d855      	bhi.n	80017d0 <DMA_CheckFifoParam+0xcc>
 8001724:	a201      	add	r2, pc, #4	; (adr r2, 800172c <DMA_CheckFifoParam+0x28>)
 8001726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800172a:	bf00      	nop
 800172c:	0800173d 	.word	0x0800173d
 8001730:	0800174f 	.word	0x0800174f
 8001734:	0800173d 	.word	0x0800173d
 8001738:	080017d1 	.word	0x080017d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001740:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d045      	beq.n	80017d4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800174c:	e042      	b.n	80017d4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001752:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001756:	d13f      	bne.n	80017d8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800175c:	e03c      	b.n	80017d8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	699b      	ldr	r3, [r3, #24]
 8001762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001766:	d121      	bne.n	80017ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	2b03      	cmp	r3, #3
 800176c:	d836      	bhi.n	80017dc <DMA_CheckFifoParam+0xd8>
 800176e:	a201      	add	r2, pc, #4	; (adr r2, 8001774 <DMA_CheckFifoParam+0x70>)
 8001770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001774:	08001785 	.word	0x08001785
 8001778:	0800178b 	.word	0x0800178b
 800177c:	08001785 	.word	0x08001785
 8001780:	0800179d 	.word	0x0800179d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	73fb      	strb	r3, [r7, #15]
      break;
 8001788:	e02f      	b.n	80017ea <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d024      	beq.n	80017e0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800179a:	e021      	b.n	80017e0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017a4:	d11e      	bne.n	80017e4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80017aa:	e01b      	b.n	80017e4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d902      	bls.n	80017b8 <DMA_CheckFifoParam+0xb4>
 80017b2:	2b03      	cmp	r3, #3
 80017b4:	d003      	beq.n	80017be <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80017b6:	e018      	b.n	80017ea <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	73fb      	strb	r3, [r7, #15]
      break;
 80017bc:	e015      	b.n	80017ea <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d00e      	beq.n	80017e8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	73fb      	strb	r3, [r7, #15]
      break;
 80017ce:	e00b      	b.n	80017e8 <DMA_CheckFifoParam+0xe4>
      break;
 80017d0:	bf00      	nop
 80017d2:	e00a      	b.n	80017ea <DMA_CheckFifoParam+0xe6>
      break;
 80017d4:	bf00      	nop
 80017d6:	e008      	b.n	80017ea <DMA_CheckFifoParam+0xe6>
      break;
 80017d8:	bf00      	nop
 80017da:	e006      	b.n	80017ea <DMA_CheckFifoParam+0xe6>
      break;
 80017dc:	bf00      	nop
 80017de:	e004      	b.n	80017ea <DMA_CheckFifoParam+0xe6>
      break;
 80017e0:	bf00      	nop
 80017e2:	e002      	b.n	80017ea <DMA_CheckFifoParam+0xe6>
      break;   
 80017e4:	bf00      	nop
 80017e6:	e000      	b.n	80017ea <DMA_CheckFifoParam+0xe6>
      break;
 80017e8:	bf00      	nop
    }
  } 
  
  return status; 
 80017ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800180a:	4b23      	ldr	r3, [pc, #140]	; (8001898 <HAL_FLASH_Program+0xa0>)
 800180c:	7e1b      	ldrb	r3, [r3, #24]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d101      	bne.n	8001816 <HAL_FLASH_Program+0x1e>
 8001812:	2302      	movs	r3, #2
 8001814:	e03b      	b.n	800188e <HAL_FLASH_Program+0x96>
 8001816:	4b20      	ldr	r3, [pc, #128]	; (8001898 <HAL_FLASH_Program+0xa0>)
 8001818:	2201      	movs	r2, #1
 800181a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800181c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001820:	f000 f870 	bl	8001904 <FLASH_WaitForLastOperation>
 8001824:	4603      	mov	r3, r0
 8001826:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001828:	7dfb      	ldrb	r3, [r7, #23]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d12b      	bne.n	8001886 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d105      	bne.n	8001840 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001834:	783b      	ldrb	r3, [r7, #0]
 8001836:	4619      	mov	r1, r3
 8001838:	68b8      	ldr	r0, [r7, #8]
 800183a:	f000 f919 	bl	8001a70 <FLASH_Program_Byte>
 800183e:	e016      	b.n	800186e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d105      	bne.n	8001852 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001846:	883b      	ldrh	r3, [r7, #0]
 8001848:	4619      	mov	r1, r3
 800184a:	68b8      	ldr	r0, [r7, #8]
 800184c:	f000 f8ec 	bl	8001a28 <FLASH_Program_HalfWord>
 8001850:	e00d      	b.n	800186e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2b02      	cmp	r3, #2
 8001856:	d105      	bne.n	8001864 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	4619      	mov	r1, r3
 800185c:	68b8      	ldr	r0, [r7, #8]
 800185e:	f000 f8c1 	bl	80019e4 <FLASH_Program_Word>
 8001862:	e004      	b.n	800186e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001864:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001868:	68b8      	ldr	r0, [r7, #8]
 800186a:	f000 f88b 	bl	8001984 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800186e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001872:	f000 f847 	bl	8001904 <FLASH_WaitForLastOperation>
 8001876:	4603      	mov	r3, r0
 8001878:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800187a:	4b08      	ldr	r3, [pc, #32]	; (800189c <HAL_FLASH_Program+0xa4>)
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	4a07      	ldr	r2, [pc, #28]	; (800189c <HAL_FLASH_Program+0xa4>)
 8001880:	f023 0301 	bic.w	r3, r3, #1
 8001884:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001886:	4b04      	ldr	r3, [pc, #16]	; (8001898 <HAL_FLASH_Program+0xa0>)
 8001888:	2200      	movs	r2, #0
 800188a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800188c:	7dfb      	ldrb	r3, [r7, #23]
}
 800188e:	4618      	mov	r0, r3
 8001890:	3718      	adds	r7, #24
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000710 	.word	0x20000710
 800189c:	40023c00 	.word	0x40023c00

080018a0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80018a6:	2300      	movs	r3, #0
 80018a8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80018aa:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <HAL_FLASH_Unlock+0x38>)
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	da0b      	bge.n	80018ca <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80018b2:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <HAL_FLASH_Unlock+0x38>)
 80018b4:	4a09      	ldr	r2, [pc, #36]	; (80018dc <HAL_FLASH_Unlock+0x3c>)
 80018b6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80018b8:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <HAL_FLASH_Unlock+0x38>)
 80018ba:	4a09      	ldr	r2, [pc, #36]	; (80018e0 <HAL_FLASH_Unlock+0x40>)
 80018bc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <HAL_FLASH_Unlock+0x38>)
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	da01      	bge.n	80018ca <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80018ca:	79fb      	ldrb	r3, [r7, #7]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	40023c00 	.word	0x40023c00
 80018dc:	45670123 	.word	0x45670123
 80018e0:	cdef89ab 	.word	0xcdef89ab

080018e4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80018e8:	4b05      	ldr	r3, [pc, #20]	; (8001900 <HAL_FLASH_Lock+0x1c>)
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	4a04      	ldr	r2, [pc, #16]	; (8001900 <HAL_FLASH_Lock+0x1c>)
 80018ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80018f2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	40023c00 	.word	0x40023c00

08001904 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800190c:	2300      	movs	r3, #0
 800190e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001910:	4b1a      	ldr	r3, [pc, #104]	; (800197c <FLASH_WaitForLastOperation+0x78>)
 8001912:	2200      	movs	r2, #0
 8001914:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001916:	f7ff fae3 	bl	8000ee0 <HAL_GetTick>
 800191a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800191c:	e010      	b.n	8001940 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001924:	d00c      	beq.n	8001940 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d007      	beq.n	800193c <FLASH_WaitForLastOperation+0x38>
 800192c:	f7ff fad8 	bl	8000ee0 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	429a      	cmp	r2, r3
 800193a:	d201      	bcs.n	8001940 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e019      	b.n	8001974 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001940:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <FLASH_WaitForLastOperation+0x7c>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1e8      	bne.n	800191e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800194c:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <FLASH_WaitForLastOperation+0x7c>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b00      	cmp	r3, #0
 8001956:	d002      	beq.n	800195e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001958:	4b09      	ldr	r3, [pc, #36]	; (8001980 <FLASH_WaitForLastOperation+0x7c>)
 800195a:	2201      	movs	r2, #1
 800195c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800195e:	4b08      	ldr	r3, [pc, #32]	; (8001980 <FLASH_WaitForLastOperation+0x7c>)
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800196a:	f000 f8a3 	bl	8001ab4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e000      	b.n	8001974 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001972:	2300      	movs	r3, #0
  
}  
 8001974:	4618      	mov	r0, r3
 8001976:	3710      	adds	r7, #16
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	20000710 	.word	0x20000710
 8001980:	40023c00 	.word	0x40023c00

08001984 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001984:	b490      	push	{r4, r7}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001990:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <FLASH_Program_DoubleWord+0x5c>)
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	4a12      	ldr	r2, [pc, #72]	; (80019e0 <FLASH_Program_DoubleWord+0x5c>)
 8001996:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800199a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800199c:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <FLASH_Program_DoubleWord+0x5c>)
 800199e:	691b      	ldr	r3, [r3, #16]
 80019a0:	4a0f      	ldr	r2, [pc, #60]	; (80019e0 <FLASH_Program_DoubleWord+0x5c>)
 80019a2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80019a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80019a8:	4b0d      	ldr	r3, [pc, #52]	; (80019e0 <FLASH_Program_DoubleWord+0x5c>)
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	4a0c      	ldr	r2, [pc, #48]	; (80019e0 <FLASH_Program_DoubleWord+0x5c>)
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80019ba:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80019be:	e9d7 1200 	ldrd	r1, r2, [r7]
 80019c2:	f04f 0300 	mov.w	r3, #0
 80019c6:	f04f 0400 	mov.w	r4, #0
 80019ca:	0013      	movs	r3, r2
 80019cc:	2400      	movs	r4, #0
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	3204      	adds	r2, #4
 80019d2:	6013      	str	r3, [r2, #0]
}
 80019d4:	bf00      	nop
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc90      	pop	{r4, r7}
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40023c00 	.word	0x40023c00

080019e4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80019ee:	4b0d      	ldr	r3, [pc, #52]	; (8001a24 <FLASH_Program_Word+0x40>)
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	4a0c      	ldr	r2, [pc, #48]	; (8001a24 <FLASH_Program_Word+0x40>)
 80019f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019f8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80019fa:	4b0a      	ldr	r3, [pc, #40]	; (8001a24 <FLASH_Program_Word+0x40>)
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	4a09      	ldr	r2, [pc, #36]	; (8001a24 <FLASH_Program_Word+0x40>)
 8001a00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a04:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001a06:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <FLASH_Program_Word+0x40>)
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	4a06      	ldr	r2, [pc, #24]	; (8001a24 <FLASH_Program_Word+0x40>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	601a      	str	r2, [r3, #0]
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	40023c00 	.word	0x40023c00

08001a28 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	460b      	mov	r3, r1
 8001a32:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001a34:	4b0d      	ldr	r3, [pc, #52]	; (8001a6c <FLASH_Program_HalfWord+0x44>)
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	4a0c      	ldr	r2, [pc, #48]	; (8001a6c <FLASH_Program_HalfWord+0x44>)
 8001a3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a3e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001a40:	4b0a      	ldr	r3, [pc, #40]	; (8001a6c <FLASH_Program_HalfWord+0x44>)
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	4a09      	ldr	r2, [pc, #36]	; (8001a6c <FLASH_Program_HalfWord+0x44>)
 8001a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a4a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001a4c:	4b07      	ldr	r3, [pc, #28]	; (8001a6c <FLASH_Program_HalfWord+0x44>)
 8001a4e:	691b      	ldr	r3, [r3, #16]
 8001a50:	4a06      	ldr	r2, [pc, #24]	; (8001a6c <FLASH_Program_HalfWord+0x44>)
 8001a52:	f043 0301 	orr.w	r3, r3, #1
 8001a56:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	887a      	ldrh	r2, [r7, #2]
 8001a5c:	801a      	strh	r2, [r3, #0]
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	40023c00 	.word	0x40023c00

08001a70 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	460b      	mov	r3, r1
 8001a7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <FLASH_Program_Byte+0x40>)
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	4a0b      	ldr	r2, [pc, #44]	; (8001ab0 <FLASH_Program_Byte+0x40>)
 8001a82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a86:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001a88:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <FLASH_Program_Byte+0x40>)
 8001a8a:	4a09      	ldr	r2, [pc, #36]	; (8001ab0 <FLASH_Program_Byte+0x40>)
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001a90:	4b07      	ldr	r3, [pc, #28]	; (8001ab0 <FLASH_Program_Byte+0x40>)
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	4a06      	ldr	r2, [pc, #24]	; (8001ab0 <FLASH_Program_Byte+0x40>)
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	78fa      	ldrb	r2, [r7, #3]
 8001aa0:	701a      	strb	r2, [r3, #0]
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	40023c00 	.word	0x40023c00

08001ab4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001ab8:	4b27      	ldr	r3, [pc, #156]	; (8001b58 <FLASH_SetErrorCode+0xa4>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	f003 0310 	and.w	r3, r3, #16
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d008      	beq.n	8001ad6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001ac4:	4b25      	ldr	r3, [pc, #148]	; (8001b5c <FLASH_SetErrorCode+0xa8>)
 8001ac6:	69db      	ldr	r3, [r3, #28]
 8001ac8:	f043 0310 	orr.w	r3, r3, #16
 8001acc:	4a23      	ldr	r2, [pc, #140]	; (8001b5c <FLASH_SetErrorCode+0xa8>)
 8001ace:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001ad0:	4b21      	ldr	r3, [pc, #132]	; (8001b58 <FLASH_SetErrorCode+0xa4>)
 8001ad2:	2210      	movs	r2, #16
 8001ad4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001ad6:	4b20      	ldr	r3, [pc, #128]	; (8001b58 <FLASH_SetErrorCode+0xa4>)
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	f003 0320 	and.w	r3, r3, #32
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d008      	beq.n	8001af4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001ae2:	4b1e      	ldr	r3, [pc, #120]	; (8001b5c <FLASH_SetErrorCode+0xa8>)
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	f043 0308 	orr.w	r3, r3, #8
 8001aea:	4a1c      	ldr	r2, [pc, #112]	; (8001b5c <FLASH_SetErrorCode+0xa8>)
 8001aec:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001aee:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <FLASH_SetErrorCode+0xa4>)
 8001af0:	2220      	movs	r2, #32
 8001af2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001af4:	4b18      	ldr	r3, [pc, #96]	; (8001b58 <FLASH_SetErrorCode+0xa4>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d008      	beq.n	8001b12 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001b00:	4b16      	ldr	r3, [pc, #88]	; (8001b5c <FLASH_SetErrorCode+0xa8>)
 8001b02:	69db      	ldr	r3, [r3, #28]
 8001b04:	f043 0304 	orr.w	r3, r3, #4
 8001b08:	4a14      	ldr	r2, [pc, #80]	; (8001b5c <FLASH_SetErrorCode+0xa8>)
 8001b0a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001b0c:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <FLASH_SetErrorCode+0xa4>)
 8001b0e:	2240      	movs	r2, #64	; 0x40
 8001b10:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001b12:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <FLASH_SetErrorCode+0xa4>)
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d008      	beq.n	8001b30 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001b1e:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <FLASH_SetErrorCode+0xa8>)
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	f043 0302 	orr.w	r3, r3, #2
 8001b26:	4a0d      	ldr	r2, [pc, #52]	; (8001b5c <FLASH_SetErrorCode+0xa8>)
 8001b28:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001b2a:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <FLASH_SetErrorCode+0xa4>)
 8001b2c:	2280      	movs	r2, #128	; 0x80
 8001b2e:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001b30:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <FLASH_SetErrorCode+0xa4>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d008      	beq.n	8001b4e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001b3c:	4b07      	ldr	r3, [pc, #28]	; (8001b5c <FLASH_SetErrorCode+0xa8>)
 8001b3e:	69db      	ldr	r3, [r3, #28]
 8001b40:	f043 0320 	orr.w	r3, r3, #32
 8001b44:	4a05      	ldr	r2, [pc, #20]	; (8001b5c <FLASH_SetErrorCode+0xa8>)
 8001b46:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001b48:	4b03      	ldr	r3, [pc, #12]	; (8001b58 <FLASH_SetErrorCode+0xa4>)
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	60da      	str	r2, [r3, #12]
  }
}
 8001b4e:	bf00      	nop
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	40023c00 	.word	0x40023c00
 8001b5c:	20000710 	.word	0x20000710

08001b60 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001b72:	4b31      	ldr	r3, [pc, #196]	; (8001c38 <HAL_FLASHEx_Erase+0xd8>)
 8001b74:	7e1b      	ldrb	r3, [r3, #24]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d101      	bne.n	8001b7e <HAL_FLASHEx_Erase+0x1e>
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	e058      	b.n	8001c30 <HAL_FLASHEx_Erase+0xd0>
 8001b7e:	4b2e      	ldr	r3, [pc, #184]	; (8001c38 <HAL_FLASHEx_Erase+0xd8>)
 8001b80:	2201      	movs	r2, #1
 8001b82:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b84:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b88:	f7ff febc 	bl	8001904 <FLASH_WaitForLastOperation>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d148      	bne.n	8001c28 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	f04f 32ff 	mov.w	r2, #4294967295
 8001b9c:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d115      	bne.n	8001bd2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	f000 f844 	bl	8001c40 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001bb8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001bbc:	f7ff fea2 	bl	8001904 <FLASH_WaitForLastOperation>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001bc4:	4b1d      	ldr	r3, [pc, #116]	; (8001c3c <HAL_FLASHEx_Erase+0xdc>)
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	4a1c      	ldr	r2, [pc, #112]	; (8001c3c <HAL_FLASHEx_Erase+0xdc>)
 8001bca:	f023 0304 	bic.w	r3, r3, #4
 8001bce:	6113      	str	r3, [r2, #16]
 8001bd0:	e028      	b.n	8001c24 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	60bb      	str	r3, [r7, #8]
 8001bd8:	e01c      	b.n	8001c14 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	4619      	mov	r1, r3
 8001be2:	68b8      	ldr	r0, [r7, #8]
 8001be4:	f000 f850 	bl	8001c88 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001be8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001bec:	f7ff fe8a 	bl	8001904 <FLASH_WaitForLastOperation>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001bf4:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <HAL_FLASHEx_Erase+0xdc>)
 8001bf6:	691b      	ldr	r3, [r3, #16]
 8001bf8:	4a10      	ldr	r2, [pc, #64]	; (8001c3c <HAL_FLASHEx_Erase+0xdc>)
 8001bfa:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001bfe:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	68ba      	ldr	r2, [r7, #8]
 8001c0a:	601a      	str	r2, [r3, #0]
          break;
 8001c0c:	e00a      	b.n	8001c24 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	3301      	adds	r3, #1
 8001c12:	60bb      	str	r3, [r7, #8]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68da      	ldr	r2, [r3, #12]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	68ba      	ldr	r2, [r7, #8]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d3da      	bcc.n	8001bda <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8001c24:	f000 f878 	bl	8001d18 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001c28:	4b03      	ldr	r3, [pc, #12]	; (8001c38 <HAL_FLASHEx_Erase+0xd8>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	761a      	strb	r2, [r3, #24]

  return status;
 8001c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20000710 	.word	0x20000710
 8001c3c:	40023c00 	.word	0x40023c00

08001c40 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	6039      	str	r1, [r7, #0]
 8001c4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c4c:	4b0d      	ldr	r3, [pc, #52]	; (8001c84 <FLASH_MassErase+0x44>)
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	4a0c      	ldr	r2, [pc, #48]	; (8001c84 <FLASH_MassErase+0x44>)
 8001c52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c56:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001c58:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <FLASH_MassErase+0x44>)
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	4a09      	ldr	r2, [pc, #36]	; (8001c84 <FLASH_MassErase+0x44>)
 8001c5e:	f043 0304 	orr.w	r3, r3, #4
 8001c62:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8001c64:	4b07      	ldr	r3, [pc, #28]	; (8001c84 <FLASH_MassErase+0x44>)
 8001c66:	691a      	ldr	r2, [r3, #16]
 8001c68:	79fb      	ldrb	r3, [r7, #7]
 8001c6a:	021b      	lsls	r3, r3, #8
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	4a05      	ldr	r2, [pc, #20]	; (8001c84 <FLASH_MassErase+0x44>)
 8001c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c74:	6113      	str	r3, [r2, #16]
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	40023c00 	.word	0x40023c00

08001c88 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001c94:	2300      	movs	r3, #0
 8001c96:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001c98:	78fb      	ldrb	r3, [r7, #3]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d102      	bne.n	8001ca4 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	e010      	b.n	8001cc6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001ca4:	78fb      	ldrb	r3, [r7, #3]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d103      	bne.n	8001cb2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001caa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	e009      	b.n	8001cc6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001cb2:	78fb      	ldrb	r3, [r7, #3]
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d103      	bne.n	8001cc0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001cb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	e002      	b.n	8001cc6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001cc0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cc4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001cc6:	4b13      	ldr	r3, [pc, #76]	; (8001d14 <FLASH_Erase_Sector+0x8c>)
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	4a12      	ldr	r2, [pc, #72]	; (8001d14 <FLASH_Erase_Sector+0x8c>)
 8001ccc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cd0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001cd2:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <FLASH_Erase_Sector+0x8c>)
 8001cd4:	691a      	ldr	r2, [r3, #16]
 8001cd6:	490f      	ldr	r1, [pc, #60]	; (8001d14 <FLASH_Erase_Sector+0x8c>)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001cde:	4b0d      	ldr	r3, [pc, #52]	; (8001d14 <FLASH_Erase_Sector+0x8c>)
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	4a0c      	ldr	r2, [pc, #48]	; (8001d14 <FLASH_Erase_Sector+0x8c>)
 8001ce4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ce8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001cea:	4b0a      	ldr	r3, [pc, #40]	; (8001d14 <FLASH_Erase_Sector+0x8c>)
 8001cec:	691a      	ldr	r2, [r3, #16]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	4a07      	ldr	r2, [pc, #28]	; (8001d14 <FLASH_Erase_Sector+0x8c>)
 8001cf6:	f043 0302 	orr.w	r3, r3, #2
 8001cfa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001cfc:	4b05      	ldr	r3, [pc, #20]	; (8001d14 <FLASH_Erase_Sector+0x8c>)
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	4a04      	ldr	r2, [pc, #16]	; (8001d14 <FLASH_Erase_Sector+0x8c>)
 8001d02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d06:	6113      	str	r3, [r2, #16]
}
 8001d08:	bf00      	nop
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	40023c00 	.word	0x40023c00

08001d18 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8001d1c:	4b20      	ldr	r3, [pc, #128]	; (8001da0 <FLASH_FlushCaches+0x88>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d017      	beq.n	8001d58 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001d28:	4b1d      	ldr	r3, [pc, #116]	; (8001da0 <FLASH_FlushCaches+0x88>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a1c      	ldr	r2, [pc, #112]	; (8001da0 <FLASH_FlushCaches+0x88>)
 8001d2e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001d32:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001d34:	4b1a      	ldr	r3, [pc, #104]	; (8001da0 <FLASH_FlushCaches+0x88>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a19      	ldr	r2, [pc, #100]	; (8001da0 <FLASH_FlushCaches+0x88>)
 8001d3a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d3e:	6013      	str	r3, [r2, #0]
 8001d40:	4b17      	ldr	r3, [pc, #92]	; (8001da0 <FLASH_FlushCaches+0x88>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a16      	ldr	r2, [pc, #88]	; (8001da0 <FLASH_FlushCaches+0x88>)
 8001d46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d4a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d4c:	4b14      	ldr	r3, [pc, #80]	; (8001da0 <FLASH_FlushCaches+0x88>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a13      	ldr	r2, [pc, #76]	; (8001da0 <FLASH_FlushCaches+0x88>)
 8001d52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d56:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001d58:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <FLASH_FlushCaches+0x88>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d017      	beq.n	8001d94 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001d64:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <FLASH_FlushCaches+0x88>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a0d      	ldr	r2, [pc, #52]	; (8001da0 <FLASH_FlushCaches+0x88>)
 8001d6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d6e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001d70:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <FLASH_FlushCaches+0x88>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a0a      	ldr	r2, [pc, #40]	; (8001da0 <FLASH_FlushCaches+0x88>)
 8001d76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d7a:	6013      	str	r3, [r2, #0]
 8001d7c:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <FLASH_FlushCaches+0x88>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a07      	ldr	r2, [pc, #28]	; (8001da0 <FLASH_FlushCaches+0x88>)
 8001d82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d86:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d88:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <FLASH_FlushCaches+0x88>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a04      	ldr	r2, [pc, #16]	; (8001da0 <FLASH_FlushCaches+0x88>)
 8001d8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d92:	6013      	str	r3, [r2, #0]
  }
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	40023c00 	.word	0x40023c00

08001da4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b089      	sub	sp, #36	; 0x24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001db2:	2300      	movs	r3, #0
 8001db4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001db6:	2300      	movs	r3, #0
 8001db8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61fb      	str	r3, [r7, #28]
 8001dbe:	e16b      	b.n	8002098 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	f040 815a 	bne.w	8002092 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d00b      	beq.n	8001dfe <HAL_GPIO_Init+0x5a>
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d007      	beq.n	8001dfe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001df2:	2b11      	cmp	r3, #17
 8001df4:	d003      	beq.n	8001dfe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b12      	cmp	r3, #18
 8001dfc:	d130      	bne.n	8001e60 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	2203      	movs	r2, #3
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4013      	ands	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	68da      	ldr	r2, [r3, #12]
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e34:	2201      	movs	r2, #1
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4013      	ands	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	091b      	lsrs	r3, r3, #4
 8001e4a:	f003 0201 	and.w	r2, r3, #1
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d003      	beq.n	8001ea0 <HAL_GPIO_Init+0xfc>
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b12      	cmp	r3, #18
 8001e9e:	d123      	bne.n	8001ee8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	08da      	lsrs	r2, r3, #3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3208      	adds	r2, #8
 8001ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	f003 0307 	and.w	r3, r3, #7
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	220f      	movs	r2, #15
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	691a      	ldr	r2, [r3, #16]
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	08da      	lsrs	r2, r3, #3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3208      	adds	r2, #8
 8001ee2:	69b9      	ldr	r1, [r7, #24]
 8001ee4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	2203      	movs	r2, #3
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f003 0203 	and.w	r2, r3, #3
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f000 80b4 	beq.w	8002092 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	4b5f      	ldr	r3, [pc, #380]	; (80020ac <HAL_GPIO_Init+0x308>)
 8001f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f32:	4a5e      	ldr	r2, [pc, #376]	; (80020ac <HAL_GPIO_Init+0x308>)
 8001f34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f38:	6453      	str	r3, [r2, #68]	; 0x44
 8001f3a:	4b5c      	ldr	r3, [pc, #368]	; (80020ac <HAL_GPIO_Init+0x308>)
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f46:	4a5a      	ldr	r2, [pc, #360]	; (80020b0 <HAL_GPIO_Init+0x30c>)
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	089b      	lsrs	r3, r3, #2
 8001f4c:	3302      	adds	r3, #2
 8001f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	f003 0303 	and.w	r3, r3, #3
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	220f      	movs	r2, #15
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43db      	mvns	r3, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4013      	ands	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a51      	ldr	r2, [pc, #324]	; (80020b4 <HAL_GPIO_Init+0x310>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d02b      	beq.n	8001fca <HAL_GPIO_Init+0x226>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a50      	ldr	r2, [pc, #320]	; (80020b8 <HAL_GPIO_Init+0x314>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d025      	beq.n	8001fc6 <HAL_GPIO_Init+0x222>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a4f      	ldr	r2, [pc, #316]	; (80020bc <HAL_GPIO_Init+0x318>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d01f      	beq.n	8001fc2 <HAL_GPIO_Init+0x21e>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a4e      	ldr	r2, [pc, #312]	; (80020c0 <HAL_GPIO_Init+0x31c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d019      	beq.n	8001fbe <HAL_GPIO_Init+0x21a>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a4d      	ldr	r2, [pc, #308]	; (80020c4 <HAL_GPIO_Init+0x320>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d013      	beq.n	8001fba <HAL_GPIO_Init+0x216>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a4c      	ldr	r2, [pc, #304]	; (80020c8 <HAL_GPIO_Init+0x324>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d00d      	beq.n	8001fb6 <HAL_GPIO_Init+0x212>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a4b      	ldr	r2, [pc, #300]	; (80020cc <HAL_GPIO_Init+0x328>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d007      	beq.n	8001fb2 <HAL_GPIO_Init+0x20e>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a4a      	ldr	r2, [pc, #296]	; (80020d0 <HAL_GPIO_Init+0x32c>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d101      	bne.n	8001fae <HAL_GPIO_Init+0x20a>
 8001faa:	2307      	movs	r3, #7
 8001fac:	e00e      	b.n	8001fcc <HAL_GPIO_Init+0x228>
 8001fae:	2308      	movs	r3, #8
 8001fb0:	e00c      	b.n	8001fcc <HAL_GPIO_Init+0x228>
 8001fb2:	2306      	movs	r3, #6
 8001fb4:	e00a      	b.n	8001fcc <HAL_GPIO_Init+0x228>
 8001fb6:	2305      	movs	r3, #5
 8001fb8:	e008      	b.n	8001fcc <HAL_GPIO_Init+0x228>
 8001fba:	2304      	movs	r3, #4
 8001fbc:	e006      	b.n	8001fcc <HAL_GPIO_Init+0x228>
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e004      	b.n	8001fcc <HAL_GPIO_Init+0x228>
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	e002      	b.n	8001fcc <HAL_GPIO_Init+0x228>
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e000      	b.n	8001fcc <HAL_GPIO_Init+0x228>
 8001fca:	2300      	movs	r3, #0
 8001fcc:	69fa      	ldr	r2, [r7, #28]
 8001fce:	f002 0203 	and.w	r2, r2, #3
 8001fd2:	0092      	lsls	r2, r2, #2
 8001fd4:	4093      	lsls	r3, r2
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fdc:	4934      	ldr	r1, [pc, #208]	; (80020b0 <HAL_GPIO_Init+0x30c>)
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	089b      	lsrs	r3, r3, #2
 8001fe2:	3302      	adds	r3, #2
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fea:	4b3a      	ldr	r3, [pc, #232]	; (80020d4 <HAL_GPIO_Init+0x330>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	4313      	orrs	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800200e:	4a31      	ldr	r2, [pc, #196]	; (80020d4 <HAL_GPIO_Init+0x330>)
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002014:	4b2f      	ldr	r3, [pc, #188]	; (80020d4 <HAL_GPIO_Init+0x330>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	43db      	mvns	r3, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4013      	ands	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d003      	beq.n	8002038 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	4313      	orrs	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002038:	4a26      	ldr	r2, [pc, #152]	; (80020d4 <HAL_GPIO_Init+0x330>)
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800203e:	4b25      	ldr	r3, [pc, #148]	; (80020d4 <HAL_GPIO_Init+0x330>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	43db      	mvns	r3, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4013      	ands	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	4313      	orrs	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002062:	4a1c      	ldr	r2, [pc, #112]	; (80020d4 <HAL_GPIO_Init+0x330>)
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002068:	4b1a      	ldr	r3, [pc, #104]	; (80020d4 <HAL_GPIO_Init+0x330>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	43db      	mvns	r3, r3
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	4013      	ands	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d003      	beq.n	800208c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	4313      	orrs	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800208c:	4a11      	ldr	r2, [pc, #68]	; (80020d4 <HAL_GPIO_Init+0x330>)
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	3301      	adds	r3, #1
 8002096:	61fb      	str	r3, [r7, #28]
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	2b0f      	cmp	r3, #15
 800209c:	f67f ae90 	bls.w	8001dc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020a0:	bf00      	nop
 80020a2:	3724      	adds	r7, #36	; 0x24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	40023800 	.word	0x40023800
 80020b0:	40013800 	.word	0x40013800
 80020b4:	40020000 	.word	0x40020000
 80020b8:	40020400 	.word	0x40020400
 80020bc:	40020800 	.word	0x40020800
 80020c0:	40020c00 	.word	0x40020c00
 80020c4:	40021000 	.word	0x40021000
 80020c8:	40021400 	.word	0x40021400
 80020cc:	40021800 	.word	0x40021800
 80020d0:	40021c00 	.word	0x40021c00
 80020d4:	40013c00 	.word	0x40013c00

080020d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e25b      	b.n	80025a2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d075      	beq.n	80021e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020f6:	4ba3      	ldr	r3, [pc, #652]	; (8002384 <HAL_RCC_OscConfig+0x2ac>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 030c 	and.w	r3, r3, #12
 80020fe:	2b04      	cmp	r3, #4
 8002100:	d00c      	beq.n	800211c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002102:	4ba0      	ldr	r3, [pc, #640]	; (8002384 <HAL_RCC_OscConfig+0x2ac>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800210a:	2b08      	cmp	r3, #8
 800210c:	d112      	bne.n	8002134 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800210e:	4b9d      	ldr	r3, [pc, #628]	; (8002384 <HAL_RCC_OscConfig+0x2ac>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002116:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800211a:	d10b      	bne.n	8002134 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800211c:	4b99      	ldr	r3, [pc, #612]	; (8002384 <HAL_RCC_OscConfig+0x2ac>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d05b      	beq.n	80021e0 <HAL_RCC_OscConfig+0x108>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d157      	bne.n	80021e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e236      	b.n	80025a2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800213c:	d106      	bne.n	800214c <HAL_RCC_OscConfig+0x74>
 800213e:	4b91      	ldr	r3, [pc, #580]	; (8002384 <HAL_RCC_OscConfig+0x2ac>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a90      	ldr	r2, [pc, #576]	; (8002384 <HAL_RCC_OscConfig+0x2ac>)
 8002144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002148:	6013      	str	r3, [r2, #0]
 800214a:	e01d      	b.n	8002188 <HAL_RCC_OscConfig+0xb0>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002154:	d10c      	bne.n	8002170 <HAL_RCC_OscConfig+0x98>
 8002156:	4b8b      	ldr	r3, [pc, #556]	; (8002384 <HAL_RCC_OscConfig+0x2ac>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a8a      	ldr	r2, [pc, #552]	; (8002384 <HAL_RCC_OscConfig+0x2ac>)
 800215c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002160:	6013      	str	r3, [r2, #0]
 8002162:	4b88      	ldr	r3, [pc, #544]	; (8002384 <HAL_RCC_OscConfig+0x2ac>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a87      	ldr	r2, [pc, #540]	; (8002384 <HAL_RCC_OscConfig+0x2ac>)
 8002168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800216c:	6013      	str	r3, [r2, #0]
 800216e:	e00b      	b.n	8002188 <HAL_RCC_OscConfig+0xb0>
 8002170:	4b84      	ldr	r3, [pc, #528]	; (8002384 <HAL_RCC_OscConfig+0x2ac>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a83      	ldr	r2, [pc, #524]	; (8002384 <HAL_RCC_OscConfig+0x2ac>)
 8002176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800217a:	6013      	str	r3, [r2, #0]
 800217c:	4b81      	ldr	r3, [pc, #516]	; (8002384 <HAL_RCC_OscConfig+0x2ac>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a80      	ldr	r2, [pc, #512]	; (8002384 <HAL_RCC_OscConfig+0x2ac>)
 8002182:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002186:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d013      	beq.n	80021b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002190:	f7fe fea6 	bl	8000ee0 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002198:	f7fe fea2 	bl	8000ee0 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b64      	cmp	r3, #100	; 0x64
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e1fb      	b.n	80025a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021aa:	4b76      	ldr	r3, [pc, #472]	; (8002384 <HAL_RCC_OscConfig+0x2ac>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d0f0      	beq.n	8002198 <HAL_RCC_OscConfig+0xc0>
 80021b6:	e014      	b.n	80021e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b8:	f7fe fe92 	bl	8000ee0 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021c0:	f7fe fe8e 	bl	8000ee0 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b64      	cmp	r3, #100	; 0x64
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e1e7      	b.n	80025a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021d2:	4b6c      	ldr	r3, [pc, #432]	; (8002384 <HAL_RCC_OscConfig+0x2ac>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1f0      	bne.n	80021c0 <HAL_RCC_OscConfig+0xe8>
 80021de:	e000      	b.n	80021e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d063      	beq.n	80022b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021ee:	4b65      	ldr	r3, [pc, #404]	; (8002384 <HAL_RCC_OscConfig+0x2ac>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 030c 	and.w	r3, r3, #12
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00b      	beq.n	8002212 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021fa:	4b62      	ldr	r3, [pc, #392]	; (8002384 <HAL_RCC_OscConfig+0x2ac>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002202:	2b08      	cmp	r3, #8
 8002204:	d11c      	bne.n	8002240 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002206:	4b5f      	ldr	r3, [pc, #380]	; (8002384 <HAL_RCC_OscConfig+0x2ac>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d116      	bne.n	8002240 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002212:	4b5c      	ldr	r3, [pc, #368]	; (8002384 <HAL_RCC_OscConfig+0x2ac>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d005      	beq.n	800222a <HAL_RCC_OscConfig+0x152>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d001      	beq.n	800222a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e1bb      	b.n	80025a2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800222a:	4b56      	ldr	r3, [pc, #344]	; (8002384 <HAL_RCC_OscConfig+0x2ac>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	4952      	ldr	r1, [pc, #328]	; (8002384 <HAL_RCC_OscConfig+0x2ac>)
 800223a:	4313      	orrs	r3, r2
 800223c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800223e:	e03a      	b.n	80022b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d020      	beq.n	800228a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002248:	4b4f      	ldr	r3, [pc, #316]	; (8002388 <HAL_RCC_OscConfig+0x2b0>)
 800224a:	2201      	movs	r2, #1
 800224c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224e:	f7fe fe47 	bl	8000ee0 <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002256:	f7fe fe43 	bl	8000ee0 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e19c      	b.n	80025a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002268:	4b46      	ldr	r3, [pc, #280]	; (8002384 <HAL_RCC_OscConfig+0x2ac>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0f0      	beq.n	8002256 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002274:	4b43      	ldr	r3, [pc, #268]	; (8002384 <HAL_RCC_OscConfig+0x2ac>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	4940      	ldr	r1, [pc, #256]	; (8002384 <HAL_RCC_OscConfig+0x2ac>)
 8002284:	4313      	orrs	r3, r2
 8002286:	600b      	str	r3, [r1, #0]
 8002288:	e015      	b.n	80022b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800228a:	4b3f      	ldr	r3, [pc, #252]	; (8002388 <HAL_RCC_OscConfig+0x2b0>)
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002290:	f7fe fe26 	bl	8000ee0 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002298:	f7fe fe22 	bl	8000ee0 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e17b      	b.n	80025a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022aa:	4b36      	ldr	r3, [pc, #216]	; (8002384 <HAL_RCC_OscConfig+0x2ac>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f0      	bne.n	8002298 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d030      	beq.n	8002324 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d016      	beq.n	80022f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ca:	4b30      	ldr	r3, [pc, #192]	; (800238c <HAL_RCC_OscConfig+0x2b4>)
 80022cc:	2201      	movs	r2, #1
 80022ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d0:	f7fe fe06 	bl	8000ee0 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022d8:	f7fe fe02 	bl	8000ee0 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e15b      	b.n	80025a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ea:	4b26      	ldr	r3, [pc, #152]	; (8002384 <HAL_RCC_OscConfig+0x2ac>)
 80022ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d0f0      	beq.n	80022d8 <HAL_RCC_OscConfig+0x200>
 80022f6:	e015      	b.n	8002324 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022f8:	4b24      	ldr	r3, [pc, #144]	; (800238c <HAL_RCC_OscConfig+0x2b4>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022fe:	f7fe fdef 	bl	8000ee0 <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002306:	f7fe fdeb 	bl	8000ee0 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e144      	b.n	80025a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002318:	4b1a      	ldr	r3, [pc, #104]	; (8002384 <HAL_RCC_OscConfig+0x2ac>)
 800231a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1f0      	bne.n	8002306 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 80a0 	beq.w	8002472 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002332:	2300      	movs	r3, #0
 8002334:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002336:	4b13      	ldr	r3, [pc, #76]	; (8002384 <HAL_RCC_OscConfig+0x2ac>)
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10f      	bne.n	8002362 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	60bb      	str	r3, [r7, #8]
 8002346:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <HAL_RCC_OscConfig+0x2ac>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	4a0e      	ldr	r2, [pc, #56]	; (8002384 <HAL_RCC_OscConfig+0x2ac>)
 800234c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002350:	6413      	str	r3, [r2, #64]	; 0x40
 8002352:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <HAL_RCC_OscConfig+0x2ac>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235a:	60bb      	str	r3, [r7, #8]
 800235c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800235e:	2301      	movs	r3, #1
 8002360:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002362:	4b0b      	ldr	r3, [pc, #44]	; (8002390 <HAL_RCC_OscConfig+0x2b8>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236a:	2b00      	cmp	r3, #0
 800236c:	d121      	bne.n	80023b2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800236e:	4b08      	ldr	r3, [pc, #32]	; (8002390 <HAL_RCC_OscConfig+0x2b8>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a07      	ldr	r2, [pc, #28]	; (8002390 <HAL_RCC_OscConfig+0x2b8>)
 8002374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002378:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800237a:	f7fe fdb1 	bl	8000ee0 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002380:	e011      	b.n	80023a6 <HAL_RCC_OscConfig+0x2ce>
 8002382:	bf00      	nop
 8002384:	40023800 	.word	0x40023800
 8002388:	42470000 	.word	0x42470000
 800238c:	42470e80 	.word	0x42470e80
 8002390:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002394:	f7fe fda4 	bl	8000ee0 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e0fd      	b.n	80025a2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a6:	4b81      	ldr	r3, [pc, #516]	; (80025ac <HAL_RCC_OscConfig+0x4d4>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0f0      	beq.n	8002394 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d106      	bne.n	80023c8 <HAL_RCC_OscConfig+0x2f0>
 80023ba:	4b7d      	ldr	r3, [pc, #500]	; (80025b0 <HAL_RCC_OscConfig+0x4d8>)
 80023bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023be:	4a7c      	ldr	r2, [pc, #496]	; (80025b0 <HAL_RCC_OscConfig+0x4d8>)
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	6713      	str	r3, [r2, #112]	; 0x70
 80023c6:	e01c      	b.n	8002402 <HAL_RCC_OscConfig+0x32a>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	2b05      	cmp	r3, #5
 80023ce:	d10c      	bne.n	80023ea <HAL_RCC_OscConfig+0x312>
 80023d0:	4b77      	ldr	r3, [pc, #476]	; (80025b0 <HAL_RCC_OscConfig+0x4d8>)
 80023d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d4:	4a76      	ldr	r2, [pc, #472]	; (80025b0 <HAL_RCC_OscConfig+0x4d8>)
 80023d6:	f043 0304 	orr.w	r3, r3, #4
 80023da:	6713      	str	r3, [r2, #112]	; 0x70
 80023dc:	4b74      	ldr	r3, [pc, #464]	; (80025b0 <HAL_RCC_OscConfig+0x4d8>)
 80023de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e0:	4a73      	ldr	r2, [pc, #460]	; (80025b0 <HAL_RCC_OscConfig+0x4d8>)
 80023e2:	f043 0301 	orr.w	r3, r3, #1
 80023e6:	6713      	str	r3, [r2, #112]	; 0x70
 80023e8:	e00b      	b.n	8002402 <HAL_RCC_OscConfig+0x32a>
 80023ea:	4b71      	ldr	r3, [pc, #452]	; (80025b0 <HAL_RCC_OscConfig+0x4d8>)
 80023ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ee:	4a70      	ldr	r2, [pc, #448]	; (80025b0 <HAL_RCC_OscConfig+0x4d8>)
 80023f0:	f023 0301 	bic.w	r3, r3, #1
 80023f4:	6713      	str	r3, [r2, #112]	; 0x70
 80023f6:	4b6e      	ldr	r3, [pc, #440]	; (80025b0 <HAL_RCC_OscConfig+0x4d8>)
 80023f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fa:	4a6d      	ldr	r2, [pc, #436]	; (80025b0 <HAL_RCC_OscConfig+0x4d8>)
 80023fc:	f023 0304 	bic.w	r3, r3, #4
 8002400:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d015      	beq.n	8002436 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800240a:	f7fe fd69 	bl	8000ee0 <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002410:	e00a      	b.n	8002428 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002412:	f7fe fd65 	bl	8000ee0 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002420:	4293      	cmp	r3, r2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e0bc      	b.n	80025a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002428:	4b61      	ldr	r3, [pc, #388]	; (80025b0 <HAL_RCC_OscConfig+0x4d8>)
 800242a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0ee      	beq.n	8002412 <HAL_RCC_OscConfig+0x33a>
 8002434:	e014      	b.n	8002460 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002436:	f7fe fd53 	bl	8000ee0 <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800243c:	e00a      	b.n	8002454 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800243e:	f7fe fd4f 	bl	8000ee0 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	f241 3288 	movw	r2, #5000	; 0x1388
 800244c:	4293      	cmp	r3, r2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e0a6      	b.n	80025a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002454:	4b56      	ldr	r3, [pc, #344]	; (80025b0 <HAL_RCC_OscConfig+0x4d8>)
 8002456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1ee      	bne.n	800243e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002460:	7dfb      	ldrb	r3, [r7, #23]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d105      	bne.n	8002472 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002466:	4b52      	ldr	r3, [pc, #328]	; (80025b0 <HAL_RCC_OscConfig+0x4d8>)
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	4a51      	ldr	r2, [pc, #324]	; (80025b0 <HAL_RCC_OscConfig+0x4d8>)
 800246c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002470:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 8092 	beq.w	80025a0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800247c:	4b4c      	ldr	r3, [pc, #304]	; (80025b0 <HAL_RCC_OscConfig+0x4d8>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f003 030c 	and.w	r3, r3, #12
 8002484:	2b08      	cmp	r3, #8
 8002486:	d05c      	beq.n	8002542 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	2b02      	cmp	r3, #2
 800248e:	d141      	bne.n	8002514 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002490:	4b48      	ldr	r3, [pc, #288]	; (80025b4 <HAL_RCC_OscConfig+0x4dc>)
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002496:	f7fe fd23 	bl	8000ee0 <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800249e:	f7fe fd1f 	bl	8000ee0 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e078      	b.n	80025a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024b0:	4b3f      	ldr	r3, [pc, #252]	; (80025b0 <HAL_RCC_OscConfig+0x4d8>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1f0      	bne.n	800249e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	69da      	ldr	r2, [r3, #28]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	431a      	orrs	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ca:	019b      	lsls	r3, r3, #6
 80024cc:	431a      	orrs	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d2:	085b      	lsrs	r3, r3, #1
 80024d4:	3b01      	subs	r3, #1
 80024d6:	041b      	lsls	r3, r3, #16
 80024d8:	431a      	orrs	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024de:	061b      	lsls	r3, r3, #24
 80024e0:	4933      	ldr	r1, [pc, #204]	; (80025b0 <HAL_RCC_OscConfig+0x4d8>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024e6:	4b33      	ldr	r3, [pc, #204]	; (80025b4 <HAL_RCC_OscConfig+0x4dc>)
 80024e8:	2201      	movs	r2, #1
 80024ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ec:	f7fe fcf8 	bl	8000ee0 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f4:	f7fe fcf4 	bl	8000ee0 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e04d      	b.n	80025a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002506:	4b2a      	ldr	r3, [pc, #168]	; (80025b0 <HAL_RCC_OscConfig+0x4d8>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0f0      	beq.n	80024f4 <HAL_RCC_OscConfig+0x41c>
 8002512:	e045      	b.n	80025a0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002514:	4b27      	ldr	r3, [pc, #156]	; (80025b4 <HAL_RCC_OscConfig+0x4dc>)
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251a:	f7fe fce1 	bl	8000ee0 <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002520:	e008      	b.n	8002534 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002522:	f7fe fcdd 	bl	8000ee0 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e036      	b.n	80025a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002534:	4b1e      	ldr	r3, [pc, #120]	; (80025b0 <HAL_RCC_OscConfig+0x4d8>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1f0      	bne.n	8002522 <HAL_RCC_OscConfig+0x44a>
 8002540:	e02e      	b.n	80025a0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d101      	bne.n	800254e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e029      	b.n	80025a2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800254e:	4b18      	ldr	r3, [pc, #96]	; (80025b0 <HAL_RCC_OscConfig+0x4d8>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	429a      	cmp	r2, r3
 8002560:	d11c      	bne.n	800259c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256c:	429a      	cmp	r2, r3
 800256e:	d115      	bne.n	800259c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002576:	4013      	ands	r3, r2
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800257c:	4293      	cmp	r3, r2
 800257e:	d10d      	bne.n	800259c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800258a:	429a      	cmp	r2, r3
 800258c:	d106      	bne.n	800259c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002598:	429a      	cmp	r2, r3
 800259a:	d001      	beq.n	80025a0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e000      	b.n	80025a2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3718      	adds	r7, #24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40007000 	.word	0x40007000
 80025b0:	40023800 	.word	0x40023800
 80025b4:	42470060 	.word	0x42470060

080025b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d101      	bne.n	80025cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e0cc      	b.n	8002766 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025cc:	4b68      	ldr	r3, [pc, #416]	; (8002770 <HAL_RCC_ClockConfig+0x1b8>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 030f 	and.w	r3, r3, #15
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d90c      	bls.n	80025f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025da:	4b65      	ldr	r3, [pc, #404]	; (8002770 <HAL_RCC_ClockConfig+0x1b8>)
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e2:	4b63      	ldr	r3, [pc, #396]	; (8002770 <HAL_RCC_ClockConfig+0x1b8>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d001      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e0b8      	b.n	8002766 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d020      	beq.n	8002642 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0304 	and.w	r3, r3, #4
 8002608:	2b00      	cmp	r3, #0
 800260a:	d005      	beq.n	8002618 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800260c:	4b59      	ldr	r3, [pc, #356]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	4a58      	ldr	r2, [pc, #352]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 8002612:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002616:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0308 	and.w	r3, r3, #8
 8002620:	2b00      	cmp	r3, #0
 8002622:	d005      	beq.n	8002630 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002624:	4b53      	ldr	r3, [pc, #332]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	4a52      	ldr	r2, [pc, #328]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 800262a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800262e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002630:	4b50      	ldr	r3, [pc, #320]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	494d      	ldr	r1, [pc, #308]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 800263e:	4313      	orrs	r3, r2
 8002640:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b00      	cmp	r3, #0
 800264c:	d044      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d107      	bne.n	8002666 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002656:	4b47      	ldr	r3, [pc, #284]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d119      	bne.n	8002696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e07f      	b.n	8002766 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	2b02      	cmp	r3, #2
 800266c:	d003      	beq.n	8002676 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002672:	2b03      	cmp	r3, #3
 8002674:	d107      	bne.n	8002686 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002676:	4b3f      	ldr	r3, [pc, #252]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d109      	bne.n	8002696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e06f      	b.n	8002766 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002686:	4b3b      	ldr	r3, [pc, #236]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e067      	b.n	8002766 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002696:	4b37      	ldr	r3, [pc, #220]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f023 0203 	bic.w	r2, r3, #3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	4934      	ldr	r1, [pc, #208]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026a8:	f7fe fc1a 	bl	8000ee0 <HAL_GetTick>
 80026ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ae:	e00a      	b.n	80026c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026b0:	f7fe fc16 	bl	8000ee0 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80026be:	4293      	cmp	r3, r2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e04f      	b.n	8002766 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c6:	4b2b      	ldr	r3, [pc, #172]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 020c 	and.w	r2, r3, #12
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d1eb      	bne.n	80026b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026d8:	4b25      	ldr	r3, [pc, #148]	; (8002770 <HAL_RCC_ClockConfig+0x1b8>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 030f 	and.w	r3, r3, #15
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d20c      	bcs.n	8002700 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e6:	4b22      	ldr	r3, [pc, #136]	; (8002770 <HAL_RCC_ClockConfig+0x1b8>)
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ee:	4b20      	ldr	r3, [pc, #128]	; (8002770 <HAL_RCC_ClockConfig+0x1b8>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 030f 	and.w	r3, r3, #15
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d001      	beq.n	8002700 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e032      	b.n	8002766 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b00      	cmp	r3, #0
 800270a:	d008      	beq.n	800271e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800270c:	4b19      	ldr	r3, [pc, #100]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	4916      	ldr	r1, [pc, #88]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 800271a:	4313      	orrs	r3, r2
 800271c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0308 	and.w	r3, r3, #8
 8002726:	2b00      	cmp	r3, #0
 8002728:	d009      	beq.n	800273e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800272a:	4b12      	ldr	r3, [pc, #72]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	490e      	ldr	r1, [pc, #56]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 800273a:	4313      	orrs	r3, r2
 800273c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800273e:	f000 f821 	bl	8002784 <HAL_RCC_GetSysClockFreq>
 8002742:	4601      	mov	r1, r0
 8002744:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	091b      	lsrs	r3, r3, #4
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	4a0a      	ldr	r2, [pc, #40]	; (8002778 <HAL_RCC_ClockConfig+0x1c0>)
 8002750:	5cd3      	ldrb	r3, [r2, r3]
 8002752:	fa21 f303 	lsr.w	r3, r1, r3
 8002756:	4a09      	ldr	r2, [pc, #36]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 8002758:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800275a:	4b09      	ldr	r3, [pc, #36]	; (8002780 <HAL_RCC_ClockConfig+0x1c8>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f7fe fb7a 	bl	8000e58 <HAL_InitTick>

  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40023c00 	.word	0x40023c00
 8002774:	40023800 	.word	0x40023800
 8002778:	080035d8 	.word	0x080035d8
 800277c:	20000004 	.word	0x20000004
 8002780:	20000008 	.word	0x20000008

08002784 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800278a:	2300      	movs	r3, #0
 800278c:	607b      	str	r3, [r7, #4]
 800278e:	2300      	movs	r3, #0
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	2300      	movs	r3, #0
 8002794:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002796:	2300      	movs	r3, #0
 8002798:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800279a:	4b50      	ldr	r3, [pc, #320]	; (80028dc <HAL_RCC_GetSysClockFreq+0x158>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 030c 	and.w	r3, r3, #12
 80027a2:	2b04      	cmp	r3, #4
 80027a4:	d007      	beq.n	80027b6 <HAL_RCC_GetSysClockFreq+0x32>
 80027a6:	2b08      	cmp	r3, #8
 80027a8:	d008      	beq.n	80027bc <HAL_RCC_GetSysClockFreq+0x38>
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f040 808d 	bne.w	80028ca <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027b0:	4b4b      	ldr	r3, [pc, #300]	; (80028e0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80027b2:	60bb      	str	r3, [r7, #8]
       break;
 80027b4:	e08c      	b.n	80028d0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027b6:	4b4b      	ldr	r3, [pc, #300]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80027b8:	60bb      	str	r3, [r7, #8]
      break;
 80027ba:	e089      	b.n	80028d0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027bc:	4b47      	ldr	r3, [pc, #284]	; (80028dc <HAL_RCC_GetSysClockFreq+0x158>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027c4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027c6:	4b45      	ldr	r3, [pc, #276]	; (80028dc <HAL_RCC_GetSysClockFreq+0x158>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d023      	beq.n	800281a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027d2:	4b42      	ldr	r3, [pc, #264]	; (80028dc <HAL_RCC_GetSysClockFreq+0x158>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	099b      	lsrs	r3, r3, #6
 80027d8:	f04f 0400 	mov.w	r4, #0
 80027dc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80027e0:	f04f 0200 	mov.w	r2, #0
 80027e4:	ea03 0501 	and.w	r5, r3, r1
 80027e8:	ea04 0602 	and.w	r6, r4, r2
 80027ec:	4a3d      	ldr	r2, [pc, #244]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80027ee:	fb02 f106 	mul.w	r1, r2, r6
 80027f2:	2200      	movs	r2, #0
 80027f4:	fb02 f205 	mul.w	r2, r2, r5
 80027f8:	440a      	add	r2, r1
 80027fa:	493a      	ldr	r1, [pc, #232]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80027fc:	fba5 0101 	umull	r0, r1, r5, r1
 8002800:	1853      	adds	r3, r2, r1
 8002802:	4619      	mov	r1, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f04f 0400 	mov.w	r4, #0
 800280a:	461a      	mov	r2, r3
 800280c:	4623      	mov	r3, r4
 800280e:	f7fd fcdb 	bl	80001c8 <__aeabi_uldivmod>
 8002812:	4603      	mov	r3, r0
 8002814:	460c      	mov	r4, r1
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	e049      	b.n	80028ae <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800281a:	4b30      	ldr	r3, [pc, #192]	; (80028dc <HAL_RCC_GetSysClockFreq+0x158>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	099b      	lsrs	r3, r3, #6
 8002820:	f04f 0400 	mov.w	r4, #0
 8002824:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002828:	f04f 0200 	mov.w	r2, #0
 800282c:	ea03 0501 	and.w	r5, r3, r1
 8002830:	ea04 0602 	and.w	r6, r4, r2
 8002834:	4629      	mov	r1, r5
 8002836:	4632      	mov	r2, r6
 8002838:	f04f 0300 	mov.w	r3, #0
 800283c:	f04f 0400 	mov.w	r4, #0
 8002840:	0154      	lsls	r4, r2, #5
 8002842:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002846:	014b      	lsls	r3, r1, #5
 8002848:	4619      	mov	r1, r3
 800284a:	4622      	mov	r2, r4
 800284c:	1b49      	subs	r1, r1, r5
 800284e:	eb62 0206 	sbc.w	r2, r2, r6
 8002852:	f04f 0300 	mov.w	r3, #0
 8002856:	f04f 0400 	mov.w	r4, #0
 800285a:	0194      	lsls	r4, r2, #6
 800285c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002860:	018b      	lsls	r3, r1, #6
 8002862:	1a5b      	subs	r3, r3, r1
 8002864:	eb64 0402 	sbc.w	r4, r4, r2
 8002868:	f04f 0100 	mov.w	r1, #0
 800286c:	f04f 0200 	mov.w	r2, #0
 8002870:	00e2      	lsls	r2, r4, #3
 8002872:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002876:	00d9      	lsls	r1, r3, #3
 8002878:	460b      	mov	r3, r1
 800287a:	4614      	mov	r4, r2
 800287c:	195b      	adds	r3, r3, r5
 800287e:	eb44 0406 	adc.w	r4, r4, r6
 8002882:	f04f 0100 	mov.w	r1, #0
 8002886:	f04f 0200 	mov.w	r2, #0
 800288a:	02a2      	lsls	r2, r4, #10
 800288c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002890:	0299      	lsls	r1, r3, #10
 8002892:	460b      	mov	r3, r1
 8002894:	4614      	mov	r4, r2
 8002896:	4618      	mov	r0, r3
 8002898:	4621      	mov	r1, r4
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f04f 0400 	mov.w	r4, #0
 80028a0:	461a      	mov	r2, r3
 80028a2:	4623      	mov	r3, r4
 80028a4:	f7fd fc90 	bl	80001c8 <__aeabi_uldivmod>
 80028a8:	4603      	mov	r3, r0
 80028aa:	460c      	mov	r4, r1
 80028ac:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028ae:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <HAL_RCC_GetSysClockFreq+0x158>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	0c1b      	lsrs	r3, r3, #16
 80028b4:	f003 0303 	and.w	r3, r3, #3
 80028b8:	3301      	adds	r3, #1
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c6:	60bb      	str	r3, [r7, #8]
      break;
 80028c8:	e002      	b.n	80028d0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028ca:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80028cc:	60bb      	str	r3, [r7, #8]
      break;
 80028ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028d0:	68bb      	ldr	r3, [r7, #8]
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3714      	adds	r7, #20
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028da:	bf00      	nop
 80028dc:	40023800 	.word	0x40023800
 80028e0:	00f42400 	.word	0x00f42400
 80028e4:	017d7840 	.word	0x017d7840

080028e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028ec:	4b03      	ldr	r3, [pc, #12]	; (80028fc <HAL_RCC_GetHCLKFreq+0x14>)
 80028ee:	681b      	ldr	r3, [r3, #0]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	20000004 	.word	0x20000004

08002900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002904:	f7ff fff0 	bl	80028e8 <HAL_RCC_GetHCLKFreq>
 8002908:	4601      	mov	r1, r0
 800290a:	4b05      	ldr	r3, [pc, #20]	; (8002920 <HAL_RCC_GetPCLK1Freq+0x20>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	0a9b      	lsrs	r3, r3, #10
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	4a03      	ldr	r2, [pc, #12]	; (8002924 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002916:	5cd3      	ldrb	r3, [r2, r3]
 8002918:	fa21 f303 	lsr.w	r3, r1, r3
}
 800291c:	4618      	mov	r0, r3
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40023800 	.word	0x40023800
 8002924:	080035e8 	.word	0x080035e8

08002928 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800292c:	f7ff ffdc 	bl	80028e8 <HAL_RCC_GetHCLKFreq>
 8002930:	4601      	mov	r1, r0
 8002932:	4b05      	ldr	r3, [pc, #20]	; (8002948 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	0b5b      	lsrs	r3, r3, #13
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	4a03      	ldr	r2, [pc, #12]	; (800294c <HAL_RCC_GetPCLK2Freq+0x24>)
 800293e:	5cd3      	ldrb	r3, [r2, r3]
 8002940:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002944:	4618      	mov	r0, r3
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40023800 	.word	0x40023800
 800294c:	080035e8 	.word	0x080035e8

08002950 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e03f      	b.n	80029e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d106      	bne.n	800297c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7fe f926 	bl	8000bc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2224      	movs	r2, #36	; 0x24
 8002980:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68da      	ldr	r2, [r3, #12]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002992:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 fa5f 	bl	8002e58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	691a      	ldr	r2, [r3, #16]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	695a      	ldr	r2, [r3, #20]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68da      	ldr	r2, [r3, #12]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2220      	movs	r2, #32
 80029d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2220      	movs	r2, #32
 80029dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b088      	sub	sp, #32
 80029ee:	af02      	add	r7, sp, #8
 80029f0:	60f8      	str	r0, [r7, #12]
 80029f2:	60b9      	str	r1, [r7, #8]
 80029f4:	603b      	str	r3, [r7, #0]
 80029f6:	4613      	mov	r3, r2
 80029f8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b20      	cmp	r3, #32
 8002a08:	f040 8083 	bne.w	8002b12 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d002      	beq.n	8002a18 <HAL_UART_Transmit+0x2e>
 8002a12:	88fb      	ldrh	r3, [r7, #6]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d101      	bne.n	8002a1c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e07b      	b.n	8002b14 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d101      	bne.n	8002a2a <HAL_UART_Transmit+0x40>
 8002a26:	2302      	movs	r3, #2
 8002a28:	e074      	b.n	8002b14 <HAL_UART_Transmit+0x12a>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2221      	movs	r2, #33	; 0x21
 8002a3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002a40:	f7fe fa4e 	bl	8000ee0 <HAL_GetTick>
 8002a44:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	88fa      	ldrh	r2, [r7, #6]
 8002a4a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	88fa      	ldrh	r2, [r7, #6]
 8002a50:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002a5a:	e042      	b.n	8002ae2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	3b01      	subs	r3, #1
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a72:	d122      	bne.n	8002aba <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	9300      	str	r3, [sp, #0]
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	2180      	movs	r1, #128	; 0x80
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 f96c 	bl	8002d5c <UART_WaitOnFlagUntilTimeout>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e042      	b.n	8002b14 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	881b      	ldrh	r3, [r3, #0]
 8002a96:	461a      	mov	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002aa0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d103      	bne.n	8002ab2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	3302      	adds	r3, #2
 8002aae:	60bb      	str	r3, [r7, #8]
 8002ab0:	e017      	b.n	8002ae2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	60bb      	str	r3, [r7, #8]
 8002ab8:	e013      	b.n	8002ae2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	9300      	str	r3, [sp, #0]
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	2180      	movs	r1, #128	; 0x80
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f000 f949 	bl	8002d5c <UART_WaitOnFlagUntilTimeout>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e01f      	b.n	8002b14 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	1c5a      	adds	r2, r3, #1
 8002ad8:	60ba      	str	r2, [r7, #8]
 8002ada:	781a      	ldrb	r2, [r3, #0]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1b7      	bne.n	8002a5c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	2200      	movs	r2, #0
 8002af4:	2140      	movs	r1, #64	; 0x40
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 f930 	bl	8002d5c <UART_WaitOnFlagUntilTimeout>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e006      	b.n	8002b14 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2220      	movs	r2, #32
 8002b0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	e000      	b.n	8002b14 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002b12:	2302      	movs	r3, #2
  }
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3718      	adds	r7, #24
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	4613      	mov	r3, r2
 8002b28:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b20      	cmp	r3, #32
 8002b34:	d166      	bne.n	8002c04 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d002      	beq.n	8002b42 <HAL_UART_Receive_DMA+0x26>
 8002b3c:	88fb      	ldrh	r3, [r7, #6]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e05f      	b.n	8002c06 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d101      	bne.n	8002b54 <HAL_UART_Receive_DMA+0x38>
 8002b50:	2302      	movs	r3, #2
 8002b52:	e058      	b.n	8002c06 <HAL_UART_Receive_DMA+0xea>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002b5c:	68ba      	ldr	r2, [r7, #8]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	88fa      	ldrh	r2, [r7, #6]
 8002b66:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2222      	movs	r2, #34	; 0x22
 8002b72:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b7a:	4a25      	ldr	r2, [pc, #148]	; (8002c10 <HAL_UART_Receive_DMA+0xf4>)
 8002b7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b82:	4a24      	ldr	r2, [pc, #144]	; (8002c14 <HAL_UART_Receive_DMA+0xf8>)
 8002b84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b8a:	4a23      	ldr	r2, [pc, #140]	; (8002c18 <HAL_UART_Receive_DMA+0xfc>)
 8002b8c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b92:	2200      	movs	r2, #0
 8002b94:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8002b96:	f107 0308 	add.w	r3, r7, #8
 8002b9a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	88fb      	ldrh	r3, [r7, #6]
 8002bae:	f7fe fb63 	bl	8001278 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	613b      	str	r3, [r7, #16]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	613b      	str	r3, [r7, #16]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	613b      	str	r3, [r7, #16]
 8002bc6:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68da      	ldr	r2, [r3, #12]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bde:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	695a      	ldr	r2, [r3, #20]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f042 0201 	orr.w	r2, r2, #1
 8002bee:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695a      	ldr	r2, [r3, #20]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bfe:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8002c00:	2300      	movs	r3, #0
 8002c02:	e000      	b.n	8002c06 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8002c04:	2302      	movs	r3, #2
  }
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3718      	adds	r7, #24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	08002c45 	.word	0x08002c45
 8002c14:	08002cad 	.word	0x08002cad
 8002c18:	08002cc9 	.word	0x08002cc9

08002c1c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c50:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d11e      	bne.n	8002c9e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68da      	ldr	r2, [r3, #12]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c74:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	695a      	ldr	r2, [r3, #20]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 0201 	bic.w	r2, r2, #1
 8002c84:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	695a      	ldr	r2, [r3, #20]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c94:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2220      	movs	r2, #32
 8002c9a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f7fd fc90 	bl	80005c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ca4:	bf00      	nop
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f7ff ffae 	bl	8002c1c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002cc0:	bf00      	nop
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce4:	2b80      	cmp	r3, #128	; 0x80
 8002ce6:	bf0c      	ite	eq
 8002ce8:	2301      	moveq	r3, #1
 8002cea:	2300      	movne	r3, #0
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b21      	cmp	r3, #33	; 0x21
 8002cfa:	d108      	bne.n	8002d0e <UART_DMAError+0x46>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d005      	beq.n	8002d0e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	2200      	movs	r2, #0
 8002d06:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002d08:	68b8      	ldr	r0, [r7, #8]
 8002d0a:	f000 f871 	bl	8002df0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d18:	2b40      	cmp	r3, #64	; 0x40
 8002d1a:	bf0c      	ite	eq
 8002d1c:	2301      	moveq	r3, #1
 8002d1e:	2300      	movne	r3, #0
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b22      	cmp	r3, #34	; 0x22
 8002d2e:	d108      	bne.n	8002d42 <UART_DMAError+0x7a>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d005      	beq.n	8002d42 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002d3c:	68b8      	ldr	r0, [r7, #8]
 8002d3e:	f000 f86d 	bl	8002e1c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d46:	f043 0210 	orr.w	r2, r3, #16
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d4e:	68b8      	ldr	r0, [r7, #8]
 8002d50:	f7ff ff6e 	bl	8002c30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d54:	bf00      	nop
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	603b      	str	r3, [r7, #0]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d6c:	e02c      	b.n	8002dc8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d74:	d028      	beq.n	8002dc8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d007      	beq.n	8002d8c <UART_WaitOnFlagUntilTimeout+0x30>
 8002d7c:	f7fe f8b0 	bl	8000ee0 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d21d      	bcs.n	8002dc8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68da      	ldr	r2, [r3, #12]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002d9a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	695a      	ldr	r2, [r3, #20]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 0201 	bic.w	r2, r2, #1
 8002daa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2220      	movs	r2, #32
 8002db0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2220      	movs	r2, #32
 8002db8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e00f      	b.n	8002de8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	bf0c      	ite	eq
 8002dd8:	2301      	moveq	r3, #1
 8002dda:	2300      	movne	r3, #0
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	461a      	mov	r2, r3
 8002de0:	79fb      	ldrb	r3, [r7, #7]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d0c3      	beq.n	8002d6e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68da      	ldr	r2, [r3, #12]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002e06:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68da      	ldr	r2, [r3, #12]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002e32:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695a      	ldr	r2, [r3, #20]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 0201 	bic.w	r2, r2, #1
 8002e42:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2220      	movs	r2, #32
 8002e48:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e5c:	b085      	sub	sp, #20
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68da      	ldr	r2, [r3, #12]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	431a      	orrs	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	431a      	orrs	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	69db      	ldr	r3, [r3, #28]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002e9a:	f023 030c 	bic.w	r3, r3, #12
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	6812      	ldr	r2, [r2, #0]
 8002ea2:	68f9      	ldr	r1, [r7, #12]
 8002ea4:	430b      	orrs	r3, r1
 8002ea6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	699a      	ldr	r2, [r3, #24]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ec6:	f040 818b 	bne.w	80031e0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4ac1      	ldr	r2, [pc, #772]	; (80031d4 <UART_SetConfig+0x37c>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d005      	beq.n	8002ee0 <UART_SetConfig+0x88>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4abf      	ldr	r2, [pc, #764]	; (80031d8 <UART_SetConfig+0x380>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	f040 80bd 	bne.w	800305a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ee0:	f7ff fd22 	bl	8002928 <HAL_RCC_GetPCLK2Freq>
 8002ee4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	461d      	mov	r5, r3
 8002eea:	f04f 0600 	mov.w	r6, #0
 8002eee:	46a8      	mov	r8, r5
 8002ef0:	46b1      	mov	r9, r6
 8002ef2:	eb18 0308 	adds.w	r3, r8, r8
 8002ef6:	eb49 0409 	adc.w	r4, r9, r9
 8002efa:	4698      	mov	r8, r3
 8002efc:	46a1      	mov	r9, r4
 8002efe:	eb18 0805 	adds.w	r8, r8, r5
 8002f02:	eb49 0906 	adc.w	r9, r9, r6
 8002f06:	f04f 0100 	mov.w	r1, #0
 8002f0a:	f04f 0200 	mov.w	r2, #0
 8002f0e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002f12:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002f16:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002f1a:	4688      	mov	r8, r1
 8002f1c:	4691      	mov	r9, r2
 8002f1e:	eb18 0005 	adds.w	r0, r8, r5
 8002f22:	eb49 0106 	adc.w	r1, r9, r6
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	461d      	mov	r5, r3
 8002f2c:	f04f 0600 	mov.w	r6, #0
 8002f30:	196b      	adds	r3, r5, r5
 8002f32:	eb46 0406 	adc.w	r4, r6, r6
 8002f36:	461a      	mov	r2, r3
 8002f38:	4623      	mov	r3, r4
 8002f3a:	f7fd f945 	bl	80001c8 <__aeabi_uldivmod>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	460c      	mov	r4, r1
 8002f42:	461a      	mov	r2, r3
 8002f44:	4ba5      	ldr	r3, [pc, #660]	; (80031dc <UART_SetConfig+0x384>)
 8002f46:	fba3 2302 	umull	r2, r3, r3, r2
 8002f4a:	095b      	lsrs	r3, r3, #5
 8002f4c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	461d      	mov	r5, r3
 8002f54:	f04f 0600 	mov.w	r6, #0
 8002f58:	46a9      	mov	r9, r5
 8002f5a:	46b2      	mov	sl, r6
 8002f5c:	eb19 0309 	adds.w	r3, r9, r9
 8002f60:	eb4a 040a 	adc.w	r4, sl, sl
 8002f64:	4699      	mov	r9, r3
 8002f66:	46a2      	mov	sl, r4
 8002f68:	eb19 0905 	adds.w	r9, r9, r5
 8002f6c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002f70:	f04f 0100 	mov.w	r1, #0
 8002f74:	f04f 0200 	mov.w	r2, #0
 8002f78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f7c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f80:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f84:	4689      	mov	r9, r1
 8002f86:	4692      	mov	sl, r2
 8002f88:	eb19 0005 	adds.w	r0, r9, r5
 8002f8c:	eb4a 0106 	adc.w	r1, sl, r6
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	461d      	mov	r5, r3
 8002f96:	f04f 0600 	mov.w	r6, #0
 8002f9a:	196b      	adds	r3, r5, r5
 8002f9c:	eb46 0406 	adc.w	r4, r6, r6
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	4623      	mov	r3, r4
 8002fa4:	f7fd f910 	bl	80001c8 <__aeabi_uldivmod>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	460c      	mov	r4, r1
 8002fac:	461a      	mov	r2, r3
 8002fae:	4b8b      	ldr	r3, [pc, #556]	; (80031dc <UART_SetConfig+0x384>)
 8002fb0:	fba3 1302 	umull	r1, r3, r3, r2
 8002fb4:	095b      	lsrs	r3, r3, #5
 8002fb6:	2164      	movs	r1, #100	; 0x64
 8002fb8:	fb01 f303 	mul.w	r3, r1, r3
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	3332      	adds	r3, #50	; 0x32
 8002fc2:	4a86      	ldr	r2, [pc, #536]	; (80031dc <UART_SetConfig+0x384>)
 8002fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc8:	095b      	lsrs	r3, r3, #5
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002fd0:	4498      	add	r8, r3
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	461d      	mov	r5, r3
 8002fd6:	f04f 0600 	mov.w	r6, #0
 8002fda:	46a9      	mov	r9, r5
 8002fdc:	46b2      	mov	sl, r6
 8002fde:	eb19 0309 	adds.w	r3, r9, r9
 8002fe2:	eb4a 040a 	adc.w	r4, sl, sl
 8002fe6:	4699      	mov	r9, r3
 8002fe8:	46a2      	mov	sl, r4
 8002fea:	eb19 0905 	adds.w	r9, r9, r5
 8002fee:	eb4a 0a06 	adc.w	sl, sl, r6
 8002ff2:	f04f 0100 	mov.w	r1, #0
 8002ff6:	f04f 0200 	mov.w	r2, #0
 8002ffa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ffe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003002:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003006:	4689      	mov	r9, r1
 8003008:	4692      	mov	sl, r2
 800300a:	eb19 0005 	adds.w	r0, r9, r5
 800300e:	eb4a 0106 	adc.w	r1, sl, r6
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	461d      	mov	r5, r3
 8003018:	f04f 0600 	mov.w	r6, #0
 800301c:	196b      	adds	r3, r5, r5
 800301e:	eb46 0406 	adc.w	r4, r6, r6
 8003022:	461a      	mov	r2, r3
 8003024:	4623      	mov	r3, r4
 8003026:	f7fd f8cf 	bl	80001c8 <__aeabi_uldivmod>
 800302a:	4603      	mov	r3, r0
 800302c:	460c      	mov	r4, r1
 800302e:	461a      	mov	r2, r3
 8003030:	4b6a      	ldr	r3, [pc, #424]	; (80031dc <UART_SetConfig+0x384>)
 8003032:	fba3 1302 	umull	r1, r3, r3, r2
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	2164      	movs	r1, #100	; 0x64
 800303a:	fb01 f303 	mul.w	r3, r1, r3
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	00db      	lsls	r3, r3, #3
 8003042:	3332      	adds	r3, #50	; 0x32
 8003044:	4a65      	ldr	r2, [pc, #404]	; (80031dc <UART_SetConfig+0x384>)
 8003046:	fba2 2303 	umull	r2, r3, r2, r3
 800304a:	095b      	lsrs	r3, r3, #5
 800304c:	f003 0207 	and.w	r2, r3, #7
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4442      	add	r2, r8
 8003056:	609a      	str	r2, [r3, #8]
 8003058:	e26f      	b.n	800353a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800305a:	f7ff fc51 	bl	8002900 <HAL_RCC_GetPCLK1Freq>
 800305e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	461d      	mov	r5, r3
 8003064:	f04f 0600 	mov.w	r6, #0
 8003068:	46a8      	mov	r8, r5
 800306a:	46b1      	mov	r9, r6
 800306c:	eb18 0308 	adds.w	r3, r8, r8
 8003070:	eb49 0409 	adc.w	r4, r9, r9
 8003074:	4698      	mov	r8, r3
 8003076:	46a1      	mov	r9, r4
 8003078:	eb18 0805 	adds.w	r8, r8, r5
 800307c:	eb49 0906 	adc.w	r9, r9, r6
 8003080:	f04f 0100 	mov.w	r1, #0
 8003084:	f04f 0200 	mov.w	r2, #0
 8003088:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800308c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003090:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003094:	4688      	mov	r8, r1
 8003096:	4691      	mov	r9, r2
 8003098:	eb18 0005 	adds.w	r0, r8, r5
 800309c:	eb49 0106 	adc.w	r1, r9, r6
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	461d      	mov	r5, r3
 80030a6:	f04f 0600 	mov.w	r6, #0
 80030aa:	196b      	adds	r3, r5, r5
 80030ac:	eb46 0406 	adc.w	r4, r6, r6
 80030b0:	461a      	mov	r2, r3
 80030b2:	4623      	mov	r3, r4
 80030b4:	f7fd f888 	bl	80001c8 <__aeabi_uldivmod>
 80030b8:	4603      	mov	r3, r0
 80030ba:	460c      	mov	r4, r1
 80030bc:	461a      	mov	r2, r3
 80030be:	4b47      	ldr	r3, [pc, #284]	; (80031dc <UART_SetConfig+0x384>)
 80030c0:	fba3 2302 	umull	r2, r3, r3, r2
 80030c4:	095b      	lsrs	r3, r3, #5
 80030c6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	461d      	mov	r5, r3
 80030ce:	f04f 0600 	mov.w	r6, #0
 80030d2:	46a9      	mov	r9, r5
 80030d4:	46b2      	mov	sl, r6
 80030d6:	eb19 0309 	adds.w	r3, r9, r9
 80030da:	eb4a 040a 	adc.w	r4, sl, sl
 80030de:	4699      	mov	r9, r3
 80030e0:	46a2      	mov	sl, r4
 80030e2:	eb19 0905 	adds.w	r9, r9, r5
 80030e6:	eb4a 0a06 	adc.w	sl, sl, r6
 80030ea:	f04f 0100 	mov.w	r1, #0
 80030ee:	f04f 0200 	mov.w	r2, #0
 80030f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80030fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80030fe:	4689      	mov	r9, r1
 8003100:	4692      	mov	sl, r2
 8003102:	eb19 0005 	adds.w	r0, r9, r5
 8003106:	eb4a 0106 	adc.w	r1, sl, r6
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	461d      	mov	r5, r3
 8003110:	f04f 0600 	mov.w	r6, #0
 8003114:	196b      	adds	r3, r5, r5
 8003116:	eb46 0406 	adc.w	r4, r6, r6
 800311a:	461a      	mov	r2, r3
 800311c:	4623      	mov	r3, r4
 800311e:	f7fd f853 	bl	80001c8 <__aeabi_uldivmod>
 8003122:	4603      	mov	r3, r0
 8003124:	460c      	mov	r4, r1
 8003126:	461a      	mov	r2, r3
 8003128:	4b2c      	ldr	r3, [pc, #176]	; (80031dc <UART_SetConfig+0x384>)
 800312a:	fba3 1302 	umull	r1, r3, r3, r2
 800312e:	095b      	lsrs	r3, r3, #5
 8003130:	2164      	movs	r1, #100	; 0x64
 8003132:	fb01 f303 	mul.w	r3, r1, r3
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	3332      	adds	r3, #50	; 0x32
 800313c:	4a27      	ldr	r2, [pc, #156]	; (80031dc <UART_SetConfig+0x384>)
 800313e:	fba2 2303 	umull	r2, r3, r2, r3
 8003142:	095b      	lsrs	r3, r3, #5
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800314a:	4498      	add	r8, r3
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	461d      	mov	r5, r3
 8003150:	f04f 0600 	mov.w	r6, #0
 8003154:	46a9      	mov	r9, r5
 8003156:	46b2      	mov	sl, r6
 8003158:	eb19 0309 	adds.w	r3, r9, r9
 800315c:	eb4a 040a 	adc.w	r4, sl, sl
 8003160:	4699      	mov	r9, r3
 8003162:	46a2      	mov	sl, r4
 8003164:	eb19 0905 	adds.w	r9, r9, r5
 8003168:	eb4a 0a06 	adc.w	sl, sl, r6
 800316c:	f04f 0100 	mov.w	r1, #0
 8003170:	f04f 0200 	mov.w	r2, #0
 8003174:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003178:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800317c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003180:	4689      	mov	r9, r1
 8003182:	4692      	mov	sl, r2
 8003184:	eb19 0005 	adds.w	r0, r9, r5
 8003188:	eb4a 0106 	adc.w	r1, sl, r6
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	461d      	mov	r5, r3
 8003192:	f04f 0600 	mov.w	r6, #0
 8003196:	196b      	adds	r3, r5, r5
 8003198:	eb46 0406 	adc.w	r4, r6, r6
 800319c:	461a      	mov	r2, r3
 800319e:	4623      	mov	r3, r4
 80031a0:	f7fd f812 	bl	80001c8 <__aeabi_uldivmod>
 80031a4:	4603      	mov	r3, r0
 80031a6:	460c      	mov	r4, r1
 80031a8:	461a      	mov	r2, r3
 80031aa:	4b0c      	ldr	r3, [pc, #48]	; (80031dc <UART_SetConfig+0x384>)
 80031ac:	fba3 1302 	umull	r1, r3, r3, r2
 80031b0:	095b      	lsrs	r3, r3, #5
 80031b2:	2164      	movs	r1, #100	; 0x64
 80031b4:	fb01 f303 	mul.w	r3, r1, r3
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	3332      	adds	r3, #50	; 0x32
 80031be:	4a07      	ldr	r2, [pc, #28]	; (80031dc <UART_SetConfig+0x384>)
 80031c0:	fba2 2303 	umull	r2, r3, r2, r3
 80031c4:	095b      	lsrs	r3, r3, #5
 80031c6:	f003 0207 	and.w	r2, r3, #7
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4442      	add	r2, r8
 80031d0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80031d2:	e1b2      	b.n	800353a <UART_SetConfig+0x6e2>
 80031d4:	40011000 	.word	0x40011000
 80031d8:	40011400 	.word	0x40011400
 80031dc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4ad7      	ldr	r2, [pc, #860]	; (8003544 <UART_SetConfig+0x6ec>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d005      	beq.n	80031f6 <UART_SetConfig+0x39e>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4ad6      	ldr	r2, [pc, #856]	; (8003548 <UART_SetConfig+0x6f0>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	f040 80d1 	bne.w	8003398 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80031f6:	f7ff fb97 	bl	8002928 <HAL_RCC_GetPCLK2Freq>
 80031fa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	469a      	mov	sl, r3
 8003200:	f04f 0b00 	mov.w	fp, #0
 8003204:	46d0      	mov	r8, sl
 8003206:	46d9      	mov	r9, fp
 8003208:	eb18 0308 	adds.w	r3, r8, r8
 800320c:	eb49 0409 	adc.w	r4, r9, r9
 8003210:	4698      	mov	r8, r3
 8003212:	46a1      	mov	r9, r4
 8003214:	eb18 080a 	adds.w	r8, r8, sl
 8003218:	eb49 090b 	adc.w	r9, r9, fp
 800321c:	f04f 0100 	mov.w	r1, #0
 8003220:	f04f 0200 	mov.w	r2, #0
 8003224:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003228:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800322c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003230:	4688      	mov	r8, r1
 8003232:	4691      	mov	r9, r2
 8003234:	eb1a 0508 	adds.w	r5, sl, r8
 8003238:	eb4b 0609 	adc.w	r6, fp, r9
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	4619      	mov	r1, r3
 8003242:	f04f 0200 	mov.w	r2, #0
 8003246:	f04f 0300 	mov.w	r3, #0
 800324a:	f04f 0400 	mov.w	r4, #0
 800324e:	0094      	lsls	r4, r2, #2
 8003250:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003254:	008b      	lsls	r3, r1, #2
 8003256:	461a      	mov	r2, r3
 8003258:	4623      	mov	r3, r4
 800325a:	4628      	mov	r0, r5
 800325c:	4631      	mov	r1, r6
 800325e:	f7fc ffb3 	bl	80001c8 <__aeabi_uldivmod>
 8003262:	4603      	mov	r3, r0
 8003264:	460c      	mov	r4, r1
 8003266:	461a      	mov	r2, r3
 8003268:	4bb8      	ldr	r3, [pc, #736]	; (800354c <UART_SetConfig+0x6f4>)
 800326a:	fba3 2302 	umull	r2, r3, r3, r2
 800326e:	095b      	lsrs	r3, r3, #5
 8003270:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	469b      	mov	fp, r3
 8003278:	f04f 0c00 	mov.w	ip, #0
 800327c:	46d9      	mov	r9, fp
 800327e:	46e2      	mov	sl, ip
 8003280:	eb19 0309 	adds.w	r3, r9, r9
 8003284:	eb4a 040a 	adc.w	r4, sl, sl
 8003288:	4699      	mov	r9, r3
 800328a:	46a2      	mov	sl, r4
 800328c:	eb19 090b 	adds.w	r9, r9, fp
 8003290:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003294:	f04f 0100 	mov.w	r1, #0
 8003298:	f04f 0200 	mov.w	r2, #0
 800329c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80032a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80032a8:	4689      	mov	r9, r1
 80032aa:	4692      	mov	sl, r2
 80032ac:	eb1b 0509 	adds.w	r5, fp, r9
 80032b0:	eb4c 060a 	adc.w	r6, ip, sl
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	4619      	mov	r1, r3
 80032ba:	f04f 0200 	mov.w	r2, #0
 80032be:	f04f 0300 	mov.w	r3, #0
 80032c2:	f04f 0400 	mov.w	r4, #0
 80032c6:	0094      	lsls	r4, r2, #2
 80032c8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80032cc:	008b      	lsls	r3, r1, #2
 80032ce:	461a      	mov	r2, r3
 80032d0:	4623      	mov	r3, r4
 80032d2:	4628      	mov	r0, r5
 80032d4:	4631      	mov	r1, r6
 80032d6:	f7fc ff77 	bl	80001c8 <__aeabi_uldivmod>
 80032da:	4603      	mov	r3, r0
 80032dc:	460c      	mov	r4, r1
 80032de:	461a      	mov	r2, r3
 80032e0:	4b9a      	ldr	r3, [pc, #616]	; (800354c <UART_SetConfig+0x6f4>)
 80032e2:	fba3 1302 	umull	r1, r3, r3, r2
 80032e6:	095b      	lsrs	r3, r3, #5
 80032e8:	2164      	movs	r1, #100	; 0x64
 80032ea:	fb01 f303 	mul.w	r3, r1, r3
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	3332      	adds	r3, #50	; 0x32
 80032f4:	4a95      	ldr	r2, [pc, #596]	; (800354c <UART_SetConfig+0x6f4>)
 80032f6:	fba2 2303 	umull	r2, r3, r2, r3
 80032fa:	095b      	lsrs	r3, r3, #5
 80032fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003300:	4498      	add	r8, r3
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	469b      	mov	fp, r3
 8003306:	f04f 0c00 	mov.w	ip, #0
 800330a:	46d9      	mov	r9, fp
 800330c:	46e2      	mov	sl, ip
 800330e:	eb19 0309 	adds.w	r3, r9, r9
 8003312:	eb4a 040a 	adc.w	r4, sl, sl
 8003316:	4699      	mov	r9, r3
 8003318:	46a2      	mov	sl, r4
 800331a:	eb19 090b 	adds.w	r9, r9, fp
 800331e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003322:	f04f 0100 	mov.w	r1, #0
 8003326:	f04f 0200 	mov.w	r2, #0
 800332a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800332e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003332:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003336:	4689      	mov	r9, r1
 8003338:	4692      	mov	sl, r2
 800333a:	eb1b 0509 	adds.w	r5, fp, r9
 800333e:	eb4c 060a 	adc.w	r6, ip, sl
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	4619      	mov	r1, r3
 8003348:	f04f 0200 	mov.w	r2, #0
 800334c:	f04f 0300 	mov.w	r3, #0
 8003350:	f04f 0400 	mov.w	r4, #0
 8003354:	0094      	lsls	r4, r2, #2
 8003356:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800335a:	008b      	lsls	r3, r1, #2
 800335c:	461a      	mov	r2, r3
 800335e:	4623      	mov	r3, r4
 8003360:	4628      	mov	r0, r5
 8003362:	4631      	mov	r1, r6
 8003364:	f7fc ff30 	bl	80001c8 <__aeabi_uldivmod>
 8003368:	4603      	mov	r3, r0
 800336a:	460c      	mov	r4, r1
 800336c:	461a      	mov	r2, r3
 800336e:	4b77      	ldr	r3, [pc, #476]	; (800354c <UART_SetConfig+0x6f4>)
 8003370:	fba3 1302 	umull	r1, r3, r3, r2
 8003374:	095b      	lsrs	r3, r3, #5
 8003376:	2164      	movs	r1, #100	; 0x64
 8003378:	fb01 f303 	mul.w	r3, r1, r3
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	011b      	lsls	r3, r3, #4
 8003380:	3332      	adds	r3, #50	; 0x32
 8003382:	4a72      	ldr	r2, [pc, #456]	; (800354c <UART_SetConfig+0x6f4>)
 8003384:	fba2 2303 	umull	r2, r3, r2, r3
 8003388:	095b      	lsrs	r3, r3, #5
 800338a:	f003 020f 	and.w	r2, r3, #15
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4442      	add	r2, r8
 8003394:	609a      	str	r2, [r3, #8]
 8003396:	e0d0      	b.n	800353a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003398:	f7ff fab2 	bl	8002900 <HAL_RCC_GetPCLK1Freq>
 800339c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	469a      	mov	sl, r3
 80033a2:	f04f 0b00 	mov.w	fp, #0
 80033a6:	46d0      	mov	r8, sl
 80033a8:	46d9      	mov	r9, fp
 80033aa:	eb18 0308 	adds.w	r3, r8, r8
 80033ae:	eb49 0409 	adc.w	r4, r9, r9
 80033b2:	4698      	mov	r8, r3
 80033b4:	46a1      	mov	r9, r4
 80033b6:	eb18 080a 	adds.w	r8, r8, sl
 80033ba:	eb49 090b 	adc.w	r9, r9, fp
 80033be:	f04f 0100 	mov.w	r1, #0
 80033c2:	f04f 0200 	mov.w	r2, #0
 80033c6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80033ca:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80033ce:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80033d2:	4688      	mov	r8, r1
 80033d4:	4691      	mov	r9, r2
 80033d6:	eb1a 0508 	adds.w	r5, sl, r8
 80033da:	eb4b 0609 	adc.w	r6, fp, r9
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	4619      	mov	r1, r3
 80033e4:	f04f 0200 	mov.w	r2, #0
 80033e8:	f04f 0300 	mov.w	r3, #0
 80033ec:	f04f 0400 	mov.w	r4, #0
 80033f0:	0094      	lsls	r4, r2, #2
 80033f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80033f6:	008b      	lsls	r3, r1, #2
 80033f8:	461a      	mov	r2, r3
 80033fa:	4623      	mov	r3, r4
 80033fc:	4628      	mov	r0, r5
 80033fe:	4631      	mov	r1, r6
 8003400:	f7fc fee2 	bl	80001c8 <__aeabi_uldivmod>
 8003404:	4603      	mov	r3, r0
 8003406:	460c      	mov	r4, r1
 8003408:	461a      	mov	r2, r3
 800340a:	4b50      	ldr	r3, [pc, #320]	; (800354c <UART_SetConfig+0x6f4>)
 800340c:	fba3 2302 	umull	r2, r3, r3, r2
 8003410:	095b      	lsrs	r3, r3, #5
 8003412:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	469b      	mov	fp, r3
 800341a:	f04f 0c00 	mov.w	ip, #0
 800341e:	46d9      	mov	r9, fp
 8003420:	46e2      	mov	sl, ip
 8003422:	eb19 0309 	adds.w	r3, r9, r9
 8003426:	eb4a 040a 	adc.w	r4, sl, sl
 800342a:	4699      	mov	r9, r3
 800342c:	46a2      	mov	sl, r4
 800342e:	eb19 090b 	adds.w	r9, r9, fp
 8003432:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003436:	f04f 0100 	mov.w	r1, #0
 800343a:	f04f 0200 	mov.w	r2, #0
 800343e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003442:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003446:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800344a:	4689      	mov	r9, r1
 800344c:	4692      	mov	sl, r2
 800344e:	eb1b 0509 	adds.w	r5, fp, r9
 8003452:	eb4c 060a 	adc.w	r6, ip, sl
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	4619      	mov	r1, r3
 800345c:	f04f 0200 	mov.w	r2, #0
 8003460:	f04f 0300 	mov.w	r3, #0
 8003464:	f04f 0400 	mov.w	r4, #0
 8003468:	0094      	lsls	r4, r2, #2
 800346a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800346e:	008b      	lsls	r3, r1, #2
 8003470:	461a      	mov	r2, r3
 8003472:	4623      	mov	r3, r4
 8003474:	4628      	mov	r0, r5
 8003476:	4631      	mov	r1, r6
 8003478:	f7fc fea6 	bl	80001c8 <__aeabi_uldivmod>
 800347c:	4603      	mov	r3, r0
 800347e:	460c      	mov	r4, r1
 8003480:	461a      	mov	r2, r3
 8003482:	4b32      	ldr	r3, [pc, #200]	; (800354c <UART_SetConfig+0x6f4>)
 8003484:	fba3 1302 	umull	r1, r3, r3, r2
 8003488:	095b      	lsrs	r3, r3, #5
 800348a:	2164      	movs	r1, #100	; 0x64
 800348c:	fb01 f303 	mul.w	r3, r1, r3
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	011b      	lsls	r3, r3, #4
 8003494:	3332      	adds	r3, #50	; 0x32
 8003496:	4a2d      	ldr	r2, [pc, #180]	; (800354c <UART_SetConfig+0x6f4>)
 8003498:	fba2 2303 	umull	r2, r3, r2, r3
 800349c:	095b      	lsrs	r3, r3, #5
 800349e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034a2:	4498      	add	r8, r3
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	469b      	mov	fp, r3
 80034a8:	f04f 0c00 	mov.w	ip, #0
 80034ac:	46d9      	mov	r9, fp
 80034ae:	46e2      	mov	sl, ip
 80034b0:	eb19 0309 	adds.w	r3, r9, r9
 80034b4:	eb4a 040a 	adc.w	r4, sl, sl
 80034b8:	4699      	mov	r9, r3
 80034ba:	46a2      	mov	sl, r4
 80034bc:	eb19 090b 	adds.w	r9, r9, fp
 80034c0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80034c4:	f04f 0100 	mov.w	r1, #0
 80034c8:	f04f 0200 	mov.w	r2, #0
 80034cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80034d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80034d8:	4689      	mov	r9, r1
 80034da:	4692      	mov	sl, r2
 80034dc:	eb1b 0509 	adds.w	r5, fp, r9
 80034e0:	eb4c 060a 	adc.w	r6, ip, sl
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	4619      	mov	r1, r3
 80034ea:	f04f 0200 	mov.w	r2, #0
 80034ee:	f04f 0300 	mov.w	r3, #0
 80034f2:	f04f 0400 	mov.w	r4, #0
 80034f6:	0094      	lsls	r4, r2, #2
 80034f8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80034fc:	008b      	lsls	r3, r1, #2
 80034fe:	461a      	mov	r2, r3
 8003500:	4623      	mov	r3, r4
 8003502:	4628      	mov	r0, r5
 8003504:	4631      	mov	r1, r6
 8003506:	f7fc fe5f 	bl	80001c8 <__aeabi_uldivmod>
 800350a:	4603      	mov	r3, r0
 800350c:	460c      	mov	r4, r1
 800350e:	461a      	mov	r2, r3
 8003510:	4b0e      	ldr	r3, [pc, #56]	; (800354c <UART_SetConfig+0x6f4>)
 8003512:	fba3 1302 	umull	r1, r3, r3, r2
 8003516:	095b      	lsrs	r3, r3, #5
 8003518:	2164      	movs	r1, #100	; 0x64
 800351a:	fb01 f303 	mul.w	r3, r1, r3
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	011b      	lsls	r3, r3, #4
 8003522:	3332      	adds	r3, #50	; 0x32
 8003524:	4a09      	ldr	r2, [pc, #36]	; (800354c <UART_SetConfig+0x6f4>)
 8003526:	fba2 2303 	umull	r2, r3, r2, r3
 800352a:	095b      	lsrs	r3, r3, #5
 800352c:	f003 020f 	and.w	r2, r3, #15
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4442      	add	r2, r8
 8003536:	609a      	str	r2, [r3, #8]
}
 8003538:	e7ff      	b.n	800353a <UART_SetConfig+0x6e2>
 800353a:	bf00      	nop
 800353c:	3714      	adds	r7, #20
 800353e:	46bd      	mov	sp, r7
 8003540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003544:	40011000 	.word	0x40011000
 8003548:	40011400 	.word	0x40011400
 800354c:	51eb851f 	.word	0x51eb851f

08003550 <__libc_init_array>:
 8003550:	b570      	push	{r4, r5, r6, lr}
 8003552:	4e0d      	ldr	r6, [pc, #52]	; (8003588 <__libc_init_array+0x38>)
 8003554:	4c0d      	ldr	r4, [pc, #52]	; (800358c <__libc_init_array+0x3c>)
 8003556:	1ba4      	subs	r4, r4, r6
 8003558:	10a4      	asrs	r4, r4, #2
 800355a:	2500      	movs	r5, #0
 800355c:	42a5      	cmp	r5, r4
 800355e:	d109      	bne.n	8003574 <__libc_init_array+0x24>
 8003560:	4e0b      	ldr	r6, [pc, #44]	; (8003590 <__libc_init_array+0x40>)
 8003562:	4c0c      	ldr	r4, [pc, #48]	; (8003594 <__libc_init_array+0x44>)
 8003564:	f000 f82c 	bl	80035c0 <_init>
 8003568:	1ba4      	subs	r4, r4, r6
 800356a:	10a4      	asrs	r4, r4, #2
 800356c:	2500      	movs	r5, #0
 800356e:	42a5      	cmp	r5, r4
 8003570:	d105      	bne.n	800357e <__libc_init_array+0x2e>
 8003572:	bd70      	pop	{r4, r5, r6, pc}
 8003574:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003578:	4798      	blx	r3
 800357a:	3501      	adds	r5, #1
 800357c:	e7ee      	b.n	800355c <__libc_init_array+0xc>
 800357e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003582:	4798      	blx	r3
 8003584:	3501      	adds	r5, #1
 8003586:	e7f2      	b.n	800356e <__libc_init_array+0x1e>
 8003588:	08003600 	.word	0x08003600
 800358c:	08003600 	.word	0x08003600
 8003590:	08003600 	.word	0x08003600
 8003594:	08003604 	.word	0x08003604

08003598 <memcpy>:
 8003598:	b510      	push	{r4, lr}
 800359a:	1e43      	subs	r3, r0, #1
 800359c:	440a      	add	r2, r1
 800359e:	4291      	cmp	r1, r2
 80035a0:	d100      	bne.n	80035a4 <memcpy+0xc>
 80035a2:	bd10      	pop	{r4, pc}
 80035a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80035a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80035ac:	e7f7      	b.n	800359e <memcpy+0x6>

080035ae <memset>:
 80035ae:	4402      	add	r2, r0
 80035b0:	4603      	mov	r3, r0
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d100      	bne.n	80035b8 <memset+0xa>
 80035b6:	4770      	bx	lr
 80035b8:	f803 1b01 	strb.w	r1, [r3], #1
 80035bc:	e7f9      	b.n	80035b2 <memset+0x4>
	...

080035c0 <_init>:
 80035c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035c2:	bf00      	nop
 80035c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035c6:	bc08      	pop	{r3}
 80035c8:	469e      	mov	lr, r3
 80035ca:	4770      	bx	lr

080035cc <_fini>:
 80035cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ce:	bf00      	nop
 80035d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035d2:	bc08      	pop	{r3}
 80035d4:	469e      	mov	lr, r3
 80035d6:	4770      	bx	lr
